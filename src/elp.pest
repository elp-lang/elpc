WHITESPACE = _{ " " | "\t" | NEWLINE }
Program    = _{ SOI ~ Expression* ~ EOI }

Expression = {
    Import
  | Call
  | Function
  | Export
  | Array
  | IdentType
  | MemberValue
  | MemberAssignment
  | Literal
}

Literal = {
    StringLiteral
  | NumberLiteral
  | BoolLiteral
}

ValueArg          = _{ (Ident | Literal) ~ ","? }
Ident             = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
Import            =  { "import" ~ "{" ~ ValueArg+ ~ "}" ~ "from" ~ StringLiteral }
IdentType         =  { LifeCycleModifier? ~ Ident ~ Ident }
Call              =  { Ident ~ "(" ~ ValueArg* ~ ")" }
Function          =  { Ident ~ ("(" ~ IdentType ~ ")")? ~ "{" ~ Expression* ~ "}" }
Export            =  { "export" ~ Function }
Array             =  { "[" ~ Expression ~ "]" }
MemberValue       =  { "." ~ Ident }
MemberAssignment  =  { MemberValue ~ "=" ~ Expression }
LifeCycleModifier =  { ASYNC | CONST }
CONST             =  { "const" }
ASYNC             =  { "async" }

BoolLiteral = { TRUE | FALSE }
TRUE        = { "true" }
FALSE       = { "false" }

StringLiteral         =  { "\"" ~ (StringLiteralInterior | escape)* ~ "\"" }
StringLiteralInterior =  { (!("\\" | "\"") ~ ANY)+ }
predefined            =  { "n" | "r" | "t" | "\\" | "0" | "\"" | "'" }
byte                  =  { "x" ~ hex{2} }
unicode               =  { "u" ~ "{" ~ unicode_hex ~ "}" }
escape                =  { "\\" ~ (predefined | byte | unicode) }
hex                   = _{ '0'..'9' | 'a'..'f' | 'A'..'F' }
unicode_hex           =  { hex{1, 6} }

digit         = _{ '0'..'9' }
Int           =  { digit ~ (digit | "_")* }
Float         =  {
    Int ~ "." ~ Int? ~ exp?
  | Int ~ exp
}
plus          =  { "+" }
minus         =  { "-" }
exp           =  { ^"e" ~ (plus | minus)? ~ Int }
NumberLiteral =  { Int | Float }
