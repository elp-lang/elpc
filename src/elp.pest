Program = { SOI ~ (Declaration | Expression | Statement)* ~ EOI }

// PARENT TYPES
Declaration = { Interface | Enum | VariableDeclaration }
Statement   = { Import | VariableBinding }
Expression  = {
    Literal
}
// \PARENT TYPES

// LITERALS
Literal = {
    StringLiteral
  | NumberLiteral
  | BoolLiteral
}

BoolLiteral = { TRUE | FALSE }
TRUE        = { "true" }
FALSE       = { "false" }

StringLiteral         =  { "\"" ~ (StringLiteralInterior | escape)* ~ "\"" }
StringLiteralInterior =  { (!("\\" | "\"") ~ ANY)+ }
predefined            =  { "n" | "r" | "t" | "\\" | "0" | "\"" | "'" }
byte                  =  { "x" ~ hex{2} }
unicode               =  { "u" ~ "{" ~ unicode_hex ~ "}" }
escape                =  { "\\" ~ (predefined | byte | unicode) }
hex                   = _{ '0'..'9' | 'a'..'f' | 'A'..'F' }
unicode_hex           =  { hex{1, 6} }

digit         = _{ '0'..'9' }
Int           =  { digit ~ (digit | "_")* }
Float         =  {
    Int ~ "." ~ Int? ~ exp?
  | Int ~ exp
}
plus          =  { "+" }
minus         =  { "-" }
exp           =  { ^"e" ~ (plus | minus)? ~ Int }
NumberLiteral =  { Int | Float }
// \LITERALS

// BRANCHING
IF           = @{ "if" }
ELSE         = @{ "else" }
ELSEIF       = @{ "elseif" }
MATCH        =  { "match" }
LogicControl =  { IF | ELSE | ELSEIF }
IfElseChain  =  { LogicControl ~ Expression? ~ "{" ~ Expression* ~ "}" }
// \BRANCHING

// INTRINSICS
WHITESPACE = _{ " " | "\t" | NEWLINE }
IMPORT     =  { "import" }
FROM       =  { "from" }
INTERFACE  =  { "interface" }
ENUM       =  { "enum" }
CONST      =  { "const" }
Keywords   =  { IF | ELSE | ELSEIF | MATCH | INTERFACE | ENUM | IMPORT | FROM | CONST }

IdentConstituents = @{ !Keywords ~ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
Ident             =  { IdentConstituents ~ ("." ~ IdentConstituents)* }
// \INTRINSICS

// DECLARATIONS
ValueBinding        = { "=" ~ Expression }
TypeBinding         = { ":" ~ Ident }
Member              = { "." ~ Ident ~ TypeBinding? ~ ValueBinding? }
EnumMember          = { "." ~ Ident ~ ("(" ~ (Ident ~ TypeBinding ~ ","?)+ ~ ")")? }
Interface           = { INTERFACE ~ Ident ~ "{" ~ Member* ~ "}" }
Enum                = { ENUM ~ Ident ~ "{" ~ EnumMember+ ~ "}" }
VariableDeclaration = { CONST? ~ Ident ~ TypeBinding? }
// \DECLARATIONS

// STATEMENTS
Import          = { IMPORT ~ "{" ~ (Ident ~ ","?)+ ~ "}" ~ FROM ~ StringLiteral }
VariableBinding = { VariableDeclaration ~ "=" ~ ValueBinding }
// \STATEMENTS

// EXPRESSIONS

// \EXPRESSIONS
