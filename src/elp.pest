Program = { SOI ~ Expression* ~ EOI }

// PARENT TYPES
Expression = _{
    Literal
  | Interface
  | Enum
  | Import
  | VariableBinding
  | VariableDeclaration
  | Function
  | FunctionCall
}
// \PARENT TYPES

// LITERALS
Literal = @{
    StringLiteral
  | NumberLiteral
  | BoolLiteral
}

BoolLiteral = _{ TRUE | FALSE }
TRUE        = _{ "true" }
FALSE       = _{ "false" }

StringLiteral         =  { "\"" ~ (StringLiteralInterior | escape)* ~ "\"" }
StringLiteralInterior =  { (!("\\" | "\"") ~ ANY)+ }
predefined            = _{ "n" | "r" | "t" | "\\" | "0" | "\"" | "'" }
byte                  = _{ "x" ~ ASCII_HEX_DIGIT{2} }
unicode               = _{ "u" ~ "{" ~ ASCII_HEX_DIGIT+ ~ "}" }
escape                = _{ "\\" ~ (predefined | byte | unicode) }

digit         = _{ '0'..'9' }
Int           = _{ digit ~ (digit | "_")* }
Float         = _{
    Int ~ "." ~ Int? ~ exp?
  | Int ~ exp
}
plus          = _{ "+" }
minus         = _{ "-" }
exp           = _{ ^"e" ~ (plus | minus)? ~ Int }
NumberLiteral = _{ Int | Float }
// \LITERALS

// BRANCHING
IF           = _{ "if" }
ELSE         = _{ "else" }
ELSEIF       = _{ "elseif" }
MATCH        = _{ "match" }
LogicControl = _{ IF | ELSE | ELSEIF }
IfElseChain  = _{ LogicControl ~ Expression? ~ "{" ~ Expression* ~ "}" }
// \BRANCHING

// INTRINSICS
WHITESPACE = _{ " " | "\t" | NEWLINE }
IMPORT     = _{ "import" }
FROM       = _{ "from" }
INTERFACE  = _{ "interface" }
ENUM       = _{ "enum" }
FN         = _{ "fn" }
CONST      = _{ "const" }
Keywords   = _{ IF | ELSE | ELSEIF | MATCH | INTERFACE | ENUM | IMPORT | FROM | CONST | FN }

IdentConstituents = @{ !Keywords ~ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
Ident             = @{ IdentConstituents ~ ("." ~ IdentConstituents)* }
// \INTRINSICS

// DECLARATIONS
ValueBinding        = { "=" ~ Expression }
TypeBinding         = { ":" ~ Ident }
Member              = { "." ~ Ident ~ TypeBinding? ~ ValueBinding? }
EnumMember          = { "." ~ Ident ~ ParenArgDeclarations? }
Interface           = { INTERFACE ~ Ident ~ "{" ~ Member* ~ "}" }
Enum                = { ENUM ~ Ident ~ "{" ~ EnumMember+ ~ "}" }
VariableDeclaration = { CONST? ~ Ident ~ TypeBinding? }
Function            = { FN ~ Ident ~ ParenArgDeclarations? ~ FunctionInherits? ~ ReturnType? ~ Block }
// \DECLARATIONS

// STATEMENTS
Import          = { IMPORT ~ "{" ~ (Ident ~ ","?)+ ~ "}" ~ FROM ~ StringLiteral }
VariableBinding = { (VariableDeclaration ~ ","?)+ ~ ValueBinding }
// \STATEMENTS

// EXPRESSIONS
Block                = { "{" ~ Expression* ~ "}" }
ParenArgDeclarations = { ("(" ~ (Ident ~ TypeBinding ~ ","?)* ~ ")") }
CallArgDeclarations  = { "(" ~ ((Ident ~ "=")? ~ Expression ~ ","?)* ~ ")" }
ReturnType           = { "->" ~ Ident }
FunctionInherits     = { ":" ~ Ident ~ CallArgDeclarations? }
FunctionCall         = { Ident ~ (CallArgDeclarations | Block)+ }
// \EXPRESSIONS
