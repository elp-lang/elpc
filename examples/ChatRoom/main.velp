import { App, Window } from "elp/app"
import { Form, Label, Input, Button } from "elp/app/elements"
import { Message, User } from "$types/chat"
import { Message as MessageView } from "$components/message"

export object ChatAppState implements Contextual {
	.name: *string
	.messages: [Message]
	.members: [User]
	.loggedIn: bool = false
}

// The Contextual type here actually transforms Chat into a context provider which
// along with the implements on ChatAppState gives all child components writeable
// state if it is passed down and the property is not marked as const.
// So when we pass message down by reference we can actually do .message.reactions.push(newReaction)
// and it will cause reactivity all the way up the view chain where that property is read.
export fn Chat(name: *string) implements App, Contextual<ChatAppState> -> Window {
	Window {
		if .name not Empty or not .loggedIn {
			ForEach(.messages) { message in
				// We borrow the message to pass down which extends it's lifetime 
				// and allows for mutation and avoids copying.
				MessageView( message = &message)
			}
		} else {
			Form(preventDefault, onSubmit={fn { .loggedIn = true }}) {
				Label("Enter your display name") {
					Input(name="display-name", type="text", value={.name})
					Button {
						Text("Log in")
					}
				}
			}
		}
	}
}
