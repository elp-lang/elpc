import { AsyncQueue, String } from "elp"

interface MyInterface {
  .property: string
}

enum MyEnum {
  .OPTION
  .ACTION(arg: string)
}

const NAME: string
variable: string
binding = 1
variadic, binding = 1

fn MyFunction {}
fn MyFunction() {}
fn MyFunction(hello: world) {}

fn MyFunction -> type {}
fn MyFunction() -> type {}
fn MyFunction(hello: world) -> type {}

fn MyFunction: MyType {}
fn MyFunction(): MyFunction {}
fn MyFunction: MyFunction() {}
fn MyFunction(hello: world): MyFunction {}
fn MyFunction(hello: world): MyFunction(hello) {}

fn MyFunction: MyType -> type {}
fn MyFunction(): MyFunction -> type {}
fn MyFunction: MyFunction() -> type {}
fn MyFunction(hello: world): MyFunction -> type {}
fn MyFunction(hello: world): MyFunction(hello) -> type {}
fn MyFunction(hello: world, name: string): MyFunction(hello) -> type {}

MyFunction()
MyFunction {}
MyFunction("world")
MyFunction(hello = "world", name = "dave")
MyFunction("world") {}
MyFunction(hello = "world", name = "dave") {}

if a {}
elseif b { }
else {}

match result {
	.MEMBER -> expression,
	.ACTION(arg: string) -> arg,
}

match booleanCheck {
	true -> expression,
	false -> expression,
}

