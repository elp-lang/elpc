import { AsyncQueue, String } from "elp"

// Comments for devex
interface MyInterface {
  .property: string
  .data: interface {
    .property: string
  }
  fn update() -> thing
}

enum MyEnum {
  .OPTION
  .ACTION(string)
}

const NAME: string
const NAME: string = "hello"
var variable: string = "world"
var binding = 1
var variadic, binding = Tuple(1, 2)

fn MyFunction {}
fn MyFunction() {}
fn MyFunction(hello: world) {}

fn MyFunction -> type {}
fn MyFunction() -> type {}
fn MyFunction(hello: world) -> type {}

fn MyFunction: MyType {}
fn MyFunction(): MyFunction {}
fn MyFunction: MyFunction() {}
fn MyFunction(hello: world): MyFunction {}
fn MyFunction(hello: world): MyFunction(hello) {}

fn MyFunction: MyType -> type {}
fn MyFunction(): MyFunction -> type {}
fn MyFunction: MyFunction() -> type {}
fn MyFunction(hello: world): MyFunction -> type {}
fn MyFunction(hello: world): MyFunction(hello) -> type {}
fn MyFunction(hello: world, name: string): MyFunction(hello) -> type {}

MyFunction()
MyFunction {}
MyFunction("world")
MyFunction(hello = "world", name = "dave")
MyFunction("world") {}
MyFunction(hello = "world", name = "dave") {}

if a {}
elseif b { }
else {}

match result {
	.MEMBER -> expression,
	.ACTION(arg: string) -> arg,
}

match booleanCheck {
	true -> expression,
	false -> expression,
}

// vim: ft=kotlin
