{
    "Label": [
        {
            "arguments": [
                {
                    "name": "label",
                    "type": "@Composable CaretScope.() -> Unit"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "interactionSource",
                    "type": "MutableInteractionSource? = null"
                },
                {
                    "name": "isPersistent",
                    "type": "Boolean = false"
                },
                {
                    "name": "content",
                    "type": "@Composable () -> Unit\n)"
                }
            ]
        }
    ],
    "Text": [
        {
            "arguments": [
                {
                    "name": "text",
                    "type": "AnnotatedString"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "color",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "fontSize",
                    "type": "TextUnit = TextUnit.Unspecified"
                },
                {
                    "name": "fontStyle",
                    "type": "FontStyle? = null"
                },
                {
                    "name": "fontWeight",
                    "type": "FontWeight? = null"
                },
                {
                    "name": "fontFamily",
                    "type": "FontFamily? = null"
                },
                {
                    "name": "letterSpacing",
                    "type": "TextUnit = TextUnit.Unspecified"
                },
                {
                    "name": "textDecoration",
                    "type": "TextDecoration? = null"
                },
                {
                    "name": "textAlign",
                    "type": "TextAlign? = null"
                },
                {
                    "name": "lineHeight",
                    "type": "TextUnit = TextUnit.Unspecified"
                },
                {
                    "name": "overflow",
                    "type": "TextOverflow = TextOverflow.Clip"
                },
                {
                    "name": "softWrap",
                    "type": "Boolean = true"
                },
                {
                    "name": "maxLines",
                    "type": "Int = Int.MAX_VALUE"
                },
                {
                    "name": "inlineContent",
                    "type": "Map<String"
                },
                {
                    "name": "InlineTextContent> = mapOf()",
                    "type": null
                },
                {
                    "name": "onTextLayout",
                    "type": "(TextLayoutResult) -> Unit ="
                }
            ]
        }
    ],
    "ProvideTextStyle": [
        {
            "arguments": [
                {
                    "name": "value",
                    "type": "TextStyle"
                },
                {
                    "name": "content",
                    "type": "@Composable () -> Unit)"
                }
            ]
        }
    ],
    "DatePicker": [
        {
            "arguments": [
                {
                    "name": "state",
                    "type": "DatePickerState"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "dateFormatter",
                    "type": "DatePickerFormatter = remember"
                }
            ]
        }
    ],
    "colors": [
        {
            "arguments": [
                {
                    "name": ") = MaterialTheme.colorScheme.defaultDatePickerColors\n\n    /**\n     * Creates a [DatePickerColors] that will potentially animate between the provided colors\n     * according to the Material specification.\n     *\n     * @param containerColor the color used for the date picker's background\n     * @param titleContentColor the color used for the date picker's title\n     * @param headlineContentColor the color used for the date picker's headline\n     * @param weekdayContentColor the color used for the weekday letters\n     * @param subheadContentColor the color used for the month and year subhead labels that appear\n     * when months are displayed at a `DateRangePicker`.\n     * @param navigationContentColor the content color used for the year selection menu button and\n     * the months arrow navigation when displayed at a `DatePicker`.\n     * @param yearContentColor the color used for a year item content\n     * @param disabledYearContentColor the color used for a disabled year item content\n     * @param currentYearContentColor the color used for the current year content when selecting a\n     * year\n     * @param selectedYearContentColor the color used for a selected year item content\n     * @param disabledSelectedYearContentColor the color used for a disabled selected year item\n     * content\n     * @param selectedYearContainerColor the color used for a selected year item container\n     * @param disabledSelectedYearContainerColor the color used for a disabled selected year item\n     * container\n     * @param dayContentColor the color used for days content\n     * @param disabledDayContentColor the color used for disabled days content\n     * @param selectedDayContentColor the color used for selected days content\n     * @param disabledSelectedDayContentColor the color used for disabled selected days content\n     * @param selectedDayContainerColor the color used for a selected day container\n     * @param disabledSelectedDayContainerColor the color used for a disabled selected day container\n     * @param todayContentColor the color used for the day that marks the current date\n     * @param todayDateBorderColor the color used for the border of the day that marks the current\n     * date\n     * @param dayInSelectionRangeContentColor the content color used for days that are within a date\n     * range selection\n     * @param dayInSelectionRangeContainerColor the container color used for days that are within a\n     * date range selection\n     * @param dividerColor the color used for the dividers used at the date pickers\n     * @param dateTextFieldColors the [TextFieldColors] defaults for the date text field when in\n     * [DisplayMode.Input]. See [OutlinedTextFieldDefaults.colors].\n     */\n    @Composable\n    fun colors(\n        containerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "titleContentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "headlineContentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "weekdayContentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "subheadContentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "navigationContentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "yearContentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledYearContentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "currentYearContentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "selectedYearContentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledSelectedYearContentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "selectedYearContainerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledSelectedYearContainerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "dayContentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledDayContentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "selectedDayContentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledSelectedDayContentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "selectedDayContainerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledSelectedDayContainerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "todayContentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "todayDateBorderColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "dayInSelectionRangeContentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "dayInSelectionRangeContainerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "dividerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "dateTextFieldColors",
                    "type": "TextFieldColors? = null\n    ): DatePickerColors =\n        MaterialTheme.colorScheme.defaultDatePickerColors.copy(\n            containerColor = containerColor"
                },
                {
                    "name": "titleContentColor = titleContentColor",
                    "type": null
                },
                {
                    "name": "headlineContentColor = headlineContentColor",
                    "type": null
                },
                {
                    "name": "weekdayContentColor = weekdayContentColor",
                    "type": null
                },
                {
                    "name": "subheadContentColor = subheadContentColor",
                    "type": null
                },
                {
                    "name": "navigationContentColor = navigationContentColor",
                    "type": null
                },
                {
                    "name": "yearContentColor = yearContentColor",
                    "type": null
                },
                {
                    "name": "disabledYearContentColor = disabledYearContentColor",
                    "type": null
                },
                {
                    "name": "currentYearContentColor = currentYearContentColor",
                    "type": null
                },
                {
                    "name": "selectedYearContentColor = selectedYearContentColor",
                    "type": null
                },
                {
                    "name": "disabledSelectedYearContentColor = disabledSelectedYearContentColor",
                    "type": null
                },
                {
                    "name": "selectedYearContainerColor = selectedYearContainerColor",
                    "type": null
                },
                {
                    "name": "disabledSelectedYearContainerColor = disabledSelectedYearContainerColor",
                    "type": null
                },
                {
                    "name": "dayContentColor = dayContentColor",
                    "type": null
                },
                {
                    "name": "disabledDayContentColor = disabledDayContentColor",
                    "type": null
                },
                {
                    "name": "selectedDayContentColor = selectedDayContentColor",
                    "type": null
                },
                {
                    "name": "disabledSelectedDayContentColor = disabledSelectedDayContentColor",
                    "type": null
                },
                {
                    "name": "selectedDayContainerColor = selectedDayContainerColor",
                    "type": null
                },
                {
                    "name": "disabledSelectedDayContainerColor = disabledSelectedDayContainerColor",
                    "type": null
                },
                {
                    "name": "todayContentColor = todayContentColor",
                    "type": null
                },
                {
                    "name": "todayDateBorderColor = todayDateBorderColor",
                    "type": null
                },
                {
                    "name": "dayInSelectionRangeContentColor = dayInSelectionRangeContentColor",
                    "type": null
                },
                {
                    "name": "dayInSelectionRangeContainerColor = dayInSelectionRangeContainerColor",
                    "type": null
                },
                {
                    "name": "dividerColor = dividerColor",
                    "type": null
                },
                {
                    "name": "dateTextFieldColors = dateTextFieldColors\n        )\n\n    internal val ColorScheme.defaultDatePickerColors",
                    "type": "DatePickerColors\n        @Composable\n        get()"
                }
            ]
        },
        {
            "arguments": [
                {
                    "name": ") = MaterialTheme.colorScheme.defaultTimePickerColors\n\n    /**\n     * Default colors used by a [TimePicker] in different states\n     *\n     * @param clockDialColor The color of the clock dial.\n     * @param clockDialSelectedContentColor the color of the numbers of the clock dial when they\n     * are selected or overlapping with the selector\n     * @param clockDialUnselectedContentColor the color of the numbers of the clock dial when they\n     * are unselected\n     * @param selectorColor The color of the clock dial selector.\n     * @param containerColor The container color of the time picker.\n     * @param periodSelectorBorderColor the color used for the border of the AM/PM toggle.\n     * @param periodSelectorSelectedContainerColor the color used for the selected container of\n     * the AM/PM toggle\n     * @param periodSelectorUnselectedContainerColor the color used for the unselected container\n     * of the AM/PM toggle\n     * @param periodSelectorSelectedContentColor color used for the selected content of\n     * the AM/PM toggle\n     * @param periodSelectorUnselectedContentColor color used for the unselected content\n     * of the AM/PM toggle\n     * @param timeSelectorSelectedContainerColor color used for the selected container of the\n     * display buttons to switch between hour and minutes\n     * @param timeSelectorUnselectedContainerColor color used for the unselected container of the\n     * display buttons to switch between hour and minutes\n     * @param timeSelectorSelectedContentColor color used for the selected content of the display\n     * buttons to switch between hour and minutes\n     * @param timeSelectorUnselectedContentColor color used for the unselected content of the\n     * display buttons to switch between hour and minutes\n     */\n    @Composable\n    fun colors(\n        clockDialColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "clockDialSelectedContentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "clockDialUnselectedContentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "selectorColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "containerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "periodSelectorBorderColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "periodSelectorSelectedContainerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "periodSelectorUnselectedContainerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "periodSelectorSelectedContentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "periodSelectorUnselectedContentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "timeSelectorSelectedContainerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "timeSelectorUnselectedContainerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "timeSelectorSelectedContentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "timeSelectorUnselectedContentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": ") = MaterialTheme.colorScheme.defaultTimePickerColors.copy(\n        clockDialColor = clockDialColor",
                    "type": null
                },
                {
                    "name": "clockDialSelectedContentColor = clockDialSelectedContentColor",
                    "type": null
                },
                {
                    "name": "clockDialUnselectedContentColor = clockDialUnselectedContentColor",
                    "type": null
                },
                {
                    "name": "selectorColor = selectorColor",
                    "type": null
                },
                {
                    "name": "containerColor = containerColor",
                    "type": null
                },
                {
                    "name": "periodSelectorBorderColor = periodSelectorBorderColor",
                    "type": null
                },
                {
                    "name": "periodSelectorSelectedContainerColor = periodSelectorSelectedContainerColor",
                    "type": null
                },
                {
                    "name": "periodSelectorUnselectedContainerColor = periodSelectorUnselectedContainerColor",
                    "type": null
                },
                {
                    "name": "periodSelectorSelectedContentColor = periodSelectorSelectedContentColor",
                    "type": null
                },
                {
                    "name": "periodSelectorUnselectedContentColor = periodSelectorUnselectedContentColor",
                    "type": null
                },
                {
                    "name": "timeSelectorSelectedContainerColor = timeSelectorSelectedContainerColor",
                    "type": null
                },
                {
                    "name": "timeSelectorUnselectedContainerColor = timeSelectorUnselectedContainerColor",
                    "type": null
                },
                {
                    "name": "timeSelectorSelectedContentColor = timeSelectorSelectedContentColor",
                    "type": null
                },
                {
                    "name": "timeSelectorUnselectedContentColor = timeSelectorUnselectedContentColor\n    )\n\n    internal val ColorScheme.defaultTimePickerColors",
                    "type": "TimePickerColors\n        get()"
                }
            ]
        },
        {
            "arguments": [
                {
                    "name": ") = MaterialTheme.colorScheme.defaultSliderColors\n\n    /**\n     * Creates a [SliderColors] that represents the different colors used in parts of the\n     * [Slider] in different states.\n     *\n     * For the name references below the words \"active\" and \"inactive\" are used. Active part of\n     * the slider is filled with progress",
                    "type": null
                },
                {
                    "name": "so if slider's progress is 30% out of 100%",
                    "type": null
                },
                {
                    "name": "left (or\n     * right in RTL) 30% of the track will be active",
                    "type": null
                },
                {
                    "name": "while the rest is inactive.\n     *\n     * @param thumbColor thumb color when enabled\n     * @param activeTrackColor color of the track in the part that is \"active\"",
                    "type": null
                },
                {
                    "name": "meaning that the\n     * thumb is ahead of it\n     * @param activeTickColor colors to be used to draw tick marks on the active track",
                    "type": null
                },
                {
                    "name": "if `steps`\n     * is specified\n     * @param inactiveTrackColor color of the track in the part that is \"inactive\"",
                    "type": null
                },
                {
                    "name": "meaning that the\n     * thumb is before it\n     * @param inactiveTickColor colors to be used to draw tick marks on the inactive track",
                    "type": null
                },
                {
                    "name": "if\n     * `steps` are specified on the Slider is specified\n     * @param disabledThumbColor thumb colors when disabled\n     * @param disabledActiveTrackColor color of the track in the \"active\" part when the Slider is\n     * disabled\n     * @param disabledActiveTickColor colors to be used to draw tick marks on the active track\n     * when Slider is disabled and when `steps` are specified on it\n     * @param disabledInactiveTrackColor color of the track in the \"inactive\" part when the\n     * Slider is disabled\n     * @param disabledInactiveTickColor colors to be used to draw tick marks on the inactive part\n     * of the track when Slider is disabled and when `steps` are specified on it\n     */\n    @Composable\n    fun colors(\n        thumbColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "activeTrackColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "activeTickColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "inactiveTrackColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "inactiveTickColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledThumbColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledActiveTrackColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledActiveTickColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledInactiveTrackColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledInactiveTickColor",
                    "type": "Color = Color.Unspecified\n    ): SliderColors = MaterialTheme.colorScheme.defaultSliderColors.copy(\n        thumbColor = thumbColor"
                },
                {
                    "name": "activeTrackColor = activeTrackColor",
                    "type": null
                },
                {
                    "name": "activeTickColor = activeTickColor",
                    "type": null
                },
                {
                    "name": "inactiveTrackColor = inactiveTrackColor",
                    "type": null
                },
                {
                    "name": "inactiveTickColor = inactiveTickColor",
                    "type": null
                },
                {
                    "name": "disabledThumbColor = disabledThumbColor",
                    "type": null
                },
                {
                    "name": "disabledActiveTrackColor = disabledActiveTrackColor",
                    "type": null
                },
                {
                    "name": "disabledActiveTickColor = disabledActiveTickColor",
                    "type": null
                },
                {
                    "name": "disabledInactiveTrackColor = disabledInactiveTrackColor",
                    "type": null
                },
                {
                    "name": "disabledInactiveTickColor = disabledInactiveTickColor\n    )\n\n    internal val ColorScheme.defaultSliderColors",
                    "type": "SliderColors\n        get()"
                }
            ]
        },
        {
            "arguments": [
                {
                    "name": "selectedIconColor",
                    "type": "Color = NavigationBarTokens.ActiveIconColor.value"
                },
                {
                    "name": "selectedTextColor",
                    "type": "Color = NavigationBarTokens.ActiveLabelTextColor.value"
                },
                {
                    "name": "indicatorColor",
                    "type": "Color = NavigationBarTokens.ActiveIndicatorColor.value"
                },
                {
                    "name": "unselectedIconColor",
                    "type": "Color = NavigationBarTokens.InactiveIconColor.value"
                },
                {
                    "name": "unselectedTextColor",
                    "type": "Color = NavigationBarTokens.InactiveLabelTextColor.value"
                },
                {
                    "name": ")",
                    "type": "NavigationBarItemColors = NavigationBarItemColors(\n        selectedIconColor = selectedIconColor"
                },
                {
                    "name": "selectedTextColor = selectedTextColor",
                    "type": null
                },
                {
                    "name": "selectedIndicatorColor = indicatorColor",
                    "type": null
                },
                {
                    "name": "unselectedIconColor = unselectedIconColor",
                    "type": null
                },
                {
                    "name": "unselectedTextColor = unselectedTextColor",
                    "type": null
                },
                {
                    "name": "disabledIconColor = unselectedIconColor.copy(alpha = DisabledAlpha)",
                    "type": null
                },
                {
                    "name": "disabledTextColor = unselectedTextColor.copy(alpha = DisabledAlpha)",
                    "type": null
                },
                {
                    "name": ")\n}\n\n/**\n * Represents the colors of the various elements of a navigation item.\n *\n * @constructor create an instance with arbitrary colors.\n *\n * @param selectedIconColor the color to use for the icon when the item is selected.\n * @param selectedTextColor the color to use for the text label when the item is selected.\n * @param selectedIndicatorColor the color to use for the indicator when the item is selected.\n * @param unselectedIconColor the color to use for the icon when the item is unselected.\n * @param unselectedTextColor the color to use for the text label when the item is unselected.\n * @param disabledIconColor the color to use for the icon when the item is disabled.\n * @param disabledTextColor the color to use for the text label when the item is disabled.\n*/\n@Stable\nclass NavigationBarItemColors constructor(\n    val selectedIconColor",
                    "type": "Color"
                },
                {
                    "name": "val selectedTextColor",
                    "type": "Color"
                },
                {
                    "name": "val selectedIndicatorColor",
                    "type": "Color"
                },
                {
                    "name": "val unselectedIconColor",
                    "type": "Color"
                },
                {
                    "name": "val unselectedTextColor",
                    "type": "Color"
                },
                {
                    "name": "val disabledIconColor",
                    "type": "Color"
                },
                {
                    "name": "val disabledTextColor",
                    "type": "Color"
                },
                {
                    "name": ")",
                    "type": null
                }
            ]
        },
        {
            "arguments": [
                {
                    "name": ") = MaterialTheme.colorScheme.defaultCheckboxColors\n\n    /**\n     * Creates a [CheckboxColors] that will animate between the provided colors according to the\n     * Material specification.\n     *\n     * @param checkedColor the color that will be used for the border and box when checked\n     * @param uncheckedColor color that will be used for the border when unchecked. By default",
                    "type": null
                },
                {
                    "name": "the\n     * inner box is transparent when unchecked.\n     * @param checkmarkColor color that will be used for the checkmark when checked\n     * @param disabledCheckedColor color that will be used for the box and border when disabled and\n     * checked\n     * @param disabledUncheckedColor color that will be used for the border when disabled and\n     * unchecked. By default",
                    "type": null
                },
                {
                    "name": "the inner box is transparent when unchecked.\n     * @param disabledIndeterminateColor color that will be used for the box and\n     * border in a [TriStateCheckbox] when disabled AND in an [ToggleableState.Indeterminate] state\n     */\n    @Composable\n    fun colors(\n        checkedColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "uncheckedColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "checkmarkColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledCheckedColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledUncheckedColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledIndeterminateColor",
                    "type": "Color = Color.Unspecified\n    ): CheckboxColors = MaterialTheme.colorScheme.defaultCheckboxColors.copy(\n        checkedCheckmarkColor = checkmarkColor"
                },
                {
                    "name": "uncheckedCheckmarkColor = Color.Transparent",
                    "type": null
                },
                {
                    "name": "checkedBoxColor = checkedColor",
                    "type": null
                },
                {
                    "name": "uncheckedBoxColor = Color.Transparent",
                    "type": null
                },
                {
                    "name": "disabledCheckedBoxColor = disabledCheckedColor",
                    "type": null
                },
                {
                    "name": "disabledUncheckedBoxColor = Color.Transparent",
                    "type": null
                },
                {
                    "name": "disabledIndeterminateBoxColor = disabledIndeterminateColor",
                    "type": null
                },
                {
                    "name": "checkedBorderColor = checkedColor",
                    "type": null
                },
                {
                    "name": "uncheckedBorderColor = uncheckedColor",
                    "type": null
                },
                {
                    "name": "disabledBorderColor = disabledCheckedColor",
                    "type": null
                },
                {
                    "name": "disabledUncheckedBorderColor = disabledUncheckedColor",
                    "type": null
                },
                {
                    "name": "disabledIndeterminateBorderColor = disabledIndeterminateColor\n    )\n\n    internal val ColorScheme.defaultCheckboxColors",
                    "type": "CheckboxColors\n        get()"
                }
            ]
        },
        {
            "arguments": [
                {
                    "name": ") = MaterialTheme.colorScheme.defaultOutlinedTextFieldColors\n\n    /**\n     * Creates a [TextFieldColors] that represents the default input text",
                    "type": null
                },
                {
                    "name": "container",
                    "type": null
                },
                {
                    "name": "and content\n     * colors (including label",
                    "type": null
                },
                {
                    "name": "placeholder",
                    "type": null
                },
                {
                    "name": "icons",
                    "type": null
                },
                {
                    "name": "etc.) used in an [OutlinedTextField].\n     *\n     * @param focusedTextColor the color used for the input text of this text field when focused\n     * @param unfocusedTextColor the color used for the input text of this text field when not\n     * focused\n     * @param disabledTextColor the color used for the input text of this text field when disabled\n     * @param errorTextColor the color used for the input text of this text field when in error\n     * state\n     * @param focusedContainerColor the container color for this text field when focused\n     * @param unfocusedContainerColor the container color for this text field when not focused\n     * @param disabledContainerColor the container color for this text field when disabled\n     * @param errorContainerColor the container color for this text field when in error state\n     * @param cursorColor the cursor color for this text field\n     * @param errorCursorColor the cursor color for this text field when in error state\n     * @param selectionColors the colors used when the input text of this text field is selected\n     * @param focusedBorderColor the border color for this text field when focused\n     * @param unfocusedBorderColor the border color for this text field when not focused\n     * @param disabledBorderColor the border color for this text field when disabled\n     * @param errorBorderColor the border color for this text field when in error state\n     * @param focusedLeadingIconColor the leading icon color for this text field when focused\n     * @param unfocusedLeadingIconColor the leading icon color for this text field when not focused\n     * @param disabledLeadingIconColor the leading icon color for this text field when disabled\n     * @param errorLeadingIconColor the leading icon color for this text field when in error state\n     * @param focusedTrailingIconColor the trailing icon color for this text field when focused\n     * @param unfocusedTrailingIconColor the trailing icon color for this text field when not focused\n     * @param disabledTrailingIconColor the trailing icon color for this text field when disabled\n     * @param errorTrailingIconColor the trailing icon color for this text field when in error state\n     * @param focusedLabelColor the label color for this text field when focused\n     * @param unfocusedLabelColor the label color for this text field when not focused\n     * @param disabledLabelColor the label color for this text field when disabled\n     * @param errorLabelColor the label color for this text field when in error state\n     * @param focusedPlaceholderColor the placeholder color for this text field when focused\n     * @param unfocusedPlaceholderColor the placeholder color for this text field when not focused\n     * @param disabledPlaceholderColor the placeholder color for this text field when disabled\n     * @param errorPlaceholderColor the placeholder color for this text field when in error state\n     * @param focusedSupportingTextColor the supporting text color for this text field when focused\n     * @param unfocusedSupportingTextColor the supporting text color for this text field when not\n     * focused\n     * @param disabledSupportingTextColor the supporting text color for this text field when\n     * disabled\n     * @param errorSupportingTextColor the supporting text color for this text field when in error\n     * state\n     * @param focusedPrefixColor the prefix color for this text field when focused\n     * @param unfocusedPrefixColor the prefix color for this text field when not focused\n     * @param disabledPrefixColor the prefix color for this text field when disabled\n     * @param errorPrefixColor the prefix color for this text field when in error state\n     * @param focusedSuffixColor the suffix color for this text field when focused\n     * @param unfocusedSuffixColor the suffix color for this text field when not focused\n     * @param disabledSuffixColor the suffix color for this text field when disabled\n     * @param errorSuffixColor the suffix color for this text field when in error state\n     */\n    @Composable\n    fun colors(\n        focusedTextColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "unfocusedTextColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledTextColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "errorTextColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "focusedContainerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "unfocusedContainerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledContainerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "errorContainerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "cursorColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "errorCursorColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "selectionColors",
                    "type": "TextSelectionColors? = null"
                },
                {
                    "name": "focusedBorderColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "unfocusedBorderColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledBorderColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "errorBorderColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "focusedLeadingIconColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "unfocusedLeadingIconColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledLeadingIconColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "errorLeadingIconColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "focusedTrailingIconColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "unfocusedTrailingIconColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledTrailingIconColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "errorTrailingIconColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "focusedLabelColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "unfocusedLabelColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledLabelColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "errorLabelColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "focusedPlaceholderColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "unfocusedPlaceholderColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledPlaceholderColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "errorPlaceholderColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "focusedSupportingTextColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "unfocusedSupportingTextColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledSupportingTextColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "errorSupportingTextColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "focusedPrefixColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "unfocusedPrefixColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledPrefixColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "errorPrefixColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "focusedSuffixColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "unfocusedSuffixColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledSuffixColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "errorSuffixColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": ")",
                    "type": "TextFieldColors =\n        MaterialTheme.colorScheme.defaultOutlinedTextFieldColors.copy(\n            focusedTextColor = focusedTextColor"
                },
                {
                    "name": "unfocusedTextColor = unfocusedTextColor",
                    "type": null
                },
                {
                    "name": "disabledTextColor = disabledTextColor",
                    "type": null
                },
                {
                    "name": "errorTextColor = errorTextColor",
                    "type": null
                },
                {
                    "name": "focusedContainerColor = focusedContainerColor",
                    "type": null
                },
                {
                    "name": "unfocusedContainerColor = unfocusedContainerColor",
                    "type": null
                },
                {
                    "name": "disabledContainerColor = disabledContainerColor",
                    "type": null
                },
                {
                    "name": "errorContainerColor = errorContainerColor",
                    "type": null
                },
                {
                    "name": "cursorColor = cursorColor",
                    "type": null
                },
                {
                    "name": "errorCursorColor = errorCursorColor",
                    "type": null
                },
                {
                    "name": "textSelectionColors = selectionColors",
                    "type": null
                },
                {
                    "name": "focusedIndicatorColor = focusedBorderColor",
                    "type": null
                },
                {
                    "name": "unfocusedIndicatorColor = unfocusedBorderColor",
                    "type": null
                },
                {
                    "name": "disabledIndicatorColor = disabledBorderColor",
                    "type": null
                },
                {
                    "name": "errorIndicatorColor = errorBorderColor",
                    "type": null
                },
                {
                    "name": "focusedLeadingIconColor = focusedLeadingIconColor",
                    "type": null
                },
                {
                    "name": "unfocusedLeadingIconColor = unfocusedLeadingIconColor",
                    "type": null
                },
                {
                    "name": "disabledLeadingIconColor = disabledLeadingIconColor",
                    "type": null
                },
                {
                    "name": "errorLeadingIconColor = errorLeadingIconColor",
                    "type": null
                },
                {
                    "name": "focusedTrailingIconColor = focusedTrailingIconColor",
                    "type": null
                },
                {
                    "name": "unfocusedTrailingIconColor = unfocusedTrailingIconColor",
                    "type": null
                },
                {
                    "name": "disabledTrailingIconColor = disabledTrailingIconColor",
                    "type": null
                },
                {
                    "name": "errorTrailingIconColor = errorTrailingIconColor",
                    "type": null
                },
                {
                    "name": "focusedLabelColor = focusedLabelColor",
                    "type": null
                },
                {
                    "name": "unfocusedLabelColor = unfocusedLabelColor",
                    "type": null
                },
                {
                    "name": "disabledLabelColor = disabledLabelColor",
                    "type": null
                },
                {
                    "name": "errorLabelColor = errorLabelColor",
                    "type": null
                },
                {
                    "name": "focusedPlaceholderColor = focusedPlaceholderColor",
                    "type": null
                },
                {
                    "name": "unfocusedPlaceholderColor = unfocusedPlaceholderColor",
                    "type": null
                },
                {
                    "name": "disabledPlaceholderColor = disabledPlaceholderColor",
                    "type": null
                },
                {
                    "name": "errorPlaceholderColor = errorPlaceholderColor",
                    "type": null
                },
                {
                    "name": "focusedSupportingTextColor = focusedSupportingTextColor",
                    "type": null
                },
                {
                    "name": "unfocusedSupportingTextColor = unfocusedSupportingTextColor",
                    "type": null
                },
                {
                    "name": "disabledSupportingTextColor = disabledSupportingTextColor",
                    "type": null
                },
                {
                    "name": "errorSupportingTextColor = errorSupportingTextColor",
                    "type": null
                },
                {
                    "name": "focusedPrefixColor = focusedPrefixColor",
                    "type": null
                },
                {
                    "name": "unfocusedPrefixColor = unfocusedPrefixColor",
                    "type": null
                },
                {
                    "name": "disabledPrefixColor = disabledPrefixColor",
                    "type": null
                },
                {
                    "name": "errorPrefixColor = errorPrefixColor",
                    "type": null
                },
                {
                    "name": "focusedSuffixColor = focusedSuffixColor",
                    "type": null
                },
                {
                    "name": "unfocusedSuffixColor = unfocusedSuffixColor",
                    "type": null
                },
                {
                    "name": "disabledSuffixColor = disabledSuffixColor",
                    "type": null
                },
                {
                    "name": "errorSuffixColor = errorSuffixColor",
                    "type": null
                },
                {
                    "name": ")\n\n    internal val ColorScheme.defaultOutlinedTextFieldColors",
                    "type": "TextFieldColors\n        @Composable\n        get()"
                }
            ]
        },
        {
            "arguments": [
                {
                    "name": "selectedIconColor",
                    "type": "Color = NavigationRailTokens.ActiveIconColor.value"
                },
                {
                    "name": "selectedTextColor",
                    "type": "Color = NavigationRailTokens.ActiveLabelTextColor.value"
                },
                {
                    "name": "indicatorColor",
                    "type": "Color = NavigationRailTokens.ActiveIndicatorColor.value"
                },
                {
                    "name": "unselectedIconColor",
                    "type": "Color = NavigationRailTokens.InactiveIconColor.value"
                },
                {
                    "name": "unselectedTextColor",
                    "type": "Color = NavigationRailTokens.InactiveLabelTextColor.value"
                },
                {
                    "name": ")",
                    "type": "NavigationRailItemColors = NavigationRailItemColors(\n        selectedIconColor = selectedIconColor"
                },
                {
                    "name": "selectedTextColor = selectedTextColor",
                    "type": null
                },
                {
                    "name": "selectedIndicatorColor = indicatorColor",
                    "type": null
                },
                {
                    "name": "unselectedIconColor = unselectedIconColor",
                    "type": null
                },
                {
                    "name": "unselectedTextColor = unselectedTextColor",
                    "type": null
                },
                {
                    "name": "disabledIconColor = unselectedIconColor.copy(alpha = DisabledAlpha)",
                    "type": null
                },
                {
                    "name": "disabledTextColor = unselectedTextColor.copy(alpha = DisabledAlpha)",
                    "type": null
                },
                {
                    "name": ")\n}\n\n/**\n * Represents the colors of the various elements of a navigation item.\n *\n * @constructor create an instance with arbitrary colors.\n *\n * @param selectedIconColor the color to use for the icon when the item is selected.\n * @param selectedTextColor the color to use for the text label when the item is selected.\n * @param selectedIndicatorColor the color to use for the indicator when the item is selected.\n * @param unselectedIconColor the color to use for the icon when the item is unselected.\n * @param unselectedTextColor the color to use for the text label when the item is unselected.\n * @param disabledIconColor the color to use for the icon when the item is disabled.\n * @param disabledTextColor the color to use for the text label when the item is disabled.\n */\n@Stable\nclass NavigationRailItemColors constructor(\n    val selectedIconColor",
                    "type": "Color"
                },
                {
                    "name": "val selectedTextColor",
                    "type": "Color"
                },
                {
                    "name": "val selectedIndicatorColor",
                    "type": "Color"
                },
                {
                    "name": "val unselectedIconColor",
                    "type": "Color"
                },
                {
                    "name": "val unselectedTextColor",
                    "type": "Color"
                },
                {
                    "name": "val disabledIconColor",
                    "type": "Color"
                },
                {
                    "name": "val disabledTextColor",
                    "type": "Color"
                },
                {
                    "name": ")",
                    "type": null
                }
            ]
        },
        {
            "arguments": [
                {
                    "name": "selectedContainerColor",
                    "type": "Color = NavigationDrawerTokens.ActiveIndicatorColor.value"
                },
                {
                    "name": "unselectedContainerColor",
                    "type": "Color = NavigationDrawerTokens.ContainerColor.value"
                },
                {
                    "name": "selectedIconColor",
                    "type": "Color = NavigationDrawerTokens.ActiveIconColor.value"
                },
                {
                    "name": "unselectedIconColor",
                    "type": "Color = NavigationDrawerTokens.InactiveIconColor.value"
                },
                {
                    "name": "selectedTextColor",
                    "type": "Color = NavigationDrawerTokens.ActiveLabelTextColor.value"
                },
                {
                    "name": "unselectedTextColor",
                    "type": "Color = NavigationDrawerTokens.InactiveLabelTextColor.value"
                },
                {
                    "name": "selectedBadgeColor",
                    "type": "Color = selectedTextColor"
                },
                {
                    "name": "unselectedBadgeColor",
                    "type": "Color = unselectedTextColor"
                },
                {
                    "name": ")",
                    "type": "NavigationDrawerItemColors = DefaultDrawerItemsColor(\n        selectedIconColor"
                },
                {
                    "name": "unselectedIconColor",
                    "type": null
                },
                {
                    "name": "selectedTextColor",
                    "type": null
                },
                {
                    "name": "unselectedTextColor",
                    "type": null
                },
                {
                    "name": "selectedContainerColor",
                    "type": null
                },
                {
                    "name": "unselectedContainerColor",
                    "type": null
                },
                {
                    "name": "selectedBadgeColor",
                    "type": null
                },
                {
                    "name": "unselectedBadgeColor\n    )\n\n    /**\n     * Default external padding for a [NavigationDrawerItem] according to the Material\n     * specification.\n     */\n    val ItemPadding = PaddingValues(horizontal = 12.dp)\n}\n\nprivate class DefaultDrawerItemsColor(\n    val selectedIconColor",
                    "type": "Color"
                },
                {
                    "name": "val unselectedIconColor",
                    "type": "Color"
                },
                {
                    "name": "val selectedTextColor",
                    "type": "Color"
                },
                {
                    "name": "val unselectedTextColor",
                    "type": "Color"
                },
                {
                    "name": "val selectedContainerColor",
                    "type": "Color"
                },
                {
                    "name": "val unselectedContainerColor",
                    "type": "Color"
                },
                {
                    "name": "val selectedBadgeColor",
                    "type": "Color"
                },
                {
                    "name": "val unselectedBadgeColor",
                    "type": "Color\n) : NavigationDrawerItemColors"
                }
            ]
        },
        {
            "arguments": [
                {
                    "name": ") = MaterialTheme.colorScheme.defaultSegmentedButtonColors\n\n    /**\n     * Creates a [SegmentedButtonColors] that represents the different colors\n     * used in a [SegmentedButton] in different states.\n     *\n     * @param activeContainerColor the color used for the container when enabled and active\n     * @param activeContentColor the color used for the content when enabled and active\n     * @param activeBorderColor the color used for the border when enabled and active\n     * @param inactiveContainerColor the color used for the container when enabled and inactive\n     * @param inactiveContentColor the color used for the content when enabled and inactive\n     * @param inactiveBorderColor the color used for the border when enabled and active\n     * @param disabledActiveContainerColor the color used for the container\n     * when disabled and active\n     * @param disabledActiveContentColor the color used for the content when disabled and active\n     * @param disabledActiveBorderColor the color used for the border when disabled and active\n     * @param disabledInactiveContainerColor the color used for the container\n     * when disabled and inactive\n     * @param disabledInactiveContentColor the color used for the content when disabled and\n     * unchecked\n     * @param disabledInactiveBorderColor the color used for the border when disabled and inactive\n     */\n    @Composable\n    fun colors(\n        activeContainerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "activeContentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "activeBorderColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "inactiveContainerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "inactiveContentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "inactiveBorderColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledActiveContainerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledActiveContentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledActiveBorderColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledInactiveContainerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledInactiveContentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledInactiveBorderColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": ")",
                    "type": "SegmentedButtonColors = MaterialTheme.colorScheme.defaultSegmentedButtonColors.copy(\n        activeContainerColor = activeContainerColor"
                },
                {
                    "name": "activeContentColor = activeContentColor",
                    "type": null
                },
                {
                    "name": "activeBorderColor = activeBorderColor",
                    "type": null
                },
                {
                    "name": "inactiveContainerColor = inactiveContainerColor",
                    "type": null
                },
                {
                    "name": "inactiveContentColor = inactiveContentColor",
                    "type": null
                },
                {
                    "name": "inactiveBorderColor = inactiveBorderColor",
                    "type": null
                },
                {
                    "name": "disabledActiveContainerColor = disabledActiveContainerColor",
                    "type": null
                },
                {
                    "name": "disabledActiveContentColor = disabledActiveContentColor",
                    "type": null
                },
                {
                    "name": "disabledActiveBorderColor = disabledActiveBorderColor",
                    "type": null
                },
                {
                    "name": "disabledInactiveContainerColor = disabledInactiveContainerColor",
                    "type": null
                },
                {
                    "name": "disabledInactiveContentColor = disabledInactiveContentColor",
                    "type": null
                },
                {
                    "name": "disabledInactiveBorderColor = disabledInactiveBorderColor\n    )\n\n    internal val ColorScheme.defaultSegmentedButtonColors",
                    "type": "SegmentedButtonColors\n        get()"
                }
            ]
        },
        {
            "arguments": [
                {
                    "name": "containerColor",
                    "type": "Color = ListTokens.ListItemContainerColor.value"
                },
                {
                    "name": "headlineColor",
                    "type": "Color = ListTokens.ListItemLabelTextColor.value"
                },
                {
                    "name": "leadingIconColor",
                    "type": "Color = ListTokens.ListItemLeadingIconColor.value"
                },
                {
                    "name": "overlineColor",
                    "type": "Color = ListTokens.ListItemOverlineColor.value"
                },
                {
                    "name": "supportingColor",
                    "type": "Color = ListTokens.ListItemSupportingTextColor.value"
                },
                {
                    "name": "trailingIconColor",
                    "type": "Color = ListTokens.ListItemTrailingIconColor.value"
                },
                {
                    "name": "disabledHeadlineColor",
                    "type": "Color = ListTokens.ListItemDisabledLabelTextColor.value\n            .copy(alpha = ListTokens.ListItemDisabledLabelTextOpacity)"
                },
                {
                    "name": "disabledLeadingIconColor",
                    "type": "Color = ListTokens.ListItemDisabledLeadingIconColor.value\n            .copy(alpha = ListTokens.ListItemDisabledLeadingIconOpacity)"
                },
                {
                    "name": "disabledTrailingIconColor",
                    "type": "Color = ListTokens.ListItemDisabledTrailingIconColor.value\n            .copy(alpha = ListTokens.ListItemDisabledTrailingIconOpacity)\n    ): ListItemColors =\n        ListItemColors(\n            containerColor = containerColor"
                },
                {
                    "name": "headlineColor = headlineColor",
                    "type": null
                },
                {
                    "name": "leadingIconColor = leadingIconColor",
                    "type": null
                },
                {
                    "name": "overlineColor = overlineColor",
                    "type": null
                },
                {
                    "name": "supportingTextColor = supportingColor",
                    "type": null
                },
                {
                    "name": "trailingIconColor = trailingIconColor",
                    "type": null
                },
                {
                    "name": "disabledHeadlineColor = disabledHeadlineColor",
                    "type": null
                },
                {
                    "name": "disabledLeadingIconColor = disabledLeadingIconColor",
                    "type": null
                },
                {
                    "name": "disabledTrailingIconColor = disabledTrailingIconColor",
                    "type": null
                },
                {
                    "name": ")\n}\n\n/**\n * Represents the container and content colors used in a list item in different states.\n *\n * @constructor create an instance with arbitrary colors.\n * See [ListItemDefaults.colors] for the default colors used in a [ListItem].\n *\n * @param containerColor the container color of this list item when enabled.\n * @param headlineColor the headline text content color of this list item when\n * enabled.\n * @param leadingIconColor the color of this list item's leading content when enabled.\n * @param overlineColor the overline text color of this list item\n * @param supportingTextColor the supporting text color of this list item\n * @param trailingIconColor the color of this list item's trailing content when enabled.\n * @param disabledHeadlineColor the content color of this list item when not enabled.\n * @param disabledLeadingIconColor the color of this list item's leading content when not\n * enabled.\n * @param disabledTrailingIconColor the color of this list item's trailing content when not\n * enabled.\n */\n@Immutable\nclass ListItemColors constructor(\n    val containerColor",
                    "type": "Color"
                },
                {
                    "name": "val headlineColor",
                    "type": "Color"
                },
                {
                    "name": "val leadingIconColor",
                    "type": "Color"
                },
                {
                    "name": "val overlineColor",
                    "type": "Color"
                },
                {
                    "name": "val supportingTextColor",
                    "type": "Color"
                },
                {
                    "name": "val trailingIconColor",
                    "type": "Color"
                },
                {
                    "name": "val disabledHeadlineColor",
                    "type": "Color"
                },
                {
                    "name": "val disabledLeadingIconColor",
                    "type": "Color"
                },
                {
                    "name": "val disabledTrailingIconColor",
                    "type": "Color"
                },
                {
                    "name": ")",
                    "type": null
                }
            ]
        },
        {
            "arguments": [
                {
                    "name": ") = MaterialTheme.colorScheme.defaultSwitchColors\n\n    /**\n     * Creates a [SwitchColors] that represents the different colors used in a [Switch] in\n     * different states.\n     *\n     * @param checkedThumbColor the color used for the thumb when enabled and checked\n     * @param checkedTrackColor the color used for the track when enabled and checked\n     * @param checkedBorderColor the color used for the border when enabled and checked\n     * @param checkedIconColor the color used for the icon when enabled and checked\n     * @param uncheckedThumbColor the color used for the thumb when enabled and unchecked\n     * @param uncheckedTrackColor the color used for the track when enabled and unchecked\n     * @param uncheckedBorderColor the color used for the border when enabled and unchecked\n     * @param uncheckedIconColor the color used for the icon when enabled and unchecked\n     * @param disabledCheckedThumbColor the color used for the thumb when disabled and checked\n     * @param disabledCheckedTrackColor the color used for the track when disabled and checked\n     * @param disabledCheckedBorderColor the color used for the border when disabled and checked\n     * @param disabledCheckedIconColor the color used for the icon when disabled and checked\n     * @param disabledUncheckedThumbColor the color used for the thumb when disabled and unchecked\n     * @param disabledUncheckedTrackColor the color used for the track when disabled and unchecked\n     * @param disabledUncheckedBorderColor the color used for the border when disabled and unchecked\n     * @param disabledUncheckedIconColor the color used for the icon when disabled and unchecked\n     */\n    @Composable\n    fun colors(\n        checkedThumbColor",
                    "type": "Color = SwitchTokens.SelectedHandleColor.value"
                },
                {
                    "name": "checkedTrackColor",
                    "type": "Color = SwitchTokens.SelectedTrackColor.value"
                },
                {
                    "name": "checkedBorderColor",
                    "type": "Color = Color.Transparent"
                },
                {
                    "name": "checkedIconColor",
                    "type": "Color = SwitchTokens.SelectedIconColor.value"
                },
                {
                    "name": "uncheckedThumbColor",
                    "type": "Color = SwitchTokens.UnselectedHandleColor.value"
                },
                {
                    "name": "uncheckedTrackColor",
                    "type": "Color = SwitchTokens.UnselectedTrackColor.value"
                },
                {
                    "name": "uncheckedBorderColor",
                    "type": "Color = SwitchTokens.UnselectedFocusTrackOutlineColor.value"
                },
                {
                    "name": "uncheckedIconColor",
                    "type": "Color = SwitchTokens.UnselectedIconColor.value"
                },
                {
                    "name": "disabledCheckedThumbColor",
                    "type": "Color = SwitchTokens.DisabledSelectedHandleColor.value\n            .copy(alpha = SwitchTokens.DisabledSelectedHandleOpacity)\n            .compositeOver(MaterialTheme.colorScheme.surface)"
                },
                {
                    "name": "disabledCheckedTrackColor",
                    "type": "Color = SwitchTokens.DisabledSelectedTrackColor.value\n            .copy(alpha = SwitchTokens.DisabledTrackOpacity)\n            .compositeOver(MaterialTheme.colorScheme.surface)"
                },
                {
                    "name": "disabledCheckedBorderColor",
                    "type": "Color = Color.Transparent"
                },
                {
                    "name": "disabledCheckedIconColor",
                    "type": "Color = SwitchTokens.DisabledSelectedIconColor.value\n            .copy(alpha = SwitchTokens.DisabledSelectedIconOpacity)\n            .compositeOver(MaterialTheme.colorScheme.surface)"
                },
                {
                    "name": "disabledUncheckedThumbColor",
                    "type": "Color = SwitchTokens.DisabledUnselectedHandleColor.value\n            .copy(alpha = SwitchTokens.DisabledUnselectedHandleOpacity)\n            .compositeOver(MaterialTheme.colorScheme.surface)"
                },
                {
                    "name": "disabledUncheckedTrackColor",
                    "type": "Color = SwitchTokens.DisabledUnselectedTrackColor.value\n            .copy(alpha = SwitchTokens.DisabledTrackOpacity)\n            .compositeOver(MaterialTheme.colorScheme.surface)"
                },
                {
                    "name": "disabledUncheckedBorderColor",
                    "type": "Color =\n            SwitchTokens.DisabledUnselectedTrackOutlineColor.value\n                .copy(alpha = SwitchTokens.DisabledTrackOpacity)\n                .compositeOver(MaterialTheme.colorScheme.surface)"
                },
                {
                    "name": "disabledUncheckedIconColor",
                    "type": "Color = SwitchTokens.DisabledUnselectedIconColor.value\n            .copy(alpha = SwitchTokens.DisabledUnselectedIconOpacity)\n            .compositeOver(MaterialTheme.colorScheme.surface)"
                },
                {
                    "name": ")",
                    "type": "SwitchColors = SwitchColors(\n        checkedThumbColor = checkedThumbColor"
                },
                {
                    "name": "checkedTrackColor = checkedTrackColor",
                    "type": null
                },
                {
                    "name": "checkedBorderColor = checkedBorderColor",
                    "type": null
                },
                {
                    "name": "checkedIconColor = checkedIconColor",
                    "type": null
                },
                {
                    "name": "uncheckedThumbColor = uncheckedThumbColor",
                    "type": null
                },
                {
                    "name": "uncheckedTrackColor = uncheckedTrackColor",
                    "type": null
                },
                {
                    "name": "uncheckedBorderColor = uncheckedBorderColor",
                    "type": null
                },
                {
                    "name": "uncheckedIconColor = uncheckedIconColor",
                    "type": null
                },
                {
                    "name": "disabledCheckedThumbColor = disabledCheckedThumbColor",
                    "type": null
                },
                {
                    "name": "disabledCheckedTrackColor = disabledCheckedTrackColor",
                    "type": null
                },
                {
                    "name": "disabledCheckedBorderColor = disabledCheckedBorderColor",
                    "type": null
                },
                {
                    "name": "disabledCheckedIconColor = disabledCheckedIconColor",
                    "type": null
                },
                {
                    "name": "disabledUncheckedThumbColor = disabledUncheckedThumbColor",
                    "type": null
                },
                {
                    "name": "disabledUncheckedTrackColor = disabledUncheckedTrackColor",
                    "type": null
                },
                {
                    "name": "disabledUncheckedBorderColor = disabledUncheckedBorderColor",
                    "type": null
                },
                {
                    "name": "disabledUncheckedIconColor = disabledUncheckedIconColor\n    )\n\n    internal val ColorScheme.defaultSwitchColors",
                    "type": "SwitchColors\n        get()"
                }
            ]
        },
        {
            "arguments": [
                {
                    "name": ") = MaterialTheme.colorScheme.defaultRadioButtonColors\n\n    /**\n     * Creates a [RadioButtonColors] that will animate between the provided colors according to\n     * the Material specification.\n     *\n     * @param selectedColor the color to use for the RadioButton when selected and enabled.\n     * @param unselectedColor the color to use for the RadioButton when unselected and enabled.\n     * @param disabledSelectedColor the color to use for the RadioButton when disabled and selected.\n     * @param disabledUnselectedColor the color to use for the RadioButton when disabled and not\n     * selected.\n     * @return the resulting [RadioButtonColors] used for the RadioButton\n     */\n    @Composable\n    fun colors(\n        selectedColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "unselectedColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledSelectedColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledUnselectedColor",
                    "type": "Color = Color.Unspecified\n    ): RadioButtonColors = MaterialTheme.colorScheme.defaultRadioButtonColors.copy(\n        selectedColor"
                },
                {
                    "name": "unselectedColor",
                    "type": null
                },
                {
                    "name": "disabledSelectedColor",
                    "type": null
                },
                {
                    "name": "disabledUnselectedColor\n    )\n\n    internal val ColorScheme.defaultRadioButtonColors",
                    "type": "RadioButtonColors\n        get()"
                }
            ]
        }
    ],
    "DatePickerTitle": [
        {
            "arguments": [
                {
                    "name": "displayMode",
                    "type": "DisplayMode"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier)"
                }
            ]
        }
    ],
    "DatePickerHeadline": [
        {
            "arguments": [
                {
                    "name": "@Suppress(\"AutoBoxing\") selectedDateMillis",
                    "type": "Long?"
                },
                {
                    "name": "displayMode",
                    "type": "DisplayMode"
                },
                {
                    "name": "dateFormatter",
                    "type": "DatePickerFormatter"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier\n    )"
                }
            ]
        }
    ],
    "Transition": [
        {
            "arguments": [
                {
                    "name": "inputState",
                    "type": "InputPhase"
                },
                {
                    "name": "focusedTextStyleColor",
                    "type": "Color"
                },
                {
                    "name": "unfocusedTextStyleColor",
                    "type": "Color"
                },
                {
                    "name": "contentColor",
                    "type": "@Composable (InputPhase) -> Color"
                },
                {
                    "name": "showLabel",
                    "type": "Boolean"
                },
                {
                    "name": "content",
                    "type": "@Composable (\n            labelProgress: Float"
                },
                {
                    "name": "labelTextStyleColor",
                    "type": "Color"
                },
                {
                    "name": "labelContentColor",
                    "type": "Color"
                },
                {
                    "name": "placeholderOpacity",
                    "type": "Float"
                },
                {
                    "name": "prefixSuffixOpacity",
                    "type": "Float"
                },
                {
                    "name": ") -> Unit\n    )",
                    "type": null
                }
            ]
        }
    ],
    "Scaffold": [
        {
            "arguments": [
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "topBar",
                    "type": "@Composable () -> Unit ="
                }
            ]
        }
    ],
    "layoutType": [
        {
            "arguments": [
                {
                    "name": ")",
                    "type": "TimePickerLayoutType = defaultTimePickerLayoutType\n}\n\n/**\n * Represents the colors used by a [TimePicker] in different states\n *\n * @constructor create an instance with arbitrary colors.\n * See [TimePickerDefaults.colors] for the default implementation that follows Material\n * specifications.\n *\n * @param clockDialColor The color of the clock dial.\n * @param clockDialSelectedContentColor the color of the numbers of the clock dial when they\n * are selected or overlapping with the selector\n * @param clockDialUnselectedContentColor the color of the numbers of the clock dial when they\n * are unselected\n * @param selectorColor The color of the clock dial selector.\n * @param containerColor The container color of the time picker.\n * @param periodSelectorBorderColor the color used for the border of the AM/PM toggle.\n * @param periodSelectorSelectedContainerColor the color used for the selected container of\n * the AM/PM toggle\n * @param periodSelectorUnselectedContainerColor the color used for the unselected container\n * of the AM/PM toggle\n * @param periodSelectorSelectedContentColor color used for the selected content of\n * the AM/PM toggle\n * @param periodSelectorUnselectedContentColor color used for the unselected content\n * of the AM/PM toggle\n * @param timeSelectorSelectedContainerColor color used for the selected container of the\n * display buttons to switch between hour and minutes\n * @param timeSelectorUnselectedContainerColor color used for the unselected container of the\n * display buttons to switch between hour and minutes\n * @param timeSelectorSelectedContentColor color used for the selected content of the display\n * buttons to switch between hour and minutes\n * @param timeSelectorUnselectedContentColor color used for the unselected content of the\n * display buttons to switch between hour and minutes\n */\n@Immutable\n@ExperimentalMaterial3Api\nclass TimePickerColors constructor(\n    val clockDialColor: Color"
                },
                {
                    "name": "val selectorColor",
                    "type": "Color"
                },
                {
                    "name": "val containerColor",
                    "type": "Color"
                },
                {
                    "name": "val periodSelectorBorderColor",
                    "type": "Color"
                },
                {
                    "name": "val clockDialSelectedContentColor",
                    "type": "Color"
                },
                {
                    "name": "val clockDialUnselectedContentColor",
                    "type": "Color"
                },
                {
                    "name": "val periodSelectorSelectedContainerColor",
                    "type": "Color"
                },
                {
                    "name": "val periodSelectorUnselectedContainerColor",
                    "type": "Color"
                },
                {
                    "name": "val periodSelectorSelectedContentColor",
                    "type": "Color"
                },
                {
                    "name": "val periodSelectorUnselectedContentColor",
                    "type": "Color"
                },
                {
                    "name": "val timeSelectorSelectedContainerColor",
                    "type": "Color"
                },
                {
                    "name": "val timeSelectorUnselectedContainerColor",
                    "type": "Color"
                },
                {
                    "name": "val timeSelectorSelectedContentColor",
                    "type": "Color"
                },
                {
                    "name": "val timeSelectorUnselectedContentColor",
                    "type": "Color"
                },
                {
                    "name": ")",
                    "type": null
                }
            ]
        }
    ],
    "itemColors": [
        {
            "arguments": [
                {
                    "name": ") = MaterialTheme.colorScheme.defaultMenuItemColors\n\n    /**\n     * Creates a [MenuItemColors] that represents the default text and icon colors used in a\n     * [DropdownMenuItemContent].\n     *\n     * @param textColor the text color of this [DropdownMenuItemContent] when enabled\n     * @param leadingIconColor the leading icon color of this [DropdownMenuItemContent] when enabled\n     * @param trailingIconColor the trailing icon color of this [DropdownMenuItemContent] when\n     * enabled\n     * @param disabledTextColor the text color of this [DropdownMenuItemContent] when not enabled\n     * @param disabledLeadingIconColor the leading icon color of this [DropdownMenuItemContent] when\n     * not enabled\n     * @param disabledTrailingIconColor the trailing icon color of this [DropdownMenuItemContent]\n     * when not enabled\n     */\n    @Composable\n    fun itemColors(\n        textColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "leadingIconColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "trailingIconColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledTextColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledLeadingIconColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledTrailingIconColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": ")",
                    "type": "MenuItemColors = MaterialTheme.colorScheme.defaultMenuItemColors.copy(\n        textColor = textColor"
                },
                {
                    "name": "leadingIconColor = leadingIconColor",
                    "type": null
                },
                {
                    "name": "trailingIconColor = trailingIconColor",
                    "type": null
                },
                {
                    "name": "disabledTextColor = disabledTextColor",
                    "type": null
                },
                {
                    "name": "disabledLeadingIconColor = disabledLeadingIconColor",
                    "type": null
                },
                {
                    "name": "disabledTrailingIconColor = disabledTrailingIconColor",
                    "type": null
                },
                {
                    "name": ")\n\n    internal val ColorScheme.defaultMenuItemColors",
                    "type": "MenuItemColors\n        get()"
                }
            ]
        }
    ],
    "Slider": [
        {
            "arguments": [
                {
                    "name": "value",
                    "type": "Float"
                },
                {
                    "name": "onValueChange",
                    "type": "(Float) -> Unit"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "enabled",
                    "type": "Boolean = true"
                },
                {
                    "name": "valueRange",
                    "type": "ClosedFloatingPointRange<Float> = 0f..1f"
                },
                {
                    "name": "@IntRange(from = 0)\n    steps",
                    "type": "Int = 0"
                },
                {
                    "name": "onValueChangeFinished",
                    "type": "(() -> Unit)? = null"
                },
                {
                    "name": "colors",
                    "type": "SliderColors = SliderDefaults.colors()"
                },
                {
                    "name": "interactionSource",
                    "type": "MutableInteractionSource = remember"
                }
            ]
        }
    ],
    "RangeSlider": [
        {
            "arguments": [
                {
                    "name": "value",
                    "type": "ClosedFloatingPointRange<Float>"
                },
                {
                    "name": "onValueChange",
                    "type": "(ClosedFloatingPointRange<Float>) -> Unit"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "enabled",
                    "type": "Boolean = true"
                },
                {
                    "name": "valueRange",
                    "type": "ClosedFloatingPointRange<Float> = 0f..1f"
                },
                {
                    "name": "@IntRange(from = 0)\n    steps",
                    "type": "Int = 0"
                },
                {
                    "name": "onValueChangeFinished",
                    "type": "(() -> Unit)? = null"
                },
                {
                    "name": "colors",
                    "type": "SliderColors = SliderDefaults.colors()\n)"
                }
            ]
        }
    ],
    "Thumb": [
        {
            "arguments": [
                {
                    "name": "interactionSource",
                    "type": "MutableInteractionSource"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "colors",
                    "type": "SliderColors = colors()"
                },
                {
                    "name": "enabled",
                    "type": "Boolean = true"
                },
                {
                    "name": "thumbSize",
                    "type": "DpSize = ThumbSize\n    )"
                }
            ]
        }
    ],
    "Track": [
        {
            "arguments": [
                {
                    "name": "rangeSliderState",
                    "type": "RangeSliderState"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "colors",
                    "type": "SliderColors = colors()"
                },
                {
                    "name": "enabled",
                    "type": "Boolean = true\n    )"
                }
            ]
        }
    ],
    "Card": [
        {
            "arguments": [
                {
                    "name": "onClick",
                    "type": "() -> Unit"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "enabled",
                    "type": "Boolean = true"
                },
                {
                    "name": "shape",
                    "type": "Shape = CardDefaults.shape"
                },
                {
                    "name": "colors",
                    "type": "CardColors = CardDefaults.cardColors()"
                },
                {
                    "name": "elevation",
                    "type": "CardElevation = CardDefaults.cardElevation()"
                },
                {
                    "name": "border",
                    "type": "BorderStroke? = null"
                },
                {
                    "name": "interactionSource",
                    "type": "MutableInteractionSource? = null"
                },
                {
                    "name": "content",
                    "type": "@Composable ColumnScope.() -> Unit\n)"
                }
            ]
        }
    ],
    "ElevatedCard": [
        {
            "arguments": [
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "shape",
                    "type": "Shape = CardDefaults.elevatedShape"
                },
                {
                    "name": "colors",
                    "type": "CardColors = CardDefaults.elevatedCardColors()"
                },
                {
                    "name": "elevation",
                    "type": "CardElevation = CardDefaults.elevatedCardElevation()"
                },
                {
                    "name": "content",
                    "type": "@Composable ColumnScope.() -> Unit\n) = Card(\n    modifier = modifier"
                },
                {
                    "name": "shape = shape",
                    "type": null
                },
                {
                    "name": "border = null",
                    "type": null
                },
                {
                    "name": "elevation = elevation",
                    "type": null
                },
                {
                    "name": "colors = colors",
                    "type": null
                },
                {
                    "name": "content = content\n)\n\n/**\n * <a href=\"https",
                    "type": "//m3.material.io/components/cards/overview\" class=\"external\" target=\"_blank\">Material Design elevated card</a>.\n *\n * Elevated cards contain content and actions that relate information about a subject. They have a\n * drop shadow"
                },
                {
                    "name": "providing more separation from the background than filled cards",
                    "type": null
                },
                {
                    "name": "but less than\n * outlined cards.\n *\n * This ElevatedCard handles click events",
                    "type": null
                },
                {
                    "name": "calling its [onClick] lambda.\n *\n * ![Elevated card image](https",
                    "type": "//developer.android.com/images/reference/androidx/compose/material3/elevated-card.png)\n *\n * Clickable elevated card sample:\n * @sample androidx.compose.material3.samples.ClickableElevatedCardSample\n *\n * @param onClick called when this card is clicked\n * @param modifier the [Modifier] to be applied to this card\n * @param enabled controls the enabled state of this card. When `false`"
                },
                {
                    "name": "this component will not\n * respond to user input",
                    "type": null
                },
                {
                    "name": "and it will appear visually disabled and disabled to accessibility\n * services.\n * @param shape defines the shape of this card's container and shadow (when using [elevation])\n * @param colors [CardColors] that will be used to resolve the color(s) used for this card in\n * different states. See [CardDefaults.elevatedCardElevation].\n * @param elevation [CardElevation] used to resolve the elevation for this card in different states.\n * This controls the size of the shadow below the card. Additionally",
                    "type": null
                },
                {
                    "name": "when the container color is\n * [ColorScheme.surface]",
                    "type": null
                },
                {
                    "name": "this controls the amount of primary color applied as an overlay. See also",
                    "type": "* [Surface].\n * @param interactionSource an optional hoisted [MutableInteractionSource] for observing and\n * emitting [Interaction]s for this card. You can use this to change the card's appearance\n * or preview the card in different states. Note that if `null` is provided"
                },
                {
                    "name": "interactions will\n * still happen internally.\n */\n@Composable\nfun ElevatedCard(\n    onClick",
                    "type": "() -> Unit"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "enabled",
                    "type": "Boolean = true"
                },
                {
                    "name": "shape",
                    "type": "Shape = CardDefaults.elevatedShape"
                },
                {
                    "name": "colors",
                    "type": "CardColors = CardDefaults.elevatedCardColors()"
                },
                {
                    "name": "elevation",
                    "type": "CardElevation = CardDefaults.elevatedCardElevation()"
                },
                {
                    "name": "interactionSource",
                    "type": "MutableInteractionSource? = null"
                },
                {
                    "name": "content",
                    "type": "@Composable ColumnScope.() -> Unit\n) = Card(\n    onClick = onClick"
                },
                {
                    "name": "modifier = modifier",
                    "type": null
                },
                {
                    "name": "enabled = enabled",
                    "type": null
                },
                {
                    "name": "shape = shape",
                    "type": null
                },
                {
                    "name": "colors = colors",
                    "type": null
                },
                {
                    "name": "elevation = elevation",
                    "type": null
                },
                {
                    "name": "border = null",
                    "type": null
                },
                {
                    "name": "interactionSource = interactionSource",
                    "type": null
                },
                {
                    "name": "content = content\n)\n\n/**\n * <a href=\"https",
                    "type": "//m3.material.io/components/cards/overview\" class=\"external\" target=\"_blank\">Material Design outlined card</a>.\n *\n * Outlined cards contain content and actions that relate information about a subject. They have a\n * visual boundary around the container. This can provide greater emphasis than the other types.\n *\n * This OutlinedCard does not handle input events - see the other OutlinedCard overloads if you want\n * a clickable or selectable OutlinedCard.\n *\n * ![Outlined card image](https://developer.android.com/images/reference/androidx/compose/material3/outlined-card.png)\n *\n * Outlined card sample:\n * @sample androidx.compose.material3.samples.OutlinedCardSample\n *\n * @param modifier the [Modifier] to be applied to this card\n * @param shape defines the shape of this card's container"
                },
                {
                    "name": "border (when [border] is not null)",
                    "type": null
                },
                {
                    "name": "and\n * shadow (when using [elevation])\n * @param colors [CardColors] that will be used to resolve the color(s) used for this card in\n * different states. See [CardDefaults.outlinedCardColors].\n * @param elevation [CardElevation] used to resolve the elevation for this card in different states.\n * This controls the size of the shadow below the card. Additionally",
                    "type": null
                },
                {
                    "name": "when the container color is\n * [ColorScheme.surface]",
                    "type": null
                },
                {
                    "name": "this controls the amount of primary color applied as an overlay. See also",
                    "type": "* [Surface].\n * @param border the border to draw around the container of this card\n */\n@Composable\nfun OutlinedCard(\n    modifier: Modifier = Modifier"
                },
                {
                    "name": "shape",
                    "type": "Shape = CardDefaults.outlinedShape"
                },
                {
                    "name": "colors",
                    "type": "CardColors = CardDefaults.outlinedCardColors()"
                },
                {
                    "name": "elevation",
                    "type": "CardElevation = CardDefaults.outlinedCardElevation()"
                },
                {
                    "name": "border",
                    "type": "BorderStroke = CardDefaults.outlinedCardBorder()"
                },
                {
                    "name": "content",
                    "type": "@Composable ColumnScope.() -> Unit\n) = Card(\n    modifier = modifier"
                },
                {
                    "name": "shape = shape",
                    "type": null
                },
                {
                    "name": "colors = colors",
                    "type": null
                },
                {
                    "name": "elevation = elevation",
                    "type": null
                },
                {
                    "name": "border = border",
                    "type": null
                },
                {
                    "name": "content = content\n)\n\n/**\n * <a href=\"https",
                    "type": "//m3.material.io/components/cards/overview\" class=\"external\" target=\"_blank\">Material Design outlined card</a>.\n *\n * Outlined cards contain content and actions that relate information about a subject. They have a\n * visual boundary around the container. This can provide greater emphasis than the other types.\n *\n * This OutlinedCard handles click events"
                },
                {
                    "name": "calling its [onClick] lambda.\n *\n * ![Outlined card image](https",
                    "type": "//developer.android.com/images/reference/androidx/compose/material3/outlined-card.png)\n *\n * Clickable outlined card sample:\n * @sample androidx.compose.material3.samples.ClickableOutlinedCardSample\n *\n * @param onClick called when this card is clicked\n * @param modifier the [Modifier] to be applied to this card\n * @param enabled controls the enabled state of this card. When `false`"
                },
                {
                    "name": "this component will not\n * respond to user input",
                    "type": null
                },
                {
                    "name": "and it will appear visually disabled and disabled to accessibility\n * services.\n * @param shape defines the shape of this card's container",
                    "type": null
                },
                {
                    "name": "border (when [border] is not null)",
                    "type": null
                },
                {
                    "name": "and\n * shadow (when using [elevation])\n * @param colors [CardColors] that will be used to resolve the color(s) used for this card in\n * different states. See [CardDefaults.outlinedCardColors].\n * @param elevation [CardElevation] used to resolve the elevation for this card in different states.\n * This controls the size of the shadow below the card. Additionally",
                    "type": null
                },
                {
                    "name": "when the container color is\n * [ColorScheme.surface]",
                    "type": null
                },
                {
                    "name": "this controls the amount of primary color applied as an overlay. See also",
                    "type": "* [Surface].\n * @param border the border to draw around the container of this card\n * @param interactionSource an optional hoisted [MutableInteractionSource] for observing and\n * emitting [Interaction]s for this card. You can use this to change the card's appearance\n * or preview the card in different states. Note that if `null` is provided"
                },
                {
                    "name": "interactions will\n * still happen internally.\n */\n@Composable\nfun OutlinedCard(\n    onClick",
                    "type": "() -> Unit"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "enabled",
                    "type": "Boolean = true"
                },
                {
                    "name": "shape",
                    "type": "Shape = CardDefaults.outlinedShape"
                },
                {
                    "name": "colors",
                    "type": "CardColors = CardDefaults.outlinedCardColors()"
                },
                {
                    "name": "elevation",
                    "type": "CardElevation = CardDefaults.outlinedCardElevation()"
                },
                {
                    "name": "border",
                    "type": "BorderStroke = CardDefaults.outlinedCardBorder(enabled)"
                },
                {
                    "name": "interactionSource",
                    "type": "MutableInteractionSource? = null"
                },
                {
                    "name": "content",
                    "type": "@Composable ColumnScope.() -> Unit\n) = Card(\n    onClick = onClick"
                },
                {
                    "name": "modifier = modifier",
                    "type": null
                },
                {
                    "name": "enabled = enabled",
                    "type": null
                },
                {
                    "name": "shape = shape",
                    "type": null
                },
                {
                    "name": "colors = colors",
                    "type": null
                },
                {
                    "name": "elevation = elevation",
                    "type": null
                },
                {
                    "name": "border = border",
                    "type": null
                },
                {
                    "name": "interactionSource = interactionSource",
                    "type": null
                },
                {
                    "name": "content = content\n)\n\n/**\n * Contains the default values used by all card types.\n */\nobject CardDefaults",
                    "type": null
                }
            ]
        }
    ],
    "cardElevation": [
        {
            "arguments": [
                {
                    "name": "defaultElevation",
                    "type": "Dp = FilledCardTokens.ContainerElevation"
                },
                {
                    "name": "pressedElevation",
                    "type": "Dp = FilledCardTokens.PressedContainerElevation"
                },
                {
                    "name": "focusedElevation",
                    "type": "Dp = FilledCardTokens.FocusContainerElevation"
                },
                {
                    "name": "hoveredElevation",
                    "type": "Dp = FilledCardTokens.HoverContainerElevation"
                },
                {
                    "name": "draggedElevation",
                    "type": "Dp = FilledCardTokens.DraggedContainerElevation"
                },
                {
                    "name": "disabledElevation",
                    "type": "Dp = FilledCardTokens.DisabledContainerElevation\n    ): CardElevation = CardElevation(\n        defaultElevation = defaultElevation"
                },
                {
                    "name": "pressedElevation = pressedElevation",
                    "type": null
                },
                {
                    "name": "focusedElevation = focusedElevation",
                    "type": null
                },
                {
                    "name": "hoveredElevation = hoveredElevation",
                    "type": null
                },
                {
                    "name": "draggedElevation = draggedElevation",
                    "type": null
                },
                {
                    "name": "disabledElevation = disabledElevation\n    )\n\n    /**\n     * Creates a [CardElevation] that will animate between the provided values according to the\n     * Material specification for an [ElevatedCard].\n     *\n     * @param defaultElevation the elevation used when the [ElevatedCard] is has no other\n     * [Interaction]s.\n     * @param pressedElevation the elevation used when the [ElevatedCard] is pressed.\n     * @param focusedElevation the elevation used when the [ElevatedCard] is focused.\n     * @param hoveredElevation the elevation used when the [ElevatedCard] is hovered.\n     * @param draggedElevation the elevation used when the [ElevatedCard] is dragged.\n     */\n    @Composable\n    fun elevatedCardElevation(\n        defaultElevation",
                    "type": "Dp = ElevatedCardTokens.ContainerElevation"
                },
                {
                    "name": "pressedElevation",
                    "type": "Dp = ElevatedCardTokens.PressedContainerElevation"
                },
                {
                    "name": "focusedElevation",
                    "type": "Dp = ElevatedCardTokens.FocusContainerElevation"
                },
                {
                    "name": "hoveredElevation",
                    "type": "Dp = ElevatedCardTokens.HoverContainerElevation"
                },
                {
                    "name": "draggedElevation",
                    "type": "Dp = ElevatedCardTokens.DraggedContainerElevation"
                },
                {
                    "name": "disabledElevation",
                    "type": "Dp = ElevatedCardTokens.DisabledContainerElevation\n    ): CardElevation = CardElevation(\n        defaultElevation = defaultElevation"
                },
                {
                    "name": "pressedElevation = pressedElevation",
                    "type": null
                },
                {
                    "name": "focusedElevation = focusedElevation",
                    "type": null
                },
                {
                    "name": "hoveredElevation = hoveredElevation",
                    "type": null
                },
                {
                    "name": "draggedElevation = draggedElevation",
                    "type": null
                },
                {
                    "name": "disabledElevation = disabledElevation\n    )\n\n    /**\n     * Creates a [CardElevation] that will animate between the provided values according to the\n     * Material specification for an [OutlinedCard].\n     *\n     * @param defaultElevation the elevation used when the [OutlinedCard] is has no other\n     * [Interaction]s.\n     * @param pressedElevation the elevation used when the [OutlinedCard] is pressed.\n     * @param focusedElevation the elevation used when the [OutlinedCard] is focused.\n     * @param hoveredElevation the elevation used when the [OutlinedCard] is hovered.\n     * @param draggedElevation the elevation used when the [OutlinedCard] is dragged.\n     */\n    @Composable\n    fun outlinedCardElevation(\n        defaultElevation",
                    "type": "Dp = OutlinedCardTokens.ContainerElevation"
                },
                {
                    "name": "pressedElevation",
                    "type": "Dp = defaultElevation"
                },
                {
                    "name": "focusedElevation",
                    "type": "Dp = defaultElevation"
                },
                {
                    "name": "hoveredElevation",
                    "type": "Dp = defaultElevation"
                },
                {
                    "name": "draggedElevation",
                    "type": "Dp = OutlinedCardTokens.DraggedContainerElevation"
                },
                {
                    "name": "disabledElevation",
                    "type": "Dp = OutlinedCardTokens.DisabledContainerElevation\n    ): CardElevation = CardElevation(\n        defaultElevation = defaultElevation"
                },
                {
                    "name": "pressedElevation = pressedElevation",
                    "type": null
                },
                {
                    "name": "focusedElevation = focusedElevation",
                    "type": null
                },
                {
                    "name": "hoveredElevation = hoveredElevation",
                    "type": null
                },
                {
                    "name": "draggedElevation = draggedElevation",
                    "type": null
                },
                {
                    "name": "disabledElevation = disabledElevation\n    )\n\n    /**\n     * Creates a [CardColors] that represents the default container and content colors used in a\n     * [Card].\n     */\n    @Composable\n    fun cardColors() = MaterialTheme.colorScheme.defaultCardColors\n\n    /**\n     * Creates a [CardColors] that represents the default container and content colors used in a\n     * [Card].\n     *\n     * @param containerColor the container color of this [Card] when enabled.\n     * @param contentColor the content color of this [Card] when enabled.\n     * @param disabledContainerColor the container color of this [Card] when not enabled.\n     * @param disabledContentColor the content color of this [Card] when not enabled.\n     */\n    @Composable\n    fun cardColors(\n        containerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "contentColor",
                    "type": "Color = contentColorFor(containerColor)"
                },
                {
                    "name": "disabledContainerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledContentColor",
                    "type": "Color = contentColor.copy(DisabledAlpha)"
                },
                {
                    "name": ")",
                    "type": "CardColors = MaterialTheme.colorScheme.defaultCardColors.copy(\n        containerColor = containerColor"
                },
                {
                    "name": "contentColor = contentColor",
                    "type": null
                },
                {
                    "name": "disabledContainerColor = disabledContainerColor",
                    "type": null
                },
                {
                    "name": "disabledContentColor = disabledContentColor\n    )\n\n    internal val ColorScheme.defaultCardColors",
                    "type": "CardColors\n        get()"
                }
            ]
        }
    ],
    "elevatedCardColors": [
        {
            "arguments": [
                {
                    "name": ") = MaterialTheme.colorScheme.defaultElevatedCardColors\n\n    /**\n     * Creates a [CardColors] that represents the default container and content colors used in an\n     * [ElevatedCard].\n     *\n     * @param containerColor the container color of this [ElevatedCard] when enabled.\n     * @param contentColor the content color of this [ElevatedCard] when enabled.\n     * @param disabledContainerColor the container color of this [ElevatedCard] when not enabled.\n     * @param disabledContentColor the content color of this [ElevatedCard] when not enabled.\n     */\n    @Composable\n    fun elevatedCardColors(\n        containerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "contentColor",
                    "type": "Color = contentColorFor(containerColor)"
                },
                {
                    "name": "disabledContainerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledContentColor",
                    "type": "Color = contentColor.copy(DisabledAlpha)"
                },
                {
                    "name": ")",
                    "type": "CardColors = MaterialTheme.colorScheme.defaultElevatedCardColors.copy(\n            containerColor = containerColor"
                },
                {
                    "name": "contentColor = contentColor",
                    "type": null
                },
                {
                    "name": "disabledContainerColor = disabledContainerColor",
                    "type": null
                },
                {
                    "name": "disabledContentColor = disabledContentColor\n        )\n\n    internal val ColorScheme.defaultElevatedCardColors",
                    "type": "CardColors\n        get()"
                }
            ]
        }
    ],
    "outlinedCardColors": [
        {
            "arguments": [
                {
                    "name": ") = MaterialTheme.colorScheme.defaultOutlinedCardColors\n\n    /**\n     * Creates a [CardColors] that represents the default container and content colors used in an\n     * [OutlinedCard].\n     *\n     * @param containerColor the container color of this [OutlinedCard] when enabled.\n     * @param contentColor the content color of this [OutlinedCard] when enabled.\n     * @param disabledContainerColor the container color of this [OutlinedCard] when not enabled.\n     * @param disabledContentColor the content color of this [OutlinedCard] when not enabled.\n     */\n    @Composable\n    fun outlinedCardColors(\n        containerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "contentColor",
                    "type": "Color = contentColorFor(containerColor)"
                },
                {
                    "name": "disabledContainerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledContentColor",
                    "type": "Color = contentColorFor(containerColor).copy(DisabledAlpha)"
                },
                {
                    "name": ")",
                    "type": "CardColors = MaterialTheme.colorScheme.defaultOutlinedCardColors.copy(\n        containerColor = containerColor"
                },
                {
                    "name": "contentColor = contentColor",
                    "type": null
                },
                {
                    "name": "disabledContainerColor = disabledContainerColor",
                    "type": null
                },
                {
                    "name": "disabledContentColor = disabledContentColor\n    )\n\n    internal val ColorScheme.defaultOutlinedCardColors",
                    "type": "CardColors\n        get()"
                }
            ]
        }
    ],
    "outlinedCardBorder": [
        {
            "arguments": [
                {
                    "name": "enabled",
                    "type": "Boolean = true): BorderStroke"
                }
            ]
        }
    ],
    "Button": [
        {
            "arguments": [
                {
                    "name": "onClick",
                    "type": "() -> Unit"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "enabled",
                    "type": "Boolean = true"
                },
                {
                    "name": "shape",
                    "type": "Shape = ButtonDefaults.shape"
                },
                {
                    "name": "colors",
                    "type": "ButtonColors = ButtonDefaults.buttonColors()"
                },
                {
                    "name": "elevation",
                    "type": "ButtonElevation? = ButtonDefaults.buttonElevation()"
                },
                {
                    "name": "border",
                    "type": "BorderStroke? = null"
                },
                {
                    "name": "contentPadding",
                    "type": "PaddingValues = ButtonDefaults.ContentPadding"
                },
                {
                    "name": "interactionSource",
                    "type": "MutableInteractionSource? = null"
                },
                {
                    "name": "content",
                    "type": "@Composable RowScope.() -> Unit\n)"
                }
            ]
        }
    ],
    "ElevatedButton": [
        {
            "arguments": [
                {
                    "name": "onClick",
                    "type": "() -> Unit"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "enabled",
                    "type": "Boolean = true"
                },
                {
                    "name": "shape",
                    "type": "Shape = ButtonDefaults.elevatedShape"
                },
                {
                    "name": "colors",
                    "type": "ButtonColors = ButtonDefaults.elevatedButtonColors()"
                },
                {
                    "name": "elevation",
                    "type": "ButtonElevation? = ButtonDefaults.elevatedButtonElevation()"
                },
                {
                    "name": "border",
                    "type": "BorderStroke? = null"
                },
                {
                    "name": "contentPadding",
                    "type": "PaddingValues = ButtonDefaults.ContentPadding"
                },
                {
                    "name": "interactionSource",
                    "type": "MutableInteractionSource? = null"
                },
                {
                    "name": "content",
                    "type": "@Composable RowScope.() -> Unit\n) =\n    Button(\n        onClick = onClick"
                },
                {
                    "name": "modifier = modifier",
                    "type": null
                },
                {
                    "name": "enabled = enabled",
                    "type": null
                },
                {
                    "name": "shape = shape",
                    "type": null
                },
                {
                    "name": "colors = colors",
                    "type": null
                },
                {
                    "name": "elevation = elevation",
                    "type": null
                },
                {
                    "name": "border = border",
                    "type": null
                },
                {
                    "name": "contentPadding = contentPadding",
                    "type": null
                },
                {
                    "name": "interactionSource = interactionSource",
                    "type": null
                },
                {
                    "name": "content = content\n    )\n\n/**\n * <a href=\"https",
                    "type": "//m3.material.io/components/buttons/overview\" class=\"external\" target=\"_blank\">Material Design filled tonal button</a>.\n *\n * Buttons help people initiate actions"
                },
                {
                    "name": "from sending an email",
                    "type": null
                },
                {
                    "name": "to sharing a document",
                    "type": null
                },
                {
                    "name": "to liking a\n * post.\n *\n * ![Filled tonal button image](https",
                    "type": "//developer.android.com/images/reference/androidx/compose/material3/filled-tonal-button.png)\n *\n * Filled tonal buttons are medium-emphasis buttons that is an alternative middle ground between\n * default [Button]s (filled) and [OutlinedButton]s. They can be used in contexts where\n * lower-priority button requires slightly more emphasis than an outline would give"
                },
                {
                    "name": "such as \"Next\"\n * in an onboarding flow. Tonal buttons use the secondary color mapping.\n *\n * @sample androidx.compose.material3.samples.FilledTonalButtonSample\n *\n * Choose the best button for an action based on the amount of emphasis it needs. The more important\n * an action is",
                    "type": null
                },
                {
                    "name": "the higher emphasis its button should be.\n *\n * - See [Button] for a high-emphasis button without a shadow",
                    "type": null
                },
                {
                    "name": "also known as a filled button.\n * - See [ElevatedButton] for a [FilledTonalButton] with a shadow.\n * - See [OutlinedButton] for a medium-emphasis button with a border.\n * - See [TextButton] for a low-emphasis button with no border.\n *\n * The default text style for internal [Text] components will be set to [Typography.labelLarge].\n *\n * @param onClick called when this button is clicked\n * @param modifier the [Modifier] to be applied to this button\n * @param enabled controls the enabled state of this button. When `false`",
                    "type": null
                },
                {
                    "name": "this component will not\n * respond to user input",
                    "type": null
                },
                {
                    "name": "and it will appear visually disabled and disabled to accessibility\n * services.\n * @param shape defines the shape of this button's container",
                    "type": null
                },
                {
                    "name": "border (when [border] is not null)",
                    "type": null
                },
                {
                    "name": "* and shadow (when using [elevation])\n * @param colors [ButtonColors] that will be used to resolve the colors for this button in different\n * states. See [ButtonDefaults.filledTonalButtonColors].\n * @param elevation [ButtonElevation] used to resolve the elevation for this button in different\n * states. This controls the size of the shadow below the button. Additionally",
                    "type": null
                },
                {
                    "name": "when the container\n * color is [ColorScheme.surface]",
                    "type": null
                },
                {
                    "name": "this controls the amount of primary color applied as an overlay.\n * @param border the border to draw around the container of this button\n * @param contentPadding the spacing values to apply internally between the container and the\n * content\n * @param interactionSource an optional hoisted [MutableInteractionSource] for observing and\n * emitting [Interaction]s for this button. You can use this to change the button's appearance\n * or preview the button in different states. Note that if `null` is provided",
                    "type": null
                },
                {
                    "name": "interactions will\n * still happen internally.\n */\n@Composable\nfun FilledTonalButton(\n    onClick",
                    "type": "() -> Unit"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "enabled",
                    "type": "Boolean = true"
                },
                {
                    "name": "shape",
                    "type": "Shape = ButtonDefaults.filledTonalShape"
                },
                {
                    "name": "colors",
                    "type": "ButtonColors = ButtonDefaults.filledTonalButtonColors()"
                },
                {
                    "name": "elevation",
                    "type": "ButtonElevation? = ButtonDefaults.filledTonalButtonElevation()"
                },
                {
                    "name": "border",
                    "type": "BorderStroke? = null"
                },
                {
                    "name": "contentPadding",
                    "type": "PaddingValues = ButtonDefaults.ContentPadding"
                },
                {
                    "name": "interactionSource",
                    "type": "MutableInteractionSource? = null"
                },
                {
                    "name": "content",
                    "type": "@Composable RowScope.() -> Unit\n) =\n    Button(\n        onClick = onClick"
                },
                {
                    "name": "modifier = modifier",
                    "type": null
                },
                {
                    "name": "enabled = enabled",
                    "type": null
                },
                {
                    "name": "shape = shape",
                    "type": null
                },
                {
                    "name": "colors = colors",
                    "type": null
                },
                {
                    "name": "elevation = elevation",
                    "type": null
                },
                {
                    "name": "border = border",
                    "type": null
                },
                {
                    "name": "contentPadding = contentPadding",
                    "type": null
                },
                {
                    "name": "interactionSource = interactionSource",
                    "type": null
                },
                {
                    "name": "content = content\n    )\n\n/**\n * <a href=\"https",
                    "type": "//m3.material.io/components/buttons/overview\" class=\"external\" target=\"_blank\">Material Design outlined button</a>.\n *\n * Buttons help people initiate actions"
                },
                {
                    "name": "from sending an email",
                    "type": null
                },
                {
                    "name": "to sharing a document",
                    "type": null
                },
                {
                    "name": "to liking a\n * post.\n *\n * ![Outlined button image](https",
                    "type": "//developer.android.com/images/reference/androidx/compose/material3/outlined-button.png)\n *\n * Outlined buttons are medium-emphasis buttons. They contain actions that are important"
                },
                {
                    "name": "but are\n * not the primary action in an app. Outlined buttons pair well with [Button]s to indicate an\n * alternative",
                    "type": null
                },
                {
                    "name": "secondary action.\n *\n * @sample androidx.compose.material3.samples.OutlinedButtonSample\n *\n * Choose the best button for an action based on the amount of emphasis it needs. The more important\n * an action is",
                    "type": null
                },
                {
                    "name": "the higher emphasis its button should be.\n *\n * - See [Button] for a high-emphasis button without a shadow",
                    "type": null
                },
                {
                    "name": "also known as a filled button.\n * - See [FilledTonalButton] for a middle ground between [OutlinedButton] and [Button].\n * - See [OutlinedButton] for a medium-emphasis button with a border.\n * - See [TextButton] for a low-emphasis button with no border.\n *\n * The default text style for internal [Text] components will be set to [Typography.labelLarge].\n *\n * @param onClick called when this button is clicked\n * @param modifier the [Modifier] to be applied to this button\n * @param enabled controls the enabled state of this button. When `false`",
                    "type": null
                },
                {
                    "name": "this component will not\n * respond to user input",
                    "type": null
                },
                {
                    "name": "and it will appear visually disabled and disabled to accessibility\n * services.\n * @param shape defines the shape of this button's container",
                    "type": null
                },
                {
                    "name": "border (when [border] is not null)",
                    "type": null
                },
                {
                    "name": "* and shadow (when using [elevation]).\n * @param colors [ButtonColors] that will be used to resolve the colors for this button in different\n * states. See [ButtonDefaults.outlinedButtonColors].\n * @param elevation [ButtonElevation] used to resolve the elevation for this button in different\n * states. This controls the size of the shadow below the button. Additionally",
                    "type": null
                },
                {
                    "name": "when the container\n * color is [ColorScheme.surface]",
                    "type": null
                },
                {
                    "name": "this controls the amount of primary color applied as an overlay.\n * @param border the border to draw around the container of this button. Pass `null` for no border.\n * @param contentPadding the spacing values to apply internally between the container and the\n * content\n * @param interactionSource an optional hoisted [MutableInteractionSource] for observing and\n * emitting [Interaction]s for this button. You can use this to change the button's appearance\n * or preview the button in different states. Note that if `null` is provided",
                    "type": null
                },
                {
                    "name": "interactions will\n * still happen internally.\n */\n@Composable\nfun OutlinedButton(\n    onClick",
                    "type": "() -> Unit"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "enabled",
                    "type": "Boolean = true"
                },
                {
                    "name": "shape",
                    "type": "Shape = ButtonDefaults.outlinedShape"
                },
                {
                    "name": "colors",
                    "type": "ButtonColors = ButtonDefaults.outlinedButtonColors()"
                },
                {
                    "name": "elevation",
                    "type": "ButtonElevation? = null"
                },
                {
                    "name": "border",
                    "type": "BorderStroke? = ButtonDefaults.outlinedButtonBorder"
                },
                {
                    "name": "contentPadding",
                    "type": "PaddingValues = ButtonDefaults.ContentPadding"
                },
                {
                    "name": "interactionSource",
                    "type": "MutableInteractionSource? = null"
                },
                {
                    "name": "content",
                    "type": "@Composable RowScope.() -> Unit\n) =\n    Button(\n        onClick = onClick"
                },
                {
                    "name": "modifier = modifier",
                    "type": null
                },
                {
                    "name": "enabled = enabled",
                    "type": null
                },
                {
                    "name": "shape = shape",
                    "type": null
                },
                {
                    "name": "colors = colors",
                    "type": null
                },
                {
                    "name": "elevation = elevation",
                    "type": null
                },
                {
                    "name": "border = border",
                    "type": null
                },
                {
                    "name": "contentPadding = contentPadding",
                    "type": null
                },
                {
                    "name": "interactionSource = interactionSource",
                    "type": null
                },
                {
                    "name": "content = content\n    )\n\n/**\n * <a href=\"https",
                    "type": "//m3.material.io/components/buttons/overview\" class=\"external\" target=\"_blank\">Material Design text button</a>.\n *\n * Buttons help people initiate actions"
                },
                {
                    "name": "from sending an email",
                    "type": null
                },
                {
                    "name": "to sharing a document",
                    "type": null
                },
                {
                    "name": "to liking a\n * post.\n *\n * ![Text button image](https",
                    "type": "//developer.android.com/images/reference/androidx/compose/material3/text-button.png)\n *\n * Text buttons are typically used for less-pronounced actions"
                },
                {
                    "name": "including those located in dialogs\n * and cards. In cards",
                    "type": null
                },
                {
                    "name": "text buttons help maintain an emphasis on card content. Text buttons are\n * used for the lowest priority actions",
                    "type": null
                },
                {
                    "name": "especially when presenting multiple options.\n *\n * @sample androidx.compose.material3.samples.TextButtonSample\n *\n * Choose the best button for an action based on the amount of emphasis it needs. The more important\n * an action is",
                    "type": null
                },
                {
                    "name": "the higher emphasis its button should be.\n *\n * - See [Button] for a high-emphasis button without a shadow",
                    "type": null
                },
                {
                    "name": "also known as a filled button.\n * - See [ElevatedButton] for a [FilledTonalButton] with a shadow.\n * - See [FilledTonalButton] for a middle ground between [OutlinedButton] and [Button].\n * - See [OutlinedButton] for a medium-emphasis button with a border.\n *\n * The default text style for internal [Text] components will be set to [Typography.labelLarge].\n *\n * @param onClick called when this button is clicked\n * @param modifier the [Modifier] to be applied to this button\n * @param enabled controls the enabled state of this button. When `false`",
                    "type": null
                },
                {
                    "name": "this component will not\n * respond to user input",
                    "type": null
                },
                {
                    "name": "and it will appear visually disabled and disabled to accessibility\n * services.\n * @param shape defines the shape of this button's container",
                    "type": null
                },
                {
                    "name": "border (when [border] is not null)",
                    "type": null
                },
                {
                    "name": "* and shadow (when using [elevation])\n * @param colors [ButtonColors] that will be used to resolve the colors for this button in different\n * states. See [ButtonDefaults.textButtonColors].\n * @param elevation [ButtonElevation] used to resolve the elevation for this button in different\n * states. This controls the size of the shadow below the button. Additionally",
                    "type": null
                },
                {
                    "name": "when the container\n * color is [ColorScheme.surface]",
                    "type": null
                },
                {
                    "name": "this controls the amount of primary color applied as an overlay.\n * A TextButton typically has no elevation",
                    "type": null
                },
                {
                    "name": "and the default value is `null`. See [ElevatedButton]\n * for a button with elevation.\n * @param border the border to draw around the container of this button\n * @param contentPadding the spacing values to apply internally between the container and the\n * content\n * @param interactionSource an optional hoisted [MutableInteractionSource] for observing and\n * emitting [Interaction]s for this button. You can use this to change the button's appearance\n * or preview the button in different states. Note that if `null` is provided",
                    "type": null
                },
                {
                    "name": "interactions will\n * still happen internally.\n */\n@Composable\nfun TextButton(\n    onClick",
                    "type": "() -> Unit"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "enabled",
                    "type": "Boolean = true"
                },
                {
                    "name": "shape",
                    "type": "Shape = ButtonDefaults.textShape"
                },
                {
                    "name": "colors",
                    "type": "ButtonColors = ButtonDefaults.textButtonColors()"
                },
                {
                    "name": "elevation",
                    "type": "ButtonElevation? = null"
                },
                {
                    "name": "border",
                    "type": "BorderStroke? = null"
                },
                {
                    "name": "contentPadding",
                    "type": "PaddingValues = ButtonDefaults.TextButtonContentPadding"
                },
                {
                    "name": "interactionSource",
                    "type": "MutableInteractionSource? = null"
                },
                {
                    "name": "content",
                    "type": "@Composable RowScope.() -> Unit\n) =\n    Button(\n        onClick = onClick"
                },
                {
                    "name": "modifier = modifier",
                    "type": null
                },
                {
                    "name": "enabled = enabled",
                    "type": null
                },
                {
                    "name": "shape = shape",
                    "type": null
                },
                {
                    "name": "colors = colors",
                    "type": null
                },
                {
                    "name": "elevation = elevation",
                    "type": null
                },
                {
                    "name": "border = border",
                    "type": null
                },
                {
                    "name": "contentPadding = contentPadding",
                    "type": null
                },
                {
                    "name": "interactionSource = interactionSource",
                    "type": null
                },
                {
                    "name": "content = content\n    )\n\n// TODO(b/201341237)",
                    "type": "Use token values for 0 elevation?\n// TODO(b/201341237): Use token values for null border?\n// TODO(b/201341237): Use token values for no color (transparent)?\n/**\n * Contains the default values used by all 5 button types.\n *\n * Default values that apply to all buttons types are [MinWidth]"
                },
                {
                    "name": "[MinHeight]",
                    "type": null
                },
                {
                    "name": "[IconSize]",
                    "type": null
                },
                {
                    "name": "and\n * [IconSpacing].\n *\n * A default value that applies only to [Button]",
                    "type": null
                },
                {
                    "name": "[ElevatedButton]",
                    "type": null
                },
                {
                    "name": "[FilledTonalButton]",
                    "type": null
                },
                {
                    "name": "and\n * [OutlinedButton] is [ContentPadding].\n *\n * Default values that apply only to [Button] are [buttonColors] and [buttonElevation].\n * Default values that apply only to [ElevatedButton] are [elevatedButtonColors] and [elevatedButtonElevation].\n * Default values that apply only to [FilledTonalButton] are [filledTonalButtonColors] and [filledTonalButtonElevation].\n * A default value that applies only to [OutlinedButton] is [outlinedButtonColors].\n * Default values that apply only to [TextButton] are [TextButtonContentPadding] and [textButtonColors].\n */\nobject ButtonDefaults",
                    "type": null
                }
            ]
        }
    ],
    "buttonColors": [
        {
            "arguments": [
                {
                    "name": ") = MaterialTheme.colorScheme.defaultButtonColors\n\n    /**\n     * Creates a [ButtonColors] that represents the default container and content colors used in a\n     * [Button].\n     *\n     * @param containerColor the container color of this [Button] when enabled.\n     * @param contentColor the content color of this [Button] when enabled.\n     * @param disabledContainerColor the container color of this [Button] when not enabled.\n     * @param disabledContentColor the content color of this [Button] when not enabled.\n     */\n    @Composable\n    fun buttonColors(\n        containerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "contentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledContainerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledContentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": ")",
                    "type": "ButtonColors = MaterialTheme.colorScheme.defaultButtonColors.copy(\n        containerColor = containerColor"
                },
                {
                    "name": "contentColor = contentColor",
                    "type": null
                },
                {
                    "name": "disabledContainerColor = disabledContainerColor",
                    "type": null
                },
                {
                    "name": "disabledContentColor = disabledContentColor\n    )\n\n    internal val ColorScheme.defaultButtonColors",
                    "type": "ButtonColors\n        get()"
                }
            ]
        }
    ],
    "elevatedButtonColors": [
        {
            "arguments": [
                {
                    "name": ") = MaterialTheme.colorScheme.defaultElevatedButtonColors\n\n/**\n     * Creates a [ButtonColors] that represents the default container and content colors used in an\n     * [ElevatedButton].\n     *\n     * @param containerColor the container color of this [ElevatedButton] when enabled\n     * @param contentColor the content color of this [ElevatedButton] when enabled\n     * @param disabledContainerColor the container color of this [ElevatedButton] when not enabled\n     * @param disabledContentColor the content color of this [ElevatedButton] when not enabled\n     */\n    @Composable\n    fun elevatedButtonColors(\n        containerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "contentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledContainerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledContentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": ")",
                    "type": "ButtonColors = MaterialTheme.colorScheme.defaultElevatedButtonColors.copy(\n        containerColor = containerColor"
                },
                {
                    "name": "contentColor = contentColor",
                    "type": null
                },
                {
                    "name": "disabledContainerColor = disabledContainerColor",
                    "type": null
                },
                {
                    "name": "disabledContentColor = disabledContentColor\n    )\n\n    internal val ColorScheme.defaultElevatedButtonColors",
                    "type": "ButtonColors\n        get()"
                }
            ]
        }
    ],
    "filledTonalButtonColors": [
        {
            "arguments": [
                {
                    "name": ") = MaterialTheme.colorScheme.defaultFilledTonalButtonColors\n\n    /**\n     * Creates a [ButtonColors] that represents the default container and content colors used in an\n     * [FilledTonalButton].\n     *\n     * @param containerColor the container color of this [FilledTonalButton] when enabled\n     * @param contentColor the content color of this [FilledTonalButton] when enabled\n     * @param disabledContainerColor the container color of this [FilledTonalButton] when not enabled\n     * @param disabledContentColor the content color of this [FilledTonalButton] when not enabled\n     */\n    @Composable\n    fun filledTonalButtonColors(\n        containerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "contentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledContainerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledContentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": ")",
                    "type": "ButtonColors = MaterialTheme.colorScheme.defaultFilledTonalButtonColors.copy(\n        containerColor = containerColor"
                },
                {
                    "name": "contentColor = contentColor",
                    "type": null
                },
                {
                    "name": "disabledContainerColor = disabledContainerColor",
                    "type": null
                },
                {
                    "name": "disabledContentColor = disabledContentColor\n    )\n\n    internal val ColorScheme.defaultFilledTonalButtonColors",
                    "type": "ButtonColors\n        get()"
                }
            ]
        }
    ],
    "outlinedButtonColors": [
        {
            "arguments": [
                {
                    "name": ") = MaterialTheme.colorScheme.defaultOutlinedButtonColors\n\n    /**\n     * Creates a [ButtonColors] that represents the default container and content colors used in an\n     * [OutlinedButton].\n     *\n     * @param containerColor the container color of this [OutlinedButton] when enabled\n     * @param contentColor the content color of this [OutlinedButton] when enabled\n     * @param disabledContainerColor the container color of this [OutlinedButton] when not enabled\n     * @param disabledContentColor the content color of this [OutlinedButton] when not enabled\n     */\n    @Composable\n    fun outlinedButtonColors(\n        containerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "contentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledContainerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledContentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": ")",
                    "type": "ButtonColors = MaterialTheme.colorScheme.defaultOutlinedButtonColors.copy(\n        containerColor = containerColor"
                },
                {
                    "name": "contentColor = contentColor",
                    "type": null
                },
                {
                    "name": "disabledContainerColor = disabledContainerColor",
                    "type": null
                },
                {
                    "name": "disabledContentColor = disabledContentColor\n    )\n\n    internal val ColorScheme.defaultOutlinedButtonColors",
                    "type": "ButtonColors\n        get()"
                }
            ]
        }
    ],
    "textButtonColors": [
        {
            "arguments": [
                {
                    "name": ") = MaterialTheme.colorScheme.defaultTextButtonColors\n\n/**\n     * Creates a [ButtonColors] that represents the default container and content colors used in a\n     * [TextButton].\n     *\n     * @param containerColor the container color of this [TextButton] when enabled\n     * @param contentColor the content color of this [TextButton] when enabled\n     * @param disabledContainerColor the container color of this [TextButton] when not enabled\n     * @param disabledContentColor the content color of this [TextButton] when not enabled\n     */\n    @Composable\n    fun textButtonColors(\n        containerColor",
                    "type": "Color = Color.Transparent"
                },
                {
                    "name": "contentColor",
                    "type": "Color = TextButtonTokens.LabelTextColor.value"
                },
                {
                    "name": "disabledContainerColor",
                    "type": "Color = Color.Transparent"
                },
                {
                    "name": "disabledContentColor",
                    "type": "Color = TextButtonTokens.DisabledLabelTextColor\n            .value\n            .copy(alpha = TextButtonTokens.DisabledLabelTextOpacity)"
                },
                {
                    "name": ")",
                    "type": "ButtonColors = MaterialTheme.colorScheme.defaultTextButtonColors.copy(\n        containerColor = containerColor"
                },
                {
                    "name": "contentColor = contentColor",
                    "type": null
                },
                {
                    "name": "disabledContainerColor = disabledContainerColor",
                    "type": null
                },
                {
                    "name": "disabledContentColor = disabledContentColor\n    )\n\n    internal val ColorScheme.defaultTextButtonColors",
                    "type": "ButtonColors\n        get()"
                }
            ]
        }
    ],
    "buttonElevation": [
        {
            "arguments": [
                {
                    "name": "defaultElevation",
                    "type": "Dp = FilledButtonTokens.ContainerElevation"
                },
                {
                    "name": "pressedElevation",
                    "type": "Dp = FilledButtonTokens.PressedContainerElevation"
                },
                {
                    "name": "focusedElevation",
                    "type": "Dp = FilledButtonTokens.FocusContainerElevation"
                },
                {
                    "name": "hoveredElevation",
                    "type": "Dp = FilledButtonTokens.HoverContainerElevation"
                },
                {
                    "name": "disabledElevation",
                    "type": "Dp = FilledButtonTokens.DisabledContainerElevation"
                },
                {
                    "name": ")",
                    "type": "ButtonElevation = ButtonElevation(\n        defaultElevation = defaultElevation"
                },
                {
                    "name": "pressedElevation = pressedElevation",
                    "type": null
                },
                {
                    "name": "focusedElevation = focusedElevation",
                    "type": null
                },
                {
                    "name": "hoveredElevation = hoveredElevation",
                    "type": null
                },
                {
                    "name": "disabledElevation = disabledElevation",
                    "type": null
                },
                {
                    "name": ")\n\n    /**\n     * Creates a [ButtonElevation] that will animate between the provided values according to the\n     * Material specification for a [ElevatedButton].\n     *\n     * @param defaultElevation the elevation used when the [ElevatedButton] is enabled",
                    "type": null
                },
                {
                    "name": "and has no\n     * other [Interaction]s.\n     * @param pressedElevation the elevation used when this [ElevatedButton] is enabled and pressed.\n     * @param focusedElevation the elevation used when the [ElevatedButton] is enabled and focused.\n     * @param hoveredElevation the elevation used when the [ElevatedButton] is enabled and hovered.\n     * @param disabledElevation the elevation used when the [ElevatedButton] is not enabled.\n     */\n    @Composable\n    fun elevatedButtonElevation(\n        defaultElevation",
                    "type": "Dp = ElevatedButtonTokens.ContainerElevation"
                },
                {
                    "name": "pressedElevation",
                    "type": "Dp = ElevatedButtonTokens.PressedContainerElevation"
                },
                {
                    "name": "focusedElevation",
                    "type": "Dp = ElevatedButtonTokens.FocusContainerElevation"
                },
                {
                    "name": "hoveredElevation",
                    "type": "Dp = ElevatedButtonTokens.HoverContainerElevation"
                },
                {
                    "name": "disabledElevation",
                    "type": "Dp = ElevatedButtonTokens.DisabledContainerElevation\n    ): ButtonElevation = ButtonElevation(\n        defaultElevation = defaultElevation"
                },
                {
                    "name": "pressedElevation = pressedElevation",
                    "type": null
                },
                {
                    "name": "focusedElevation = focusedElevation",
                    "type": null
                },
                {
                    "name": "hoveredElevation = hoveredElevation",
                    "type": null
                },
                {
                    "name": "disabledElevation = disabledElevation\n    )\n\n    /**\n     * Creates a [ButtonElevation] that will animate between the provided values according to the\n     * Material specification for a [FilledTonalButton].\n     *\n     * @param defaultElevation the elevation used when the [FilledTonalButton] is enabled",
                    "type": null
                },
                {
                    "name": "and has no\n     * other [Interaction]s.\n     * @param pressedElevation the elevation used when this [FilledTonalButton] is enabled and\n     * pressed.\n     * @param focusedElevation the elevation used when the [FilledTonalButton] is enabled and focused.\n     * @param hoveredElevation the elevation used when the [FilledTonalButton] is enabled and hovered.\n     * @param disabledElevation the elevation used when the [FilledTonalButton] is not enabled.\n     */\n    @Composable\n    fun filledTonalButtonElevation(\n        defaultElevation",
                    "type": "Dp = FilledTonalButtonTokens.ContainerElevation"
                },
                {
                    "name": "pressedElevation",
                    "type": "Dp = FilledTonalButtonTokens.PressedContainerElevation"
                },
                {
                    "name": "focusedElevation",
                    "type": "Dp = FilledTonalButtonTokens.FocusContainerElevation"
                },
                {
                    "name": "hoveredElevation",
                    "type": "Dp = FilledTonalButtonTokens.HoverContainerElevation"
                },
                {
                    "name": "disabledElevation",
                    "type": "Dp = 0.dp\n    ): ButtonElevation = ButtonElevation(\n        defaultElevation = defaultElevation"
                },
                {
                    "name": "pressedElevation = pressedElevation",
                    "type": null
                },
                {
                    "name": "focusedElevation = focusedElevation",
                    "type": null
                },
                {
                    "name": "hoveredElevation = hoveredElevation",
                    "type": null
                },
                {
                    "name": "disabledElevation = disabledElevation\n    )\n\n    /** The default [BorderStroke] used by [OutlinedButton]. */\n    val outlinedButtonBorder",
                    "type": "BorderStroke\n        @Composable\n        get() = BorderStroke(\n            width = OutlinedButtonTokens.OutlineWidth"
                },
                {
                    "name": "color = OutlinedButtonTokens.OutlineColor.value",
                    "type": null
                },
                {
                    "name": ")\n}\n\n/**\n * Represents the elevation for a button in different states.\n *\n * - See [ButtonDefaults.buttonElevation] for the default elevation used in a [Button].\n * - See [ButtonDefaults.elevatedButtonElevation] for the default elevation used in a\n * [ElevatedButton].\n */\n@Stable\nclass ButtonElevation internal constructor(\n    private val defaultElevation",
                    "type": "Dp"
                },
                {
                    "name": "private val pressedElevation",
                    "type": "Dp"
                },
                {
                    "name": "private val focusedElevation",
                    "type": "Dp"
                },
                {
                    "name": "private val hoveredElevation",
                    "type": "Dp"
                },
                {
                    "name": "private val disabledElevation",
                    "type": "Dp"
                },
                {
                    "name": ")",
                    "type": null
                }
            ]
        }
    ],
    "NavigationBar": [
        {
            "arguments": [
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "containerColor",
                    "type": "Color = NavigationBarDefaults.containerColor"
                },
                {
                    "name": "contentColor",
                    "type": "Color = MaterialTheme.colorScheme.contentColorFor(containerColor)"
                },
                {
                    "name": "tonalElevation",
                    "type": "Dp = NavigationBarDefaults.Elevation"
                },
                {
                    "name": "windowInsets",
                    "type": "WindowInsets = NavigationBarDefaults.windowInsets"
                },
                {
                    "name": "content",
                    "type": "@Composable RowScope.() -> Unit\n)"
                }
            ]
        }
    ],
    "MaterialTheme": [
        {
            "arguments": [
                {
                    "name": "colorScheme",
                    "type": "ColorScheme = MaterialTheme.colorScheme"
                },
                {
                    "name": "shapes",
                    "type": "Shapes = MaterialTheme.shapes"
                },
                {
                    "name": "typography",
                    "type": "Typography = MaterialTheme.typography"
                },
                {
                    "name": "content",
                    "type": "@Composable () -> Unit\n)"
                }
            ]
        }
    ],
    "Checkbox": [
        {
            "arguments": [
                {
                    "name": "checked",
                    "type": "Boolean"
                },
                {
                    "name": "onCheckedChange",
                    "type": "((Boolean) -> Unit)?"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "enabled",
                    "type": "Boolean = true"
                },
                {
                    "name": "colors",
                    "type": "CheckboxColors = CheckboxDefaults.colors()"
                },
                {
                    "name": "interactionSource",
                    "type": "MutableInteractionSource? = null\n)"
                }
            ]
        }
    ],
    "TriStateCheckbox": [
        {
            "arguments": [
                {
                    "name": "state",
                    "type": "ToggleableState"
                },
                {
                    "name": "onClick",
                    "type": "(() -> Unit)?"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "enabled",
                    "type": "Boolean = true"
                },
                {
                    "name": "colors",
                    "type": "CheckboxColors = CheckboxDefaults.colors()"
                },
                {
                    "name": "interactionSource",
                    "type": "MutableInteractionSource? = null\n)"
                }
            ]
        }
    ],
    "TextField": [
        {
            "arguments": [
                {
                    "name": "value",
                    "type": "TextFieldValue"
                },
                {
                    "name": "onValueChange",
                    "type": "(TextFieldValue) -> Unit"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "enabled",
                    "type": "Boolean = true"
                },
                {
                    "name": "readOnly",
                    "type": "Boolean = false"
                },
                {
                    "name": "textStyle",
                    "type": "TextStyle = LocalTextStyle.current"
                },
                {
                    "name": "label",
                    "type": "@Composable (() -> Unit)? = null"
                },
                {
                    "name": "placeholder",
                    "type": "@Composable (() -> Unit)? = null"
                },
                {
                    "name": "leadingIcon",
                    "type": "@Composable (() -> Unit)? = null"
                },
                {
                    "name": "trailingIcon",
                    "type": "@Composable (() -> Unit)? = null"
                },
                {
                    "name": "supportingText",
                    "type": "@Composable (() -> Unit)? = null"
                },
                {
                    "name": "isError",
                    "type": "Boolean = false"
                },
                {
                    "name": "visualTransformation",
                    "type": "VisualTransformation = VisualTransformation.None"
                },
                {
                    "name": "keyboardOptions",
                    "type": "KeyboardOptions = KeyboardOptions.Default"
                },
                {
                    "name": "keyboardActions",
                    "type": "KeyboardActions = KeyboardActions.Default"
                },
                {
                    "name": "singleLine",
                    "type": "Boolean = false"
                },
                {
                    "name": "maxLines",
                    "type": "Int = if (singleLine) 1 else Int.MAX_VALUE"
                },
                {
                    "name": "minLines",
                    "type": "Int = 1"
                },
                {
                    "name": "interactionSource",
                    "type": "MutableInteractionSource = remember"
                }
            ]
        }
    ],
    "ContainerBox": [
        {
            "arguments": [
                {
                    "name": "enabled",
                    "type": "Boolean"
                },
                {
                    "name": "isError",
                    "type": "Boolean"
                },
                {
                    "name": "interactionSource",
                    "type": "InteractionSource"
                },
                {
                    "name": "colors",
                    "type": "TextFieldColors"
                },
                {
                    "name": "shape",
                    "type": "Shape = OutlinedTextFieldTokens.ContainerShape.value"
                },
                {
                    "name": "focusedBorderThickness",
                    "type": "Dp = FocusedBorderThickness"
                },
                {
                    "name": "unfocusedBorderThickness",
                    "type": "Dp = UnfocusedBorderThickness\n    )"
                }
            ]
        }
    ],
    "FilledContainerBox": [
        {
            "arguments": [
                {
                    "name": "enabled",
                    "type": "Boolean"
                },
                {
                    "name": "isError",
                    "type": "Boolean"
                },
                {
                    "name": "interactionSource",
                    "type": "InteractionSource"
                },
                {
                    "name": "colors",
                    "type": "TextFieldColors"
                },
                {
                    "name": "shape",
                    "type": "Shape = TextFieldDefaults.shape"
                },
                {
                    "name": ") = ContainerBox(\n        enabled = enabled",
                    "type": null
                },
                {
                    "name": "isError = isError",
                    "type": null
                },
                {
                    "name": "interactionSource = interactionSource",
                    "type": null
                },
                {
                    "name": "colors = colors",
                    "type": null
                },
                {
                    "name": "shape = shape",
                    "type": null
                },
                {
                    "name": ")\n\n    @Deprecated(\n        message = \"Renamed to `OutlinedTextFieldDefaults.ContainerBox`\"",
                    "type": null
                },
                {
                    "name": "replaceWith = ReplaceWith(\"OutlinedTextFieldDefaults.ContainerBox(\\n\" +\n            \"        enabled = enabled",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        isError = isError",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        interactionSource = interactionSource",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        colors = colors",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        shape = shape",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        focusedBorderThickness = focusedBorderThickness",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        unfocusedBorderThickness = unfocusedBorderThickness",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"    )\"",
                    "type": null
                },
                {
                    "name": "\"androidx.compose.material.OutlinedTextFieldDefaults\")",
                    "type": null
                },
                {
                    "name": "level = DeprecationLevel.WARNING\n    )\n    @ExperimentalMaterial3Api\n    @Composable\n    fun OutlinedBorderContainerBox(\n        enabled",
                    "type": "Boolean"
                },
                {
                    "name": "isError",
                    "type": "Boolean"
                },
                {
                    "name": "interactionSource",
                    "type": "InteractionSource"
                },
                {
                    "name": "colors",
                    "type": "TextFieldColors"
                },
                {
                    "name": "shape",
                    "type": "Shape = OutlinedTextFieldTokens.ContainerShape.value"
                },
                {
                    "name": "focusedBorderThickness",
                    "type": "Dp = OutlinedTextFieldDefaults.FocusedBorderThickness"
                },
                {
                    "name": "unfocusedBorderThickness",
                    "type": "Dp = OutlinedTextFieldDefaults.UnfocusedBorderThickness\n    ) = OutlinedTextFieldDefaults.ContainerBox(\n        enabled = enabled"
                },
                {
                    "name": "isError = isError",
                    "type": null
                },
                {
                    "name": "interactionSource = interactionSource",
                    "type": null
                },
                {
                    "name": "colors = colors",
                    "type": null
                },
                {
                    "name": "shape = shape",
                    "type": null
                },
                {
                    "name": "focusedBorderThickness = focusedBorderThickness",
                    "type": null
                },
                {
                    "name": "unfocusedBorderThickness = unfocusedBorderThickness",
                    "type": null
                },
                {
                    "name": ")\n\n    @Deprecated(\n        message = \"Renamed to `TextFieldDefaults.contentPaddingWithLabel`\"",
                    "type": null
                },
                {
                    "name": "replaceWith = ReplaceWith(\"TextFieldDefaults.contentPaddingWithLabel(\\n\" +\n            \"        start = start",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        top = top",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        end = end",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        bottom = bottom",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"    )\")",
                    "type": null
                },
                {
                    "name": "level = DeprecationLevel.WARNING\n    )\n    fun textFieldWithLabelPadding(\n        start",
                    "type": "Dp = TextFieldPadding"
                },
                {
                    "name": "end",
                    "type": "Dp = TextFieldPadding"
                },
                {
                    "name": "top",
                    "type": "Dp = TextFieldWithLabelVerticalPadding"
                },
                {
                    "name": "bottom",
                    "type": "Dp = TextFieldWithLabelVerticalPadding\n    ): PaddingValues = contentPaddingWithLabel(\n        start = start"
                },
                {
                    "name": "top = top",
                    "type": null
                },
                {
                    "name": "end = end",
                    "type": null
                },
                {
                    "name": "bottom = bottom",
                    "type": null
                },
                {
                    "name": ")\n\n    @Deprecated(\n        message = \"Renamed to `TextFieldDefaults.contentPaddingWithoutLabel`\"",
                    "type": null
                },
                {
                    "name": "replaceWith = ReplaceWith(\"TextFieldDefaults.contentPaddingWithoutLabel(\\n\" +\n            \"        start = start",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        top = top",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        end = end",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        bottom = bottom",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"    )\")",
                    "type": null
                },
                {
                    "name": "level = DeprecationLevel.WARNING\n    )\n    fun textFieldWithoutLabelPadding(\n        start",
                    "type": "Dp = TextFieldPadding"
                },
                {
                    "name": "top",
                    "type": "Dp = TextFieldPadding"
                },
                {
                    "name": "end",
                    "type": "Dp = TextFieldPadding"
                },
                {
                    "name": "bottom",
                    "type": "Dp = TextFieldPadding\n    ): PaddingValues = contentPaddingWithoutLabel(\n        start = start"
                },
                {
                    "name": "top = top",
                    "type": null
                },
                {
                    "name": "end = end",
                    "type": null
                },
                {
                    "name": "bottom = bottom",
                    "type": null
                },
                {
                    "name": ")\n\n    @Deprecated(\n        message = \"Renamed to `OutlinedTextFieldDefaults.contentPadding`\"",
                    "type": null
                },
                {
                    "name": "replaceWith = ReplaceWith(\"OutlinedTextFieldDefaults.contentPadding(\\n\" +\n            \"        start = start",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        top = top",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        end = end",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        bottom = bottom",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"    )\"",
                    "type": null
                },
                {
                    "name": "\"androidx.compose.material.OutlinedTextFieldDefaults\")",
                    "type": null
                },
                {
                    "name": "level = DeprecationLevel.WARNING\n    )\n    fun outlinedTextFieldPadding(\n        start",
                    "type": "Dp = TextFieldPadding"
                },
                {
                    "name": "top",
                    "type": "Dp = TextFieldPadding"
                },
                {
                    "name": "end",
                    "type": "Dp = TextFieldPadding"
                },
                {
                    "name": "bottom",
                    "type": "Dp = TextFieldPadding\n    ): PaddingValues = OutlinedTextFieldDefaults.contentPadding(\n        start = start"
                },
                {
                    "name": "top = top",
                    "type": null
                },
                {
                    "name": "end = end",
                    "type": null
                },
                {
                    "name": "bottom = bottom",
                    "type": null
                },
                {
                    "name": ")\n\n    @Deprecated(\n        message = \"Renamed to `TextFieldDefaults.colors` with additional parameters to control\" +\n            \"container color based on state.\"",
                    "type": null
                },
                {
                    "name": "replaceWith = ReplaceWith(\"TextFieldDefaults.colors(\\n\" +\n            \"        focusedTextColor = focusedTextColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        unfocusedTextColor = unfocusedTextColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        disabledTextColor = disabledTextColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        errorTextColor = errorTextColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        focusedContainerColor = containerColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        unfocusedContainerColor = containerColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        disabledContainerColor = containerColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        errorContainerColor = errorContainerColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        cursorColor = cursorColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        errorCursorColor = errorCursorColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        selectionColors = selectionColors",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        focusedIndicatorColor = focusedIndicatorColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        unfocusedIndicatorColor = unfocusedIndicatorColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        disabledIndicatorColor = disabledIndicatorColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        errorIndicatorColor = errorIndicatorColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        focusedLeadingIconColor = focusedLeadingIconColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        unfocusedLeadingIconColor = unfocusedLeadingIconColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        disabledLeadingIconColor = disabledLeadingIconColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        errorLeadingIconColor = errorLeadingIconColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        focusedTrailingIconColor = focusedTrailingIconColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        unfocusedTrailingIconColor = unfocusedTrailingIconColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        disabledTrailingIconColor = disabledTrailingIconColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        errorTrailingIconColor = errorTrailingIconColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        focusedLabelColor = focusedLabelColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        unfocusedLabelColor = unfocusedLabelColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        disabledLabelColor = disabledLabelColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        errorLabelColor = errorLabelColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        focusedPlaceholderColor = focusedPlaceholderColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        unfocusedPlaceholderColor = unfocusedPlaceholderColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        disabledPlaceholderColor = disabledPlaceholderColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        errorPlaceholderColor = errorPlaceholderColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        focusedSupportingTextColor = focusedSupportingTextColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        unfocusedSupportingTextColor = unfocusedSupportingTextColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        disabledSupportingTextColor = disabledSupportingTextColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        errorSupportingTextColor = errorSupportingTextColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        focusedPrefixColor = focusedPrefixColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        unfocusedPrefixColor = unfocusedPrefixColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        disabledPrefixColor = disabledPrefixColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        errorPrefixColor = errorPrefixColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        focusedSuffixColor = focusedSuffixColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        unfocusedSuffixColor = unfocusedSuffixColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        disabledSuffixColor = disabledSuffixColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        errorSuffixColor = errorSuffixColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"    )\")",
                    "type": null
                },
                {
                    "name": "level = DeprecationLevel.WARNING",
                    "type": null
                },
                {
                    "name": ")\n    @ExperimentalMaterial3Api\n    @Composable\n    fun textFieldColors(\n        focusedTextColor",
                    "type": "Color = FilledTextFieldTokens.FocusInputColor.value"
                },
                {
                    "name": "unfocusedTextColor",
                    "type": "Color = FilledTextFieldTokens.InputColor.value"
                },
                {
                    "name": "disabledTextColor",
                    "type": "Color = FilledTextFieldTokens.DisabledInputColor.value\n            .copy(alpha = FilledTextFieldTokens.DisabledInputOpacity)"
                },
                {
                    "name": "errorTextColor",
                    "type": "Color = FilledTextFieldTokens.ErrorInputColor.value"
                },
                {
                    "name": "containerColor",
                    "type": "Color = FilledTextFieldTokens.ContainerColor.value"
                },
                {
                    "name": "errorContainerColor",
                    "type": "Color = FilledTextFieldTokens.ContainerColor.value"
                },
                {
                    "name": "cursorColor",
                    "type": "Color = FilledTextFieldTokens.CaretColor.value"
                },
                {
                    "name": "errorCursorColor",
                    "type": "Color = FilledTextFieldTokens.ErrorFocusCaretColor.value"
                },
                {
                    "name": "selectionColors",
                    "type": "TextSelectionColors = LocalTextSelectionColors.current"
                },
                {
                    "name": "focusedIndicatorColor",
                    "type": "Color = FilledTextFieldTokens.FocusActiveIndicatorColor.value"
                },
                {
                    "name": "unfocusedIndicatorColor",
                    "type": "Color = FilledTextFieldTokens.ActiveIndicatorColor.value"
                },
                {
                    "name": "disabledIndicatorColor",
                    "type": "Color = FilledTextFieldTokens.DisabledActiveIndicatorColor.value\n            .copy(alpha = FilledTextFieldTokens.DisabledActiveIndicatorOpacity)"
                },
                {
                    "name": "errorIndicatorColor",
                    "type": "Color = FilledTextFieldTokens.ErrorActiveIndicatorColor.value"
                },
                {
                    "name": "focusedLeadingIconColor",
                    "type": "Color = FilledTextFieldTokens.FocusLeadingIconColor.value"
                },
                {
                    "name": "unfocusedLeadingIconColor",
                    "type": "Color = FilledTextFieldTokens.LeadingIconColor.value"
                },
                {
                    "name": "disabledLeadingIconColor",
                    "type": "Color = FilledTextFieldTokens.DisabledLeadingIconColor.value\n            .copy(alpha = FilledTextFieldTokens.DisabledLeadingIconOpacity)"
                },
                {
                    "name": "errorLeadingIconColor",
                    "type": "Color = FilledTextFieldTokens.ErrorLeadingIconColor.value"
                },
                {
                    "name": "focusedTrailingIconColor",
                    "type": "Color = FilledTextFieldTokens.FocusTrailingIconColor.value"
                },
                {
                    "name": "unfocusedTrailingIconColor",
                    "type": "Color = FilledTextFieldTokens.TrailingIconColor.value"
                },
                {
                    "name": "disabledTrailingIconColor",
                    "type": "Color = FilledTextFieldTokens.DisabledTrailingIconColor.value\n            .copy(alpha = FilledTextFieldTokens.DisabledTrailingIconOpacity)"
                },
                {
                    "name": "errorTrailingIconColor",
                    "type": "Color = FilledTextFieldTokens.ErrorTrailingIconColor.value"
                },
                {
                    "name": "focusedLabelColor",
                    "type": "Color = FilledTextFieldTokens.FocusLabelColor.value"
                },
                {
                    "name": "unfocusedLabelColor",
                    "type": "Color = FilledTextFieldTokens.LabelColor.value"
                },
                {
                    "name": "disabledLabelColor",
                    "type": "Color = FilledTextFieldTokens.DisabledLabelColor.value\n            .copy(alpha = FilledTextFieldTokens.DisabledLabelOpacity)"
                },
                {
                    "name": "errorLabelColor",
                    "type": "Color = FilledTextFieldTokens.ErrorLabelColor.value"
                },
                {
                    "name": "focusedPlaceholderColor",
                    "type": "Color = FilledTextFieldTokens.InputPlaceholderColor.value"
                },
                {
                    "name": "unfocusedPlaceholderColor",
                    "type": "Color = FilledTextFieldTokens.InputPlaceholderColor.value"
                },
                {
                    "name": "disabledPlaceholderColor",
                    "type": "Color = FilledTextFieldTokens.DisabledInputColor.value\n            .copy(alpha = FilledTextFieldTokens.DisabledInputOpacity)"
                },
                {
                    "name": "errorPlaceholderColor",
                    "type": "Color = FilledTextFieldTokens.InputPlaceholderColor.value"
                },
                {
                    "name": "focusedSupportingTextColor",
                    "type": "Color = FilledTextFieldTokens.FocusSupportingColor.value"
                },
                {
                    "name": "unfocusedSupportingTextColor",
                    "type": "Color = FilledTextFieldTokens.SupportingColor.value"
                },
                {
                    "name": "disabledSupportingTextColor",
                    "type": "Color = FilledTextFieldTokens.DisabledSupportingColor.value\n            .copy(alpha = FilledTextFieldTokens.DisabledSupportingOpacity)"
                },
                {
                    "name": "errorSupportingTextColor",
                    "type": "Color = FilledTextFieldTokens.ErrorSupportingColor.value"
                },
                {
                    "name": "focusedPrefixColor",
                    "type": "Color = FilledTextFieldTokens.InputPrefixColor.value"
                },
                {
                    "name": "unfocusedPrefixColor",
                    "type": "Color = FilledTextFieldTokens.InputPrefixColor.value"
                },
                {
                    "name": "disabledPrefixColor",
                    "type": "Color = FilledTextFieldTokens.InputPrefixColor.value\n            .copy(alpha = FilledTextFieldTokens.DisabledInputOpacity)"
                },
                {
                    "name": "errorPrefixColor",
                    "type": "Color = FilledTextFieldTokens.InputPrefixColor.value"
                },
                {
                    "name": "focusedSuffixColor",
                    "type": "Color = FilledTextFieldTokens.InputSuffixColor.value"
                },
                {
                    "name": "unfocusedSuffixColor",
                    "type": "Color = FilledTextFieldTokens.InputSuffixColor.value"
                },
                {
                    "name": "disabledSuffixColor",
                    "type": "Color = FilledTextFieldTokens.InputSuffixColor.value\n            .copy(alpha = FilledTextFieldTokens.DisabledInputOpacity)"
                },
                {
                    "name": "errorSuffixColor",
                    "type": "Color = FilledTextFieldTokens.InputSuffixColor.value"
                },
                {
                    "name": ")",
                    "type": "TextFieldColors = colors(\n        focusedTextColor = focusedTextColor"
                },
                {
                    "name": "unfocusedTextColor = unfocusedTextColor",
                    "type": null
                },
                {
                    "name": "disabledTextColor = disabledTextColor",
                    "type": null
                },
                {
                    "name": "errorTextColor = errorTextColor",
                    "type": null
                },
                {
                    "name": "focusedContainerColor = containerColor",
                    "type": null
                },
                {
                    "name": "unfocusedContainerColor = containerColor",
                    "type": null
                },
                {
                    "name": "disabledContainerColor = containerColor",
                    "type": null
                },
                {
                    "name": "errorContainerColor = errorContainerColor",
                    "type": null
                },
                {
                    "name": "cursorColor = cursorColor",
                    "type": null
                },
                {
                    "name": "errorCursorColor = errorCursorColor",
                    "type": null
                },
                {
                    "name": "selectionColors = selectionColors",
                    "type": null
                },
                {
                    "name": "focusedIndicatorColor = focusedIndicatorColor",
                    "type": null
                },
                {
                    "name": "unfocusedIndicatorColor = unfocusedIndicatorColor",
                    "type": null
                },
                {
                    "name": "disabledIndicatorColor = disabledIndicatorColor",
                    "type": null
                },
                {
                    "name": "errorIndicatorColor = errorIndicatorColor",
                    "type": null
                },
                {
                    "name": "focusedLeadingIconColor = focusedLeadingIconColor",
                    "type": null
                },
                {
                    "name": "unfocusedLeadingIconColor = unfocusedLeadingIconColor",
                    "type": null
                },
                {
                    "name": "disabledLeadingIconColor = disabledLeadingIconColor",
                    "type": null
                },
                {
                    "name": "errorLeadingIconColor = errorLeadingIconColor",
                    "type": null
                },
                {
                    "name": "focusedTrailingIconColor = focusedTrailingIconColor",
                    "type": null
                },
                {
                    "name": "unfocusedTrailingIconColor = unfocusedTrailingIconColor",
                    "type": null
                },
                {
                    "name": "disabledTrailingIconColor = disabledTrailingIconColor",
                    "type": null
                },
                {
                    "name": "errorTrailingIconColor = errorTrailingIconColor",
                    "type": null
                },
                {
                    "name": "focusedLabelColor = focusedLabelColor",
                    "type": null
                },
                {
                    "name": "unfocusedLabelColor = unfocusedLabelColor",
                    "type": null
                },
                {
                    "name": "disabledLabelColor = disabledLabelColor",
                    "type": null
                },
                {
                    "name": "errorLabelColor = errorLabelColor",
                    "type": null
                },
                {
                    "name": "focusedPlaceholderColor = focusedPlaceholderColor",
                    "type": null
                },
                {
                    "name": "unfocusedPlaceholderColor = unfocusedPlaceholderColor",
                    "type": null
                },
                {
                    "name": "disabledPlaceholderColor = disabledPlaceholderColor",
                    "type": null
                },
                {
                    "name": "errorPlaceholderColor = errorPlaceholderColor",
                    "type": null
                },
                {
                    "name": "focusedSupportingTextColor = focusedSupportingTextColor",
                    "type": null
                },
                {
                    "name": "unfocusedSupportingTextColor = unfocusedSupportingTextColor",
                    "type": null
                },
                {
                    "name": "disabledSupportingTextColor = disabledSupportingTextColor",
                    "type": null
                },
                {
                    "name": "errorSupportingTextColor = errorSupportingTextColor",
                    "type": null
                },
                {
                    "name": "focusedPrefixColor = focusedPrefixColor",
                    "type": null
                },
                {
                    "name": "unfocusedPrefixColor = unfocusedPrefixColor",
                    "type": null
                },
                {
                    "name": "disabledPrefixColor = disabledPrefixColor",
                    "type": null
                },
                {
                    "name": "errorPrefixColor = errorPrefixColor",
                    "type": null
                },
                {
                    "name": "focusedSuffixColor = focusedSuffixColor",
                    "type": null
                },
                {
                    "name": "unfocusedSuffixColor = unfocusedSuffixColor",
                    "type": null
                },
                {
                    "name": "disabledSuffixColor = disabledSuffixColor",
                    "type": null
                },
                {
                    "name": "errorSuffixColor = errorSuffixColor",
                    "type": null
                },
                {
                    "name": ")\n\n    @Deprecated(\n        message = \"Renamed to `OutlinedTextFieldDefaults.colors` with additional parameters to\" +\n            \"control container color based on state.\"",
                    "type": null
                },
                {
                    "name": "replaceWith = ReplaceWith(\"OutlinedTextFieldDefaults.colors(\\n\" +\n            \"        focusedTextColor = focusedTextColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        unfocusedTextColor = unfocusedTextColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        disabledTextColor = disabledTextColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        errorTextColor = errorTextColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        focusedContainerColor = containerColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        unfocusedContainerColor = containerColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        disabledContainerColor = containerColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        errorContainerColor = errorContainerColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        cursorColor = cursorColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        errorCursorColor = errorCursorColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        selectionColors = selectionColors",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        focusedBorderColor = focusedBorderColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        unfocusedBorderColor = unfocusedBorderColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        disabledBorderColor = disabledBorderColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        errorBorderColor = errorBorderColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        focusedLeadingIconColor = focusedLeadingIconColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        unfocusedLeadingIconColor = unfocusedLeadingIconColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        disabledLeadingIconColor = disabledLeadingIconColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        errorLeadingIconColor = errorLeadingIconColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        focusedTrailingIconColor = focusedTrailingIconColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        unfocusedTrailingIconColor = unfocusedTrailingIconColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        disabledTrailingIconColor = disabledTrailingIconColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        errorTrailingIconColor = errorTrailingIconColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        focusedLabelColor = focusedLabelColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        unfocusedLabelColor = unfocusedLabelColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        disabledLabelColor = disabledLabelColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        errorLabelColor = errorLabelColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        focusedPlaceholderColor = focusedPlaceholderColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        unfocusedPlaceholderColor = unfocusedPlaceholderColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        disabledPlaceholderColor = disabledPlaceholderColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        errorPlaceholderColor = errorPlaceholderColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        focusedSupportingTextColor = focusedSupportingTextColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        unfocusedSupportingTextColor = unfocusedSupportingTextColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        disabledSupportingTextColor = disabledSupportingTextColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        errorSupportingTextColor = errorSupportingTextColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        focusedPrefixColor = focusedPrefixColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        unfocusedPrefixColor = unfocusedPrefixColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        disabledPrefixColor = disabledPrefixColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        errorPrefixColor = errorPrefixColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        focusedSuffixColor = focusedSuffixColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        unfocusedSuffixColor = unfocusedSuffixColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        disabledSuffixColor = disabledSuffixColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        errorSuffixColor = errorSuffixColor",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"    )\"",
                    "type": null
                },
                {
                    "name": "\"androidx.compose.material.OutlinedTextFieldDefaults\")",
                    "type": null
                },
                {
                    "name": "level = DeprecationLevel.WARNING",
                    "type": null
                },
                {
                    "name": ")\n    @ExperimentalMaterial3Api\n    @Composable\n    fun outlinedTextFieldColors(\n        focusedTextColor",
                    "type": "Color = OutlinedTextFieldTokens.FocusInputColor.value"
                },
                {
                    "name": "unfocusedTextColor",
                    "type": "Color = OutlinedTextFieldTokens.InputColor.value"
                },
                {
                    "name": "disabledTextColor",
                    "type": "Color = OutlinedTextFieldTokens.DisabledInputColor.value\n            .copy(alpha = OutlinedTextFieldTokens.DisabledInputOpacity)"
                },
                {
                    "name": "errorTextColor",
                    "type": "Color = OutlinedTextFieldTokens.ErrorInputColor.value"
                },
                {
                    "name": "containerColor",
                    "type": "Color = Color.Transparent"
                },
                {
                    "name": "errorContainerColor",
                    "type": "Color = Color.Transparent"
                },
                {
                    "name": "cursorColor",
                    "type": "Color = OutlinedTextFieldTokens.CaretColor.value"
                },
                {
                    "name": "errorCursorColor",
                    "type": "Color = OutlinedTextFieldTokens.ErrorFocusCaretColor.value"
                },
                {
                    "name": "selectionColors",
                    "type": "TextSelectionColors = LocalTextSelectionColors.current"
                },
                {
                    "name": "focusedBorderColor",
                    "type": "Color = OutlinedTextFieldTokens.FocusOutlineColor.value"
                },
                {
                    "name": "unfocusedBorderColor",
                    "type": "Color = OutlinedTextFieldTokens.OutlineColor.value"
                },
                {
                    "name": "disabledBorderColor",
                    "type": "Color = OutlinedTextFieldTokens.DisabledOutlineColor.value\n            .copy(alpha = OutlinedTextFieldTokens.DisabledOutlineOpacity)"
                },
                {
                    "name": "errorBorderColor",
                    "type": "Color = OutlinedTextFieldTokens.ErrorOutlineColor.value"
                },
                {
                    "name": "focusedLeadingIconColor",
                    "type": "Color = OutlinedTextFieldTokens.FocusLeadingIconColor.value"
                },
                {
                    "name": "unfocusedLeadingIconColor",
                    "type": "Color = OutlinedTextFieldTokens.LeadingIconColor.value"
                },
                {
                    "name": "disabledLeadingIconColor",
                    "type": "Color = OutlinedTextFieldTokens.DisabledLeadingIconColor.value\n            .copy(alpha = OutlinedTextFieldTokens.DisabledLeadingIconOpacity)"
                },
                {
                    "name": "errorLeadingIconColor",
                    "type": "Color = OutlinedTextFieldTokens.ErrorLeadingIconColor.value"
                },
                {
                    "name": "focusedTrailingIconColor",
                    "type": "Color = OutlinedTextFieldTokens.FocusTrailingIconColor.value"
                },
                {
                    "name": "unfocusedTrailingIconColor",
                    "type": "Color = OutlinedTextFieldTokens.TrailingIconColor.value"
                },
                {
                    "name": "disabledTrailingIconColor",
                    "type": "Color = OutlinedTextFieldTokens.DisabledTrailingIconColor\n            .value.copy(alpha = OutlinedTextFieldTokens.DisabledTrailingIconOpacity)"
                },
                {
                    "name": "errorTrailingIconColor",
                    "type": "Color = OutlinedTextFieldTokens.ErrorTrailingIconColor.value"
                },
                {
                    "name": "focusedLabelColor",
                    "type": "Color = OutlinedTextFieldTokens.FocusLabelColor.value"
                },
                {
                    "name": "unfocusedLabelColor",
                    "type": "Color = OutlinedTextFieldTokens.LabelColor.value"
                },
                {
                    "name": "disabledLabelColor",
                    "type": "Color = OutlinedTextFieldTokens.DisabledLabelColor.value\n            .copy(alpha = OutlinedTextFieldTokens.DisabledLabelOpacity)"
                },
                {
                    "name": "errorLabelColor",
                    "type": "Color = OutlinedTextFieldTokens.ErrorLabelColor.value"
                },
                {
                    "name": "focusedPlaceholderColor",
                    "type": "Color = OutlinedTextFieldTokens.InputPlaceholderColor.value"
                },
                {
                    "name": "unfocusedPlaceholderColor",
                    "type": "Color = OutlinedTextFieldTokens.InputPlaceholderColor.value"
                },
                {
                    "name": "disabledPlaceholderColor",
                    "type": "Color = OutlinedTextFieldTokens.DisabledInputColor.value\n            .copy(alpha = OutlinedTextFieldTokens.DisabledInputOpacity)"
                },
                {
                    "name": "errorPlaceholderColor",
                    "type": "Color = OutlinedTextFieldTokens.InputPlaceholderColor.value"
                },
                {
                    "name": "focusedSupportingTextColor",
                    "type": "Color = OutlinedTextFieldTokens.FocusSupportingColor.value"
                },
                {
                    "name": "unfocusedSupportingTextColor",
                    "type": "Color = OutlinedTextFieldTokens.SupportingColor.value"
                },
                {
                    "name": "disabledSupportingTextColor",
                    "type": "Color = OutlinedTextFieldTokens.DisabledSupportingColor\n            .value.copy(alpha = OutlinedTextFieldTokens.DisabledSupportingOpacity)"
                },
                {
                    "name": "errorSupportingTextColor",
                    "type": "Color = OutlinedTextFieldTokens.ErrorSupportingColor.value"
                },
                {
                    "name": "focusedPrefixColor",
                    "type": "Color = OutlinedTextFieldTokens.InputPrefixColor.value"
                },
                {
                    "name": "unfocusedPrefixColor",
                    "type": "Color = OutlinedTextFieldTokens.InputPrefixColor.value"
                },
                {
                    "name": "disabledPrefixColor",
                    "type": "Color = OutlinedTextFieldTokens.InputPrefixColor.value\n            .copy(alpha = OutlinedTextFieldTokens.DisabledInputOpacity)"
                },
                {
                    "name": "errorPrefixColor",
                    "type": "Color = OutlinedTextFieldTokens.InputPrefixColor.value"
                },
                {
                    "name": "focusedSuffixColor",
                    "type": "Color = OutlinedTextFieldTokens.InputSuffixColor.value"
                },
                {
                    "name": "unfocusedSuffixColor",
                    "type": "Color = OutlinedTextFieldTokens.InputSuffixColor.value"
                },
                {
                    "name": "disabledSuffixColor",
                    "type": "Color = OutlinedTextFieldTokens.InputSuffixColor.value\n            .copy(alpha = OutlinedTextFieldTokens.DisabledInputOpacity)"
                },
                {
                    "name": "errorSuffixColor",
                    "type": "Color = OutlinedTextFieldTokens.InputSuffixColor.value"
                },
                {
                    "name": ")",
                    "type": "TextFieldColors = OutlinedTextFieldDefaults.colors(\n        focusedTextColor = focusedTextColor"
                },
                {
                    "name": "unfocusedTextColor = unfocusedTextColor",
                    "type": null
                },
                {
                    "name": "disabledTextColor = disabledTextColor",
                    "type": null
                },
                {
                    "name": "errorTextColor = errorTextColor",
                    "type": null
                },
                {
                    "name": "focusedContainerColor = containerColor",
                    "type": null
                },
                {
                    "name": "unfocusedContainerColor = containerColor",
                    "type": null
                },
                {
                    "name": "disabledContainerColor = containerColor",
                    "type": null
                },
                {
                    "name": "errorContainerColor = errorContainerColor",
                    "type": null
                },
                {
                    "name": "cursorColor = cursorColor",
                    "type": null
                },
                {
                    "name": "errorCursorColor = errorCursorColor",
                    "type": null
                },
                {
                    "name": "selectionColors = selectionColors",
                    "type": null
                },
                {
                    "name": "focusedBorderColor = focusedBorderColor",
                    "type": null
                },
                {
                    "name": "unfocusedBorderColor = unfocusedBorderColor",
                    "type": null
                },
                {
                    "name": "disabledBorderColor = disabledBorderColor",
                    "type": null
                },
                {
                    "name": "errorBorderColor = errorBorderColor",
                    "type": null
                },
                {
                    "name": "focusedLeadingIconColor = focusedLeadingIconColor",
                    "type": null
                },
                {
                    "name": "unfocusedLeadingIconColor = unfocusedLeadingIconColor",
                    "type": null
                },
                {
                    "name": "disabledLeadingIconColor = disabledLeadingIconColor",
                    "type": null
                },
                {
                    "name": "errorLeadingIconColor = errorLeadingIconColor",
                    "type": null
                },
                {
                    "name": "focusedTrailingIconColor = focusedTrailingIconColor",
                    "type": null
                },
                {
                    "name": "unfocusedTrailingIconColor = unfocusedTrailingIconColor",
                    "type": null
                },
                {
                    "name": "disabledTrailingIconColor = disabledTrailingIconColor",
                    "type": null
                },
                {
                    "name": "errorTrailingIconColor = errorTrailingIconColor",
                    "type": null
                },
                {
                    "name": "focusedLabelColor = focusedLabelColor",
                    "type": null
                },
                {
                    "name": "unfocusedLabelColor = unfocusedLabelColor",
                    "type": null
                },
                {
                    "name": "disabledLabelColor = disabledLabelColor",
                    "type": null
                },
                {
                    "name": "errorLabelColor = errorLabelColor",
                    "type": null
                },
                {
                    "name": "focusedPlaceholderColor = focusedPlaceholderColor",
                    "type": null
                },
                {
                    "name": "unfocusedPlaceholderColor = unfocusedPlaceholderColor",
                    "type": null
                },
                {
                    "name": "disabledPlaceholderColor = disabledPlaceholderColor",
                    "type": null
                },
                {
                    "name": "errorPlaceholderColor = errorPlaceholderColor",
                    "type": null
                },
                {
                    "name": "focusedSupportingTextColor = focusedSupportingTextColor",
                    "type": null
                },
                {
                    "name": "unfocusedSupportingTextColor = unfocusedSupportingTextColor",
                    "type": null
                },
                {
                    "name": "disabledSupportingTextColor = disabledSupportingTextColor",
                    "type": null
                },
                {
                    "name": "errorSupportingTextColor = errorSupportingTextColor",
                    "type": null
                },
                {
                    "name": "focusedPrefixColor = focusedPrefixColor",
                    "type": null
                },
                {
                    "name": "unfocusedPrefixColor = unfocusedPrefixColor",
                    "type": null
                },
                {
                    "name": "disabledPrefixColor = disabledPrefixColor",
                    "type": null
                },
                {
                    "name": "errorPrefixColor = errorPrefixColor",
                    "type": null
                },
                {
                    "name": "focusedSuffixColor = focusedSuffixColor",
                    "type": null
                },
                {
                    "name": "unfocusedSuffixColor = unfocusedSuffixColor",
                    "type": null
                },
                {
                    "name": "disabledSuffixColor = disabledSuffixColor",
                    "type": null
                },
                {
                    "name": "errorSuffixColor = errorSuffixColor",
                    "type": null
                },
                {
                    "name": ")\n\n    @Deprecated(\n        message = \"Renamed to `TextFieldDefaults.DecorationBox`\"",
                    "type": null
                },
                {
                    "name": "replaceWith = ReplaceWith(\"TextFieldDefaults.DecorationBox(\\n\" +\n            \"        value = value",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        innerTextField = innerTextField",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        enabled = enabled",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        singleLine = singleLine",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        visualTransformation = visualTransformation",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        interactionSource = interactionSource",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        isError = isError",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        label = label",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        placeholder = placeholder",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        leadingIcon = leadingIcon",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        trailingIcon = trailingIcon",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        prefix = prefix",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        suffix = suffix",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        supportingText = supportingText",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        shape = shape",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        colors = colors",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        contentPadding = contentPadding",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"        container = container",
                    "type": null
                },
                {
                    "name": "\\n\" +\n            \"    )\")",
                    "type": null
                },
                {
                    "name": "level = DeprecationLevel.WARNING\n    )\n    @Composable\n    @ExperimentalMaterial3Api\n    fun TextFieldDecorationBox(\n        value",
                    "type": "String"
                },
                {
                    "name": "innerTextField",
                    "type": "@Composable () -> Unit"
                },
                {
                    "name": "enabled",
                    "type": "Boolean"
                },
                {
                    "name": "singleLine",
                    "type": "Boolean"
                },
                {
                    "name": "visualTransformation",
                    "type": "VisualTransformation"
                },
                {
                    "name": "interactionSource",
                    "type": "InteractionSource"
                },
                {
                    "name": "isError",
                    "type": "Boolean = false"
                },
                {
                    "name": "label",
                    "type": "@Composable (() -> Unit)? = null"
                },
                {
                    "name": "placeholder",
                    "type": "@Composable (() -> Unit)? = null"
                },
                {
                    "name": "leadingIcon",
                    "type": "@Composable (() -> Unit)? = null"
                },
                {
                    "name": "trailingIcon",
                    "type": "@Composable (() -> Unit)? = null"
                },
                {
                    "name": "prefix",
                    "type": "@Composable (() -> Unit)? = null"
                },
                {
                    "name": "suffix",
                    "type": "@Composable (() -> Unit)? = null"
                },
                {
                    "name": "supportingText",
                    "type": "@Composable (() -> Unit)? = null"
                },
                {
                    "name": "shape",
                    "type": "Shape = TextFieldDefaults.shape"
                },
                {
                    "name": "colors",
                    "type": "TextFieldColors = colors()"
                },
                {
                    "name": "contentPadding",
                    "type": "PaddingValues =\n            if (label == null)"
                }
            ]
        }
    ],
    "textFieldColors": [
        {
            "arguments": [
                {
                    "name": "textColor",
                    "type": "Color = FilledTextFieldTokens.InputColor.value"
                },
                {
                    "name": "disabledTextColor",
                    "type": "Color = FilledTextFieldTokens.DisabledInputColor.value\n            .copy(alpha = FilledTextFieldTokens.DisabledInputOpacity)"
                },
                {
                    "name": "containerColor",
                    "type": "Color = FilledTextFieldTokens.ContainerColor.value"
                },
                {
                    "name": "cursorColor",
                    "type": "Color = FilledTextFieldTokens.CaretColor.value"
                },
                {
                    "name": "errorCursorColor",
                    "type": "Color = FilledTextFieldTokens.ErrorFocusCaretColor.value"
                },
                {
                    "name": "selectionColors",
                    "type": "TextSelectionColors = LocalTextSelectionColors.current"
                },
                {
                    "name": "focusedIndicatorColor",
                    "type": "Color = FilledTextFieldTokens.FocusActiveIndicatorColor.value"
                },
                {
                    "name": "unfocusedIndicatorColor",
                    "type": "Color = FilledTextFieldTokens.ActiveIndicatorColor.value"
                },
                {
                    "name": "disabledIndicatorColor",
                    "type": "Color = FilledTextFieldTokens.DisabledActiveIndicatorColor.value\n            .copy(alpha = FilledTextFieldTokens.DisabledActiveIndicatorOpacity)"
                },
                {
                    "name": "errorIndicatorColor",
                    "type": "Color = FilledTextFieldTokens.ErrorActiveIndicatorColor.value"
                },
                {
                    "name": "focusedLeadingIconColor",
                    "type": "Color = FilledTextFieldTokens.FocusLeadingIconColor.value"
                },
                {
                    "name": "unfocusedLeadingIconColor",
                    "type": "Color = FilledTextFieldTokens.LeadingIconColor.value"
                },
                {
                    "name": "disabledLeadingIconColor",
                    "type": "Color = FilledTextFieldTokens.DisabledLeadingIconColor.value\n            .copy(alpha = FilledTextFieldTokens.DisabledLeadingIconOpacity)"
                },
                {
                    "name": "errorLeadingIconColor",
                    "type": "Color = FilledTextFieldTokens.ErrorLeadingIconColor.value"
                },
                {
                    "name": "focusedTrailingIconColor",
                    "type": "Color = FilledTextFieldTokens.FocusTrailingIconColor.value"
                },
                {
                    "name": "unfocusedTrailingIconColor",
                    "type": "Color = FilledTextFieldTokens.TrailingIconColor.value"
                },
                {
                    "name": "disabledTrailingIconColor",
                    "type": "Color = FilledTextFieldTokens.DisabledTrailingIconColor.value\n            .copy(alpha = FilledTextFieldTokens.DisabledTrailingIconOpacity)"
                },
                {
                    "name": "errorTrailingIconColor",
                    "type": "Color = FilledTextFieldTokens.ErrorTrailingIconColor.value"
                },
                {
                    "name": "focusedLabelColor",
                    "type": "Color = FilledTextFieldTokens.FocusLabelColor.value"
                },
                {
                    "name": "unfocusedLabelColor",
                    "type": "Color = FilledTextFieldTokens.LabelColor.value"
                },
                {
                    "name": "disabledLabelColor",
                    "type": "Color = FilledTextFieldTokens.DisabledLabelColor.value\n            .copy(alpha = FilledTextFieldTokens.DisabledLabelOpacity)"
                },
                {
                    "name": "errorLabelColor",
                    "type": "Color = FilledTextFieldTokens.ErrorLabelColor.value"
                },
                {
                    "name": "placeholderColor",
                    "type": "Color = FilledTextFieldTokens.InputPlaceholderColor.value"
                },
                {
                    "name": "disabledPlaceholderColor",
                    "type": "Color = FilledTextFieldTokens.DisabledInputColor.value\n            .copy(alpha = FilledTextFieldTokens.DisabledInputOpacity)"
                },
                {
                    "name": "focusedSupportingTextColor",
                    "type": "Color = FilledTextFieldTokens.FocusSupportingColor.value"
                },
                {
                    "name": "unfocusedSupportingTextColor",
                    "type": "Color = FilledTextFieldTokens.SupportingColor.value"
                },
                {
                    "name": "disabledSupportingTextColor",
                    "type": "Color = FilledTextFieldTokens.DisabledSupportingColor.value\n            .copy(alpha = FilledTextFieldTokens.DisabledSupportingOpacity)"
                },
                {
                    "name": "errorSupportingTextColor",
                    "type": "Color = FilledTextFieldTokens.ErrorSupportingColor.value"
                },
                {
                    "name": "focusedPrefixColor",
                    "type": "Color = FilledTextFieldTokens.InputPrefixColor.value"
                },
                {
                    "name": "unfocusedPrefixColor",
                    "type": "Color = FilledTextFieldTokens.InputPrefixColor.value"
                },
                {
                    "name": "disabledPrefixColor",
                    "type": "Color = FilledTextFieldTokens.InputPrefixColor.value\n            .copy(alpha = FilledTextFieldTokens.DisabledInputOpacity)"
                },
                {
                    "name": "errorPrefixColor",
                    "type": "Color = FilledTextFieldTokens.InputPrefixColor.value"
                },
                {
                    "name": "focusedSuffixColor",
                    "type": "Color = FilledTextFieldTokens.InputSuffixColor.value"
                },
                {
                    "name": "unfocusedSuffixColor",
                    "type": "Color = FilledTextFieldTokens.InputSuffixColor.value"
                },
                {
                    "name": "disabledSuffixColor",
                    "type": "Color = FilledTextFieldTokens.InputSuffixColor.value\n            .copy(alpha = FilledTextFieldTokens.DisabledInputOpacity)"
                },
                {
                    "name": "errorSuffixColor",
                    "type": "Color = FilledTextFieldTokens.InputSuffixColor.value"
                },
                {
                    "name": ")",
                    "type": "TextFieldColors = colors(\n        focusedTextColor = textColor"
                },
                {
                    "name": "unfocusedTextColor = textColor",
                    "type": null
                },
                {
                    "name": "disabledTextColor = disabledTextColor",
                    "type": null
                },
                {
                    "name": "errorTextColor = textColor",
                    "type": null
                },
                {
                    "name": "focusedContainerColor = containerColor",
                    "type": null
                },
                {
                    "name": "unfocusedContainerColor = containerColor",
                    "type": null
                },
                {
                    "name": "disabledContainerColor = containerColor",
                    "type": null
                },
                {
                    "name": "errorContainerColor = containerColor",
                    "type": null
                },
                {
                    "name": "cursorColor = cursorColor",
                    "type": null
                },
                {
                    "name": "errorCursorColor = errorCursorColor",
                    "type": null
                },
                {
                    "name": "selectionColors = selectionColors",
                    "type": null
                },
                {
                    "name": "focusedIndicatorColor = focusedIndicatorColor",
                    "type": null
                },
                {
                    "name": "unfocusedIndicatorColor = unfocusedIndicatorColor",
                    "type": null
                },
                {
                    "name": "disabledIndicatorColor = disabledIndicatorColor",
                    "type": null
                },
                {
                    "name": "errorIndicatorColor = errorIndicatorColor",
                    "type": null
                },
                {
                    "name": "focusedLeadingIconColor = focusedLeadingIconColor",
                    "type": null
                },
                {
                    "name": "unfocusedLeadingIconColor = unfocusedLeadingIconColor",
                    "type": null
                },
                {
                    "name": "disabledLeadingIconColor = disabledLeadingIconColor",
                    "type": null
                },
                {
                    "name": "errorLeadingIconColor = errorLeadingIconColor",
                    "type": null
                },
                {
                    "name": "focusedTrailingIconColor = focusedTrailingIconColor",
                    "type": null
                },
                {
                    "name": "unfocusedTrailingIconColor = unfocusedTrailingIconColor",
                    "type": null
                },
                {
                    "name": "disabledTrailingIconColor = disabledTrailingIconColor",
                    "type": null
                },
                {
                    "name": "errorTrailingIconColor = errorTrailingIconColor",
                    "type": null
                },
                {
                    "name": "focusedLabelColor = focusedLabelColor",
                    "type": null
                },
                {
                    "name": "unfocusedLabelColor = unfocusedLabelColor",
                    "type": null
                },
                {
                    "name": "disabledLabelColor = disabledLabelColor",
                    "type": null
                },
                {
                    "name": "errorLabelColor = errorLabelColor",
                    "type": null
                },
                {
                    "name": "focusedPlaceholderColor = placeholderColor",
                    "type": null
                },
                {
                    "name": "unfocusedPlaceholderColor = placeholderColor",
                    "type": null
                },
                {
                    "name": "disabledPlaceholderColor = disabledPlaceholderColor",
                    "type": null
                },
                {
                    "name": "errorPlaceholderColor = placeholderColor",
                    "type": null
                },
                {
                    "name": "focusedSupportingTextColor = focusedSupportingTextColor",
                    "type": null
                },
                {
                    "name": "unfocusedSupportingTextColor = unfocusedSupportingTextColor",
                    "type": null
                },
                {
                    "name": "disabledSupportingTextColor = disabledSupportingTextColor",
                    "type": null
                },
                {
                    "name": "errorSupportingTextColor = errorSupportingTextColor",
                    "type": null
                },
                {
                    "name": "focusedPrefixColor = focusedPrefixColor",
                    "type": null
                },
                {
                    "name": "unfocusedPrefixColor = unfocusedPrefixColor",
                    "type": null
                },
                {
                    "name": "disabledPrefixColor = disabledPrefixColor",
                    "type": null
                },
                {
                    "name": "errorPrefixColor = errorPrefixColor",
                    "type": null
                },
                {
                    "name": "focusedSuffixColor = focusedSuffixColor",
                    "type": null
                },
                {
                    "name": "unfocusedSuffixColor = unfocusedSuffixColor",
                    "type": null
                },
                {
                    "name": "disabledSuffixColor = disabledSuffixColor",
                    "type": null
                },
                {
                    "name": "errorSuffixColor = errorSuffixColor",
                    "type": null
                },
                {
                    "name": ")\n\n    @Deprecated(\"Maintained for binary compatibility\"",
                    "type": null
                },
                {
                    "name": "level = DeprecationLevel.HIDDEN)\n    @ExperimentalMaterial3Api\n    @Composable\n    fun outlinedTextFieldColors(\n        textColor",
                    "type": "Color = OutlinedTextFieldTokens.InputColor.value"
                },
                {
                    "name": "disabledTextColor",
                    "type": "Color = OutlinedTextFieldTokens.DisabledInputColor.value\n            .copy(alpha = OutlinedTextFieldTokens.DisabledInputOpacity)"
                },
                {
                    "name": "containerColor",
                    "type": "Color = Color.Transparent"
                },
                {
                    "name": "cursorColor",
                    "type": "Color = OutlinedTextFieldTokens.CaretColor.value"
                },
                {
                    "name": "errorCursorColor",
                    "type": "Color = OutlinedTextFieldTokens.ErrorFocusCaretColor.value"
                },
                {
                    "name": "selectionColors",
                    "type": "TextSelectionColors = LocalTextSelectionColors.current"
                },
                {
                    "name": "focusedBorderColor",
                    "type": "Color = OutlinedTextFieldTokens.FocusOutlineColor.value"
                },
                {
                    "name": "unfocusedBorderColor",
                    "type": "Color = OutlinedTextFieldTokens.OutlineColor.value"
                },
                {
                    "name": "disabledBorderColor",
                    "type": "Color = OutlinedTextFieldTokens.DisabledOutlineColor.value\n            .copy(alpha = OutlinedTextFieldTokens.DisabledOutlineOpacity)"
                },
                {
                    "name": "errorBorderColor",
                    "type": "Color = OutlinedTextFieldTokens.ErrorOutlineColor.value"
                },
                {
                    "name": "focusedLeadingIconColor",
                    "type": "Color = OutlinedTextFieldTokens.FocusLeadingIconColor.value"
                },
                {
                    "name": "unfocusedLeadingIconColor",
                    "type": "Color = OutlinedTextFieldTokens.LeadingIconColor.value"
                },
                {
                    "name": "disabledLeadingIconColor",
                    "type": "Color = OutlinedTextFieldTokens.DisabledLeadingIconColor.value\n            .copy(alpha = OutlinedTextFieldTokens.DisabledLeadingIconOpacity)"
                },
                {
                    "name": "errorLeadingIconColor",
                    "type": "Color = OutlinedTextFieldTokens.ErrorLeadingIconColor.value"
                },
                {
                    "name": "focusedTrailingIconColor",
                    "type": "Color = OutlinedTextFieldTokens.FocusTrailingIconColor.value"
                },
                {
                    "name": "unfocusedTrailingIconColor",
                    "type": "Color = OutlinedTextFieldTokens.TrailingIconColor.value"
                },
                {
                    "name": "disabledTrailingIconColor",
                    "type": "Color = OutlinedTextFieldTokens.DisabledTrailingIconColor\n            .value.copy(alpha = OutlinedTextFieldTokens.DisabledTrailingIconOpacity)"
                },
                {
                    "name": "errorTrailingIconColor",
                    "type": "Color = OutlinedTextFieldTokens.ErrorTrailingIconColor.value"
                },
                {
                    "name": "focusedLabelColor",
                    "type": "Color = OutlinedTextFieldTokens.FocusLabelColor.value"
                },
                {
                    "name": "unfocusedLabelColor",
                    "type": "Color = OutlinedTextFieldTokens.LabelColor.value"
                },
                {
                    "name": "disabledLabelColor",
                    "type": "Color = OutlinedTextFieldTokens.DisabledLabelColor.value\n            .copy(alpha = OutlinedTextFieldTokens.DisabledLabelOpacity)"
                },
                {
                    "name": "errorLabelColor",
                    "type": "Color = OutlinedTextFieldTokens.ErrorLabelColor.value"
                },
                {
                    "name": "placeholderColor",
                    "type": "Color = OutlinedTextFieldTokens.InputPlaceholderColor.value"
                },
                {
                    "name": "disabledPlaceholderColor",
                    "type": "Color = OutlinedTextFieldTokens.DisabledInputColor.value\n            .copy(alpha = OutlinedTextFieldTokens.DisabledInputOpacity)"
                },
                {
                    "name": "focusedSupportingTextColor",
                    "type": "Color = OutlinedTextFieldTokens.FocusSupportingColor.value"
                },
                {
                    "name": "unfocusedSupportingTextColor",
                    "type": "Color = OutlinedTextFieldTokens.SupportingColor.value"
                },
                {
                    "name": "disabledSupportingTextColor",
                    "type": "Color = OutlinedTextFieldTokens.DisabledSupportingColor\n            .value.copy(alpha = OutlinedTextFieldTokens.DisabledSupportingOpacity)"
                },
                {
                    "name": "errorSupportingTextColor",
                    "type": "Color = OutlinedTextFieldTokens.ErrorSupportingColor.value"
                },
                {
                    "name": "focusedPrefixColor",
                    "type": "Color = OutlinedTextFieldTokens.InputPrefixColor.value"
                },
                {
                    "name": "unfocusedPrefixColor",
                    "type": "Color = OutlinedTextFieldTokens.InputPrefixColor.value"
                },
                {
                    "name": "disabledPrefixColor",
                    "type": "Color = OutlinedTextFieldTokens.InputPrefixColor.value\n            .copy(alpha = OutlinedTextFieldTokens.DisabledInputOpacity)"
                },
                {
                    "name": "errorPrefixColor",
                    "type": "Color = OutlinedTextFieldTokens.InputPrefixColor.value"
                },
                {
                    "name": "focusedSuffixColor",
                    "type": "Color = OutlinedTextFieldTokens.InputSuffixColor.value"
                },
                {
                    "name": "unfocusedSuffixColor",
                    "type": "Color = OutlinedTextFieldTokens.InputSuffixColor.value"
                },
                {
                    "name": "disabledSuffixColor",
                    "type": "Color = OutlinedTextFieldTokens.InputSuffixColor.value\n            .copy(alpha = OutlinedTextFieldTokens.DisabledInputOpacity)"
                },
                {
                    "name": "errorSuffixColor",
                    "type": "Color = OutlinedTextFieldTokens.InputSuffixColor.value"
                },
                {
                    "name": ")",
                    "type": "TextFieldColors = OutlinedTextFieldDefaults.colors(\n        focusedTextColor = textColor"
                },
                {
                    "name": "unfocusedTextColor = textColor",
                    "type": null
                },
                {
                    "name": "disabledTextColor = disabledTextColor",
                    "type": null
                },
                {
                    "name": "errorTextColor = textColor",
                    "type": null
                },
                {
                    "name": "focusedContainerColor = containerColor",
                    "type": null
                },
                {
                    "name": "unfocusedContainerColor = containerColor",
                    "type": null
                },
                {
                    "name": "disabledContainerColor = containerColor",
                    "type": null
                },
                {
                    "name": "errorContainerColor = containerColor",
                    "type": null
                },
                {
                    "name": "cursorColor = cursorColor",
                    "type": null
                },
                {
                    "name": "errorCursorColor = errorCursorColor",
                    "type": null
                },
                {
                    "name": "selectionColors = selectionColors",
                    "type": null
                },
                {
                    "name": "focusedBorderColor = focusedBorderColor",
                    "type": null
                },
                {
                    "name": "unfocusedBorderColor = unfocusedBorderColor",
                    "type": null
                },
                {
                    "name": "disabledBorderColor = disabledBorderColor",
                    "type": null
                },
                {
                    "name": "errorBorderColor = errorBorderColor",
                    "type": null
                },
                {
                    "name": "focusedLeadingIconColor = focusedLeadingIconColor",
                    "type": null
                },
                {
                    "name": "unfocusedLeadingIconColor = unfocusedLeadingIconColor",
                    "type": null
                },
                {
                    "name": "disabledLeadingIconColor = disabledLeadingIconColor",
                    "type": null
                },
                {
                    "name": "errorLeadingIconColor = errorLeadingIconColor",
                    "type": null
                },
                {
                    "name": "focusedTrailingIconColor = focusedTrailingIconColor",
                    "type": null
                },
                {
                    "name": "unfocusedTrailingIconColor = unfocusedTrailingIconColor",
                    "type": null
                },
                {
                    "name": "disabledTrailingIconColor = disabledTrailingIconColor",
                    "type": null
                },
                {
                    "name": "errorTrailingIconColor = errorTrailingIconColor",
                    "type": null
                },
                {
                    "name": "focusedLabelColor = focusedLabelColor",
                    "type": null
                },
                {
                    "name": "unfocusedLabelColor = unfocusedLabelColor",
                    "type": null
                },
                {
                    "name": "disabledLabelColor = disabledLabelColor",
                    "type": null
                },
                {
                    "name": "errorLabelColor = errorLabelColor",
                    "type": null
                },
                {
                    "name": "focusedPlaceholderColor = placeholderColor",
                    "type": null
                },
                {
                    "name": "unfocusedPlaceholderColor = placeholderColor",
                    "type": null
                },
                {
                    "name": "disabledPlaceholderColor = disabledPlaceholderColor",
                    "type": null
                },
                {
                    "name": "errorPlaceholderColor = placeholderColor",
                    "type": null
                },
                {
                    "name": "focusedSupportingTextColor = focusedSupportingTextColor",
                    "type": null
                },
                {
                    "name": "unfocusedSupportingTextColor = unfocusedSupportingTextColor",
                    "type": null
                },
                {
                    "name": "disabledSupportingTextColor = disabledSupportingTextColor",
                    "type": null
                },
                {
                    "name": "errorSupportingTextColor = errorSupportingTextColor",
                    "type": null
                },
                {
                    "name": "focusedPrefixColor = focusedPrefixColor",
                    "type": null
                },
                {
                    "name": "unfocusedPrefixColor = unfocusedPrefixColor",
                    "type": null
                },
                {
                    "name": "disabledPrefixColor = disabledPrefixColor",
                    "type": null
                },
                {
                    "name": "errorPrefixColor = errorPrefixColor",
                    "type": null
                },
                {
                    "name": "focusedSuffixColor = focusedSuffixColor",
                    "type": null
                },
                {
                    "name": "unfocusedSuffixColor = unfocusedSuffixColor",
                    "type": null
                },
                {
                    "name": "disabledSuffixColor = disabledSuffixColor",
                    "type": null
                },
                {
                    "name": "errorSuffixColor = errorSuffixColor",
                    "type": null
                },
                {
                    "name": ")\n\n    @Deprecated(\"Use overload with prefix and suffix parameters\"",
                    "type": null
                },
                {
                    "name": "level = DeprecationLevel.HIDDEN)\n    @Composable\n    @ExperimentalMaterial3Api\n    fun TextFieldDecorationBox(\n        value",
                    "type": "String"
                },
                {
                    "name": "innerTextField",
                    "type": "@Composable () -> Unit"
                },
                {
                    "name": "enabled",
                    "type": "Boolean"
                },
                {
                    "name": "singleLine",
                    "type": "Boolean"
                },
                {
                    "name": "visualTransformation",
                    "type": "VisualTransformation"
                },
                {
                    "name": "interactionSource",
                    "type": "InteractionSource"
                },
                {
                    "name": "isError",
                    "type": "Boolean = false"
                },
                {
                    "name": "label",
                    "type": "@Composable (() -> Unit)? = null"
                },
                {
                    "name": "placeholder",
                    "type": "@Composable (() -> Unit)? = null"
                },
                {
                    "name": "leadingIcon",
                    "type": "@Composable (() -> Unit)? = null"
                },
                {
                    "name": "trailingIcon",
                    "type": "@Composable (() -> Unit)? = null"
                },
                {
                    "name": "supportingText",
                    "type": "@Composable (() -> Unit)? = null"
                },
                {
                    "name": "shape",
                    "type": "Shape = TextFieldDefaults.shape"
                },
                {
                    "name": "colors",
                    "type": "TextFieldColors = colors()"
                },
                {
                    "name": "contentPadding",
                    "type": "PaddingValues =\n            if (label == null)"
                }
            ]
        }
    ],
    "Tab": [
        {
            "arguments": [
                {
                    "name": "selected",
                    "type": "Boolean"
                },
                {
                    "name": "onClick",
                    "type": "() -> Unit"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "enabled",
                    "type": "Boolean = true"
                },
                {
                    "name": "selectedContentColor",
                    "type": "Color = LocalContentColor.current"
                },
                {
                    "name": "unselectedContentColor",
                    "type": "Color = selectedContentColor"
                },
                {
                    "name": "interactionSource",
                    "type": "MutableInteractionSource? = null"
                },
                {
                    "name": "content",
                    "type": "@Composable ColumnScope.() -> Unit\n)"
                }
            ]
        }
    ],
    "LeadingIconTab": [
        {
            "arguments": [
                {
                    "name": "selected",
                    "type": "Boolean"
                },
                {
                    "name": "onClick",
                    "type": "() -> Unit"
                },
                {
                    "name": "text",
                    "type": "@Composable () -> Unit"
                },
                {
                    "name": "icon",
                    "type": "@Composable () -> Unit"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "enabled",
                    "type": "Boolean = true"
                },
                {
                    "name": "selectedContentColor",
                    "type": "Color = LocalContentColor.current"
                },
                {
                    "name": "unselectedContentColor",
                    "type": "Color = selectedContentColor"
                },
                {
                    "name": "interactionSource",
                    "type": "MutableInteractionSource? = null\n)"
                }
            ]
        }
    ],
    "FloatingActionButton": [
        {
            "arguments": [
                {
                    "name": "onClick",
                    "type": "() -> Unit"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "shape",
                    "type": "Shape = FloatingActionButtonDefaults.shape"
                },
                {
                    "name": "containerColor",
                    "type": "Color = FloatingActionButtonDefaults.containerColor"
                },
                {
                    "name": "contentColor",
                    "type": "Color = contentColorFor(containerColor)"
                },
                {
                    "name": "elevation",
                    "type": "FloatingActionButtonElevation = FloatingActionButtonDefaults.elevation()"
                },
                {
                    "name": "interactionSource",
                    "type": "MutableInteractionSource? = null"
                },
                {
                    "name": "content",
                    "type": "@Composable () -> Unit"
                },
                {
                    "name": ")",
                    "type": null
                }
            ]
        }
    ],
    "SmallFloatingActionButton": [
        {
            "arguments": [
                {
                    "name": "onClick",
                    "type": "() -> Unit"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "shape",
                    "type": "Shape = FloatingActionButtonDefaults.smallShape"
                },
                {
                    "name": "containerColor",
                    "type": "Color = FloatingActionButtonDefaults.containerColor"
                },
                {
                    "name": "contentColor",
                    "type": "Color = contentColorFor(containerColor)"
                },
                {
                    "name": "elevation",
                    "type": "FloatingActionButtonElevation = FloatingActionButtonDefaults.elevation()"
                },
                {
                    "name": "interactionSource",
                    "type": "MutableInteractionSource? = null"
                },
                {
                    "name": "content",
                    "type": "@Composable () -> Unit"
                },
                {
                    "name": ")",
                    "type": null
                }
            ]
        }
    ],
    "LargeFloatingActionButton": [
        {
            "arguments": [
                {
                    "name": "onClick",
                    "type": "() -> Unit"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "shape",
                    "type": "Shape = FloatingActionButtonDefaults.largeShape"
                },
                {
                    "name": "containerColor",
                    "type": "Color = FloatingActionButtonDefaults.containerColor"
                },
                {
                    "name": "contentColor",
                    "type": "Color = contentColorFor(containerColor)"
                },
                {
                    "name": "elevation",
                    "type": "FloatingActionButtonElevation = FloatingActionButtonDefaults.elevation()"
                },
                {
                    "name": "interactionSource",
                    "type": "MutableInteractionSource? = null"
                },
                {
                    "name": "content",
                    "type": "@Composable () -> Unit"
                },
                {
                    "name": ")",
                    "type": null
                }
            ]
        }
    ],
    "ExtendedFloatingActionButton": [
        {
            "arguments": [
                {
                    "name": "text",
                    "type": "@Composable () -> Unit"
                },
                {
                    "name": "icon",
                    "type": "@Composable () -> Unit"
                },
                {
                    "name": "onClick",
                    "type": "() -> Unit"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "expanded",
                    "type": "Boolean = true"
                },
                {
                    "name": "shape",
                    "type": "Shape = FloatingActionButtonDefaults.extendedFabShape"
                },
                {
                    "name": "containerColor",
                    "type": "Color = FloatingActionButtonDefaults.containerColor"
                },
                {
                    "name": "contentColor",
                    "type": "Color = contentColorFor(containerColor)"
                },
                {
                    "name": "elevation",
                    "type": "FloatingActionButtonElevation = FloatingActionButtonDefaults.elevation()"
                },
                {
                    "name": "interactionSource",
                    "type": "MutableInteractionSource? = null"
                },
                {
                    "name": ")",
                    "type": null
                }
            ]
        }
    ],
    "elevation": [
        {
            "arguments": [
                {
                    "name": "defaultElevation",
                    "type": "Dp = FabPrimaryTokens.ContainerElevation"
                },
                {
                    "name": "pressedElevation",
                    "type": "Dp = FabPrimaryTokens.PressedContainerElevation"
                },
                {
                    "name": "focusedElevation",
                    "type": "Dp = FabPrimaryTokens.FocusContainerElevation"
                },
                {
                    "name": "hoveredElevation",
                    "type": "Dp = FabPrimaryTokens.HoverContainerElevation"
                },
                {
                    "name": ")",
                    "type": "FloatingActionButtonElevation = FloatingActionButtonElevation(\n        defaultElevation = defaultElevation"
                },
                {
                    "name": "pressedElevation = pressedElevation",
                    "type": null
                },
                {
                    "name": "focusedElevation = focusedElevation",
                    "type": null
                },
                {
                    "name": "hoveredElevation = hoveredElevation",
                    "type": null
                },
                {
                    "name": ")\n\n    /**\n     * Use this to create a [FloatingActionButton] with a lowered elevation for less emphasis. Use\n     * [elevation] to get a normal [FloatingActionButton].\n     *\n     * @param defaultElevation the elevation used when the [FloatingActionButton] has no other\n     * [Interaction]s.\n     * @param pressedElevation the elevation used when the [FloatingActionButton] is pressed.\n     * @param focusedElevation the elevation used when the [FloatingActionButton] is focused.\n     * @param hoveredElevation the elevation used when the [FloatingActionButton] is hovered.\n     */\n    @Composable\n    fun loweredElevation(\n        defaultElevation",
                    "type": "Dp = FabPrimaryTokens.LoweredContainerElevation"
                },
                {
                    "name": "pressedElevation",
                    "type": "Dp = FabPrimaryTokens.LoweredPressedContainerElevation"
                },
                {
                    "name": "focusedElevation",
                    "type": "Dp = FabPrimaryTokens.LoweredFocusContainerElevation"
                },
                {
                    "name": "hoveredElevation",
                    "type": "Dp = FabPrimaryTokens.LoweredHoverContainerElevation"
                },
                {
                    "name": ")",
                    "type": "FloatingActionButtonElevation = FloatingActionButtonElevation(\n        defaultElevation = defaultElevation"
                },
                {
                    "name": "pressedElevation = pressedElevation",
                    "type": null
                },
                {
                    "name": "focusedElevation = focusedElevation",
                    "type": null
                },
                {
                    "name": "hoveredElevation = hoveredElevation",
                    "type": null
                },
                {
                    "name": ")\n\n    /**\n     * Use this to create a [FloatingActionButton] that represents the default elevation of a\n     * [FloatingActionButton] used for [BottomAppBar] in different states.\n     *\n     * @param defaultElevation the elevation used when the [FloatingActionButton] has no other\n     * [Interaction]s.\n     * @param pressedElevation the elevation used when the [FloatingActionButton] is pressed.\n     * @param focusedElevation the elevation used when the [FloatingActionButton] is focused.\n     * @param hoveredElevation the elevation used when the [FloatingActionButton] is hovered.\n     */\n    fun bottomAppBarFabElevation(\n        defaultElevation",
                    "type": "Dp = 0.dp"
                },
                {
                    "name": "pressedElevation",
                    "type": "Dp = 0.dp"
                },
                {
                    "name": "focusedElevation",
                    "type": "Dp = 0.dp"
                },
                {
                    "name": "hoveredElevation",
                    "type": "Dp = 0.dp\n    ): FloatingActionButtonElevation = FloatingActionButtonElevation(\n        defaultElevation"
                },
                {
                    "name": "pressedElevation",
                    "type": null
                },
                {
                    "name": "focusedElevation",
                    "type": null
                },
                {
                    "name": "hoveredElevation\n    )\n}\n\n/**\n * Represents the tonal and shadow elevation for a floating action button in different states.\n *\n * See [FloatingActionButtonDefaults.elevation] for the default elevation used in a\n * [FloatingActionButton] and [ExtendedFloatingActionButton].\n */\n@Stable\n open class FloatingActionButtonElevation internal constructor(\n    private val defaultElevation",
                    "type": "Dp"
                },
                {
                    "name": "private val pressedElevation",
                    "type": "Dp"
                },
                {
                    "name": "private val focusedElevation",
                    "type": "Dp"
                },
                {
                    "name": "private val hoveredElevation",
                    "type": "Dp"
                },
                {
                    "name": ")",
                    "type": null
                }
            ]
        }
    ],
    "IconButton": [
        {
            "arguments": [
                {
                    "name": "onClick",
                    "type": "() -> Unit"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "enabled",
                    "type": "Boolean = true"
                },
                {
                    "name": "colors",
                    "type": "IconButtonColors = IconButtonDefaults.iconButtonColors()"
                },
                {
                    "name": "interactionSource",
                    "type": "MutableInteractionSource? = null"
                },
                {
                    "name": "content",
                    "type": "@Composable () -> Unit\n)"
                }
            ]
        }
    ],
    "IconToggleButton": [
        {
            "arguments": [
                {
                    "name": "checked",
                    "type": "Boolean"
                },
                {
                    "name": "onCheckedChange",
                    "type": "(Boolean) -> Unit"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "enabled",
                    "type": "Boolean = true"
                },
                {
                    "name": "colors",
                    "type": "IconToggleButtonColors = IconButtonDefaults.iconToggleButtonColors()"
                },
                {
                    "name": "interactionSource",
                    "type": "MutableInteractionSource? = null"
                },
                {
                    "name": "content",
                    "type": "@Composable () -> Unit\n)"
                }
            ]
        }
    ],
    "FilledIconButton": [
        {
            "arguments": [
                {
                    "name": "onClick",
                    "type": "() -> Unit"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "enabled",
                    "type": "Boolean = true"
                },
                {
                    "name": "shape",
                    "type": "Shape = IconButtonDefaults.filledShape"
                },
                {
                    "name": "colors",
                    "type": "IconButtonColors = IconButtonDefaults.filledIconButtonColors()"
                },
                {
                    "name": "interactionSource",
                    "type": "MutableInteractionSource? = null"
                },
                {
                    "name": "content",
                    "type": "@Composable () -> Unit\n) = Surface(\n    onClick = onClick"
                },
                {
                    "name": "modifier = modifier.semantics",
                    "type": null
                }
            ]
        }
    ],
    "FilledTonalIconButton": [
        {
            "arguments": [
                {
                    "name": "onClick",
                    "type": "() -> Unit"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "enabled",
                    "type": "Boolean = true"
                },
                {
                    "name": "shape",
                    "type": "Shape = IconButtonDefaults.filledShape"
                },
                {
                    "name": "colors",
                    "type": "IconButtonColors = IconButtonDefaults.filledTonalIconButtonColors()"
                },
                {
                    "name": "interactionSource",
                    "type": "MutableInteractionSource? = null"
                },
                {
                    "name": "content",
                    "type": "@Composable () -> Unit\n) = Surface(\n    onClick = onClick"
                },
                {
                    "name": "modifier = modifier.semantics",
                    "type": null
                }
            ]
        }
    ],
    "FilledIconToggleButton": [
        {
            "arguments": [
                {
                    "name": "checked",
                    "type": "Boolean"
                },
                {
                    "name": "onCheckedChange",
                    "type": "(Boolean) -> Unit"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "enabled",
                    "type": "Boolean = true"
                },
                {
                    "name": "shape",
                    "type": "Shape = IconButtonDefaults.filledShape"
                },
                {
                    "name": "colors",
                    "type": "IconToggleButtonColors = IconButtonDefaults.filledIconToggleButtonColors()"
                },
                {
                    "name": "interactionSource",
                    "type": "MutableInteractionSource? = null"
                },
                {
                    "name": "content",
                    "type": "@Composable () -> Unit\n) = Surface(\n    checked = checked"
                },
                {
                    "name": "onCheckedChange = onCheckedChange",
                    "type": null
                },
                {
                    "name": "modifier = modifier.semantics",
                    "type": null
                }
            ]
        }
    ],
    "FilledTonalIconToggleButton": [
        {
            "arguments": [
                {
                    "name": "checked",
                    "type": "Boolean"
                },
                {
                    "name": "onCheckedChange",
                    "type": "(Boolean) -> Unit"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "enabled",
                    "type": "Boolean = true"
                },
                {
                    "name": "shape",
                    "type": "Shape = IconButtonDefaults.filledShape"
                },
                {
                    "name": "colors",
                    "type": "IconToggleButtonColors = IconButtonDefaults.filledTonalIconToggleButtonColors()"
                },
                {
                    "name": "interactionSource",
                    "type": "MutableInteractionSource? = null"
                },
                {
                    "name": "content",
                    "type": "@Composable () -> Unit\n) = Surface(\n    checked = checked"
                },
                {
                    "name": "onCheckedChange = onCheckedChange",
                    "type": null
                },
                {
                    "name": "modifier = modifier.semantics",
                    "type": null
                }
            ]
        }
    ],
    "OutlinedIconButton": [
        {
            "arguments": [
                {
                    "name": "onClick",
                    "type": "() -> Unit"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "enabled",
                    "type": "Boolean = true"
                },
                {
                    "name": "shape",
                    "type": "Shape = IconButtonDefaults.outlinedShape"
                },
                {
                    "name": "colors",
                    "type": "IconButtonColors = IconButtonDefaults.outlinedIconButtonColors()"
                },
                {
                    "name": "border",
                    "type": "BorderStroke? = IconButtonDefaults.outlinedIconButtonBorder(enabled)"
                },
                {
                    "name": "interactionSource",
                    "type": "MutableInteractionSource? = null"
                },
                {
                    "name": "content",
                    "type": "@Composable () -> Unit\n) = Surface(\n    onClick = onClick"
                },
                {
                    "name": "modifier = modifier.semantics",
                    "type": null
                }
            ]
        }
    ],
    "OutlinedIconToggleButton": [
        {
            "arguments": [
                {
                    "name": "checked",
                    "type": "Boolean"
                },
                {
                    "name": "onCheckedChange",
                    "type": "(Boolean) -> Unit"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "enabled",
                    "type": "Boolean = true"
                },
                {
                    "name": "shape",
                    "type": "Shape = IconButtonDefaults.outlinedShape"
                },
                {
                    "name": "colors",
                    "type": "IconToggleButtonColors = IconButtonDefaults.outlinedIconToggleButtonColors()"
                },
                {
                    "name": "border",
                    "type": "BorderStroke? = IconButtonDefaults.outlinedIconToggleButtonBorder(enabled"
                },
                {
                    "name": "checked)",
                    "type": null
                },
                {
                    "name": "interactionSource",
                    "type": "MutableInteractionSource? = null"
                },
                {
                    "name": "content",
                    "type": "@Composable () -> Unit\n) = Surface(\n    checked = checked"
                },
                {
                    "name": "onCheckedChange = onCheckedChange",
                    "type": null
                },
                {
                    "name": "modifier = modifier.semantics",
                    "type": null
                }
            ]
        }
    ],
    "iconButtonColors": [
        {
            "arguments": [
                {
                    "name": "containerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "contentColor",
                    "type": "Color = LocalContentColor.current"
                },
                {
                    "name": "disabledContainerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledContentColor",
                    "type": "Color =\n            contentColor.copy(alpha = IconButtonTokens.DisabledIconOpacity)\n    ): IconButtonColors = MaterialTheme.colorScheme.defaultIconButtonColors.copy(\n        containerColor = containerColor"
                },
                {
                    "name": "contentColor = contentColor",
                    "type": null
                },
                {
                    "name": "disabledContainerColor = disabledContainerColor",
                    "type": null
                },
                {
                    "name": "disabledContentColor = disabledContentColor",
                    "type": null
                },
                {
                    "name": ")\n\n    internal val ColorScheme.defaultIconButtonColors",
                    "type": "IconButtonColors\n        @Composable\n        get()"
                }
            ]
        }
    ],
    "iconToggleButtonColors": [
        {
            "arguments": [
                {
                    "name": "containerColor",
                    "type": "Color = Color.Transparent"
                },
                {
                    "name": "contentColor",
                    "type": "Color = LocalContentColor.current"
                },
                {
                    "name": "disabledContainerColor",
                    "type": "Color = Color.Transparent"
                },
                {
                    "name": "disabledContentColor",
                    "type": "Color =\n            contentColor.copy(alpha = IconButtonTokens.DisabledIconOpacity)"
                },
                {
                    "name": "checkedContainerColor",
                    "type": "Color = Color.Transparent"
                },
                {
                    "name": "checkedContentColor",
                    "type": "Color = IconButtonTokens.SelectedIconColor.value\n    ): IconToggleButtonColors =\n        IconToggleButtonColors(\n            containerColor = containerColor"
                },
                {
                    "name": "contentColor = contentColor",
                    "type": null
                },
                {
                    "name": "disabledContainerColor = disabledContainerColor",
                    "type": null
                },
                {
                    "name": "disabledContentColor = disabledContentColor",
                    "type": null
                },
                {
                    "name": "checkedContainerColor = checkedContainerColor",
                    "type": null
                },
                {
                    "name": "checkedContentColor = checkedContentColor",
                    "type": null
                },
                {
                    "name": ")\n\n    /**\n     * Creates a [IconButtonColors] that represents the default colors used in a [FilledIconButton].\n     *\n     * @param containerColor the container color of this icon button when enabled.\n     * @param contentColor the content color of this icon button when enabled.\n     * @param disabledContainerColor the container color of this icon button when not enabled.\n     * @param disabledContentColor the content color of this icon button when not enabled.\n     */\n    @Composable\n    fun filledIconButtonColors(\n        containerColor",
                    "type": "Color = FilledIconButtonTokens.ContainerColor.value"
                },
                {
                    "name": "contentColor",
                    "type": "Color = contentColorFor(containerColor)"
                },
                {
                    "name": "disabledContainerColor",
                    "type": "Color = FilledIconButtonTokens.DisabledContainerColor.value\n            .copy(alpha = FilledIconButtonTokens.DisabledContainerOpacity)"
                },
                {
                    "name": "disabledContentColor",
                    "type": "Color = FilledIconButtonTokens.DisabledColor.value\n            .copy(alpha = FilledIconButtonTokens.DisabledOpacity)\n    ): IconButtonColors =\n        IconButtonColors(\n            containerColor = containerColor"
                },
                {
                    "name": "contentColor = contentColor",
                    "type": null
                },
                {
                    "name": "disabledContainerColor = disabledContainerColor",
                    "type": null
                },
                {
                    "name": "disabledContentColor = disabledContentColor",
                    "type": null
                },
                {
                    "name": ")\n\n    /**\n     * Creates a [IconToggleButtonColors] that represents the default colors used in a\n     * [FilledIconToggleButton].\n     *\n     * @param containerColor the container color of this icon button when enabled.\n     * @param contentColor the content color of this icon button when enabled.\n     * @param disabledContainerColor the container color of this icon button when not enabled.\n     * @param disabledContentColor the content color of this icon button when not enabled.\n     * @param checkedContainerColor the container color of this icon button when checked.\n     * @param checkedContentColor the content color of this icon button when checked.\n     */\n    @Composable\n    fun filledIconToggleButtonColors(\n        containerColor",
                    "type": "Color = FilledIconButtonTokens.UnselectedContainerColor.value"
                },
                {
                    "name": "// TODO(b/228455081)",
                    "type": "Using contentColorFor here will return OnSurfaceVariant"
                },
                {
                    "name": "//  while the token value is Primary.\n        contentColor",
                    "type": "Color = FilledIconButtonTokens.ToggleUnselectedColor.value"
                },
                {
                    "name": "disabledContainerColor",
                    "type": "Color = FilledIconButtonTokens.DisabledContainerColor.value\n            .copy(alpha = FilledIconButtonTokens.DisabledContainerOpacity)"
                },
                {
                    "name": "disabledContentColor",
                    "type": "Color = FilledIconButtonTokens.DisabledColor.value\n            .copy(alpha = FilledIconButtonTokens.DisabledOpacity)"
                },
                {
                    "name": "checkedContainerColor",
                    "type": "Color = FilledIconButtonTokens.SelectedContainerColor.value"
                },
                {
                    "name": "checkedContentColor",
                    "type": "Color = contentColorFor(checkedContainerColor)\n    ): IconToggleButtonColors =\n        IconToggleButtonColors(\n            containerColor = containerColor"
                },
                {
                    "name": "contentColor = contentColor",
                    "type": null
                },
                {
                    "name": "disabledContainerColor = disabledContainerColor",
                    "type": null
                },
                {
                    "name": "disabledContentColor = disabledContentColor",
                    "type": null
                },
                {
                    "name": "checkedContainerColor = checkedContainerColor",
                    "type": null
                },
                {
                    "name": "checkedContentColor = checkedContentColor",
                    "type": null
                },
                {
                    "name": ")\n\n    /**\n     * Creates a [IconButtonColors] that represents the default colors used in a\n     * [FilledTonalIconButton].\n     *\n     * @param containerColor the container color of this icon button when enabled.\n     * @param contentColor the content color of this icon button when enabled.\n     * @param disabledContainerColor the container color of this icon button when not enabled.\n     * @param disabledContentColor the content color of this icon button when not enabled.\n     */\n    @Composable\n    fun filledTonalIconButtonColors(\n        containerColor",
                    "type": "Color = FilledTonalIconButtonTokens.ContainerColor.value"
                },
                {
                    "name": "contentColor",
                    "type": "Color = contentColorFor(containerColor)"
                },
                {
                    "name": "disabledContainerColor",
                    "type": "Color = FilledTonalIconButtonTokens.DisabledContainerColor.value\n            .copy(alpha = FilledTonalIconButtonTokens.DisabledContainerOpacity)"
                },
                {
                    "name": "disabledContentColor",
                    "type": "Color = FilledTonalIconButtonTokens.DisabledColor.value\n            .copy(alpha = FilledTonalIconButtonTokens.DisabledOpacity)\n    ): IconButtonColors =\n        IconButtonColors(\n            containerColor = containerColor"
                },
                {
                    "name": "contentColor = contentColor",
                    "type": null
                },
                {
                    "name": "disabledContainerColor = disabledContainerColor",
                    "type": null
                },
                {
                    "name": "disabledContentColor = disabledContentColor",
                    "type": null
                },
                {
                    "name": ")\n\n    /**\n     * Creates a [IconToggleButtonColors] that represents the default colors used in a\n     * [FilledTonalIconToggleButton].\n     *\n     * @param containerColor the container color of this icon button when enabled.\n     * @param contentColor the content color of this icon button when enabled.\n     * @param disabledContainerColor the container color of this icon button when not enabled.\n     * @param disabledContentColor the content color of this icon button when not enabled.\n     * @param checkedContainerColor the container color of this icon button when checked.\n     * @param checkedContentColor the content color of this icon button when checked.\n     */\n    @Composable\n    fun filledTonalIconToggleButtonColors(\n        containerColor",
                    "type": "Color = FilledTonalIconButtonTokens.UnselectedContainerColor.value"
                },
                {
                    "name": "contentColor",
                    "type": "Color = contentColorFor(containerColor)"
                },
                {
                    "name": "disabledContainerColor",
                    "type": "Color = FilledTonalIconButtonTokens.DisabledContainerColor.value\n            .copy(alpha = FilledTonalIconButtonTokens.DisabledContainerOpacity)"
                },
                {
                    "name": "disabledContentColor",
                    "type": "Color = FilledTonalIconButtonTokens.DisabledColor.value\n            .copy(alpha = FilledTonalIconButtonTokens.DisabledOpacity)"
                },
                {
                    "name": "checkedContainerColor",
                    "type": "Color =\n            FilledTonalIconButtonTokens.SelectedContainerColor.value"
                },
                {
                    "name": "checkedContentColor",
                    "type": "Color = FilledTonalIconButtonTokens.ToggleSelectedColor.value\n    ): IconToggleButtonColors =\n        IconToggleButtonColors(\n            containerColor = containerColor"
                },
                {
                    "name": "contentColor = contentColor",
                    "type": null
                },
                {
                    "name": "disabledContainerColor = disabledContainerColor",
                    "type": null
                },
                {
                    "name": "disabledContentColor = disabledContentColor",
                    "type": null
                },
                {
                    "name": "checkedContainerColor = checkedContainerColor",
                    "type": null
                },
                {
                    "name": "checkedContentColor = checkedContentColor",
                    "type": null
                },
                {
                    "name": ")\n\n    /**\n     * Creates a [IconButtonColors] that represents the default colors used in a\n     * [OutlinedIconButton].\n     *\n     * @param containerColor the container color of this icon button when enabled.\n     * @param contentColor the content color of this icon button when enabled.\n     * @param disabledContainerColor the container color of this icon button when not enabled.\n     * @param disabledContentColor the content color of this icon button when not enabled.\n     */\n    @Composable\n    fun outlinedIconButtonColors(\n        containerColor",
                    "type": "Color = Color.Transparent"
                },
                {
                    "name": "contentColor",
                    "type": "Color = LocalContentColor.current"
                },
                {
                    "name": "disabledContainerColor",
                    "type": "Color = Color.Transparent"
                },
                {
                    "name": "disabledContentColor",
                    "type": "Color =\n            contentColor.copy(alpha = OutlinedIconButtonTokens.DisabledOpacity)\n    ): IconButtonColors =\n        IconButtonColors(\n            containerColor = containerColor"
                },
                {
                    "name": "contentColor = contentColor",
                    "type": null
                },
                {
                    "name": "disabledContainerColor = disabledContainerColor",
                    "type": null
                },
                {
                    "name": "disabledContentColor = disabledContentColor",
                    "type": null
                },
                {
                    "name": ")\n\n    /**\n     * Creates a [IconToggleButtonColors] that represents the default colors used in a\n     * [OutlinedIconToggleButton].\n     *\n     * @param containerColor the container color of this icon button when enabled.\n     * @param contentColor the content color of this icon button when enabled.\n     * @param disabledContainerColor the container color of this icon button when not enabled.\n     * @param disabledContentColor the content color of this icon button when not enabled.\n     * @param checkedContainerColor the container color of this icon button when checked.\n     * @param checkedContentColor the content color of this icon button when checked.\n     */\n    @Composable\n    fun outlinedIconToggleButtonColors(\n        containerColor",
                    "type": "Color = Color.Transparent"
                },
                {
                    "name": "contentColor",
                    "type": "Color = LocalContentColor.current"
                },
                {
                    "name": "disabledContainerColor",
                    "type": "Color = Color.Transparent"
                },
                {
                    "name": "disabledContentColor",
                    "type": "Color =\n            contentColor.copy(alpha = OutlinedIconButtonTokens.DisabledOpacity)"
                },
                {
                    "name": "checkedContainerColor",
                    "type": "Color =\n            OutlinedIconButtonTokens.SelectedContainerColor.value"
                },
                {
                    "name": "checkedContentColor",
                    "type": "Color = contentColorFor(checkedContainerColor)\n    ): IconToggleButtonColors =\n        IconToggleButtonColors(\n            containerColor = containerColor"
                },
                {
                    "name": "contentColor = contentColor",
                    "type": null
                },
                {
                    "name": "disabledContainerColor = disabledContainerColor",
                    "type": null
                },
                {
                    "name": "disabledContentColor = disabledContentColor",
                    "type": null
                },
                {
                    "name": "checkedContainerColor = checkedContainerColor",
                    "type": null
                },
                {
                    "name": "checkedContentColor = checkedContentColor",
                    "type": null
                },
                {
                    "name": ")\n\n    /**\n     * Represents the [BorderStroke] for an [OutlinedIconButton]",
                    "type": null
                },
                {
                    "name": "depending on its [enabled] and\n     * [checked] state.\n     *\n     * @param enabled whether the icon button is enabled\n     * @param checked whether the icon button is checked\n     */\n    @Composable\n    fun outlinedIconToggleButtonBorder(enabled",
                    "type": "Boolean"
                },
                {
                    "name": "checked",
                    "type": "Boolean): BorderStroke?"
                }
            ]
        }
    ],
    "outlinedIconButtonBorder": [
        {
            "arguments": [
                {
                    "name": "enabled",
                    "type": "Boolean): BorderStroke"
                }
            ]
        }
    ],
    "NavigationRail": [
        {
            "arguments": [
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "containerColor",
                    "type": "Color = NavigationRailDefaults.ContainerColor"
                },
                {
                    "name": "contentColor",
                    "type": "Color = contentColorFor(containerColor)"
                },
                {
                    "name": "header",
                    "type": "@Composable (ColumnScope.() -> Unit)? = null"
                },
                {
                    "name": "windowInsets",
                    "type": "WindowInsets = NavigationRailDefaults.windowInsets"
                },
                {
                    "name": "content",
                    "type": "@Composable ColumnScope.() -> Unit\n)"
                }
            ]
        }
    ],
    "NavigationRailItem": [
        {
            "arguments": [
                {
                    "name": "selected",
                    "type": "Boolean"
                },
                {
                    "name": "onClick",
                    "type": "() -> Unit"
                },
                {
                    "name": "icon",
                    "type": "@Composable () -> Unit"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "enabled",
                    "type": "Boolean = true"
                },
                {
                    "name": "label",
                    "type": "@Composable (() -> Unit)? = null"
                },
                {
                    "name": "alwaysShowLabel",
                    "type": "Boolean = true"
                },
                {
                    "name": "colors",
                    "type": "NavigationRailItemColors = NavigationRailItemDefaults.colors()"
                },
                {
                    "name": "interactionSource",
                    "type": "MutableInteractionSource? = null"
                },
                {
                    "name": ")",
                    "type": null
                }
            ]
        }
    ],
    "rememberDrawerState": [
        {
            "arguments": [
                {
                    "name": "initialValue",
                    "type": "DrawerValue"
                },
                {
                    "name": "confirmStateChange",
                    "type": "(DrawerValue) -> Boolean ="
                }
            ]
        }
    ],
    "ModalNavigationDrawer": [
        {
            "arguments": [
                {
                    "name": "drawerContent",
                    "type": "@Composable () -> Unit"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "drawerState",
                    "type": "DrawerState = rememberDrawerState(DrawerValue.Closed)"
                },
                {
                    "name": "gesturesEnabled",
                    "type": "Boolean = true"
                },
                {
                    "name": "scrimColor",
                    "type": "Color = DrawerDefaults.scrimColor"
                },
                {
                    "name": "content",
                    "type": "@Composable () -> Unit\n)"
                }
            ]
        }
    ],
    "DismissibleNavigationDrawer": [
        {
            "arguments": [
                {
                    "name": "drawerContent",
                    "type": "@Composable () -> Unit"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "drawerState",
                    "type": "DrawerState = rememberDrawerState(DrawerValue.Closed)"
                },
                {
                    "name": "gesturesEnabled",
                    "type": "Boolean = true"
                },
                {
                    "name": "content",
                    "type": "@Composable () -> Unit\n)"
                }
            ]
        }
    ],
    "PermanentNavigationDrawer": [
        {
            "arguments": [
                {
                    "name": "drawerContent",
                    "type": "@Composable () -> Unit"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "content",
                    "type": "@Composable () -> Unit\n)"
                }
            ]
        }
    ],
    "ModalDrawerSheet": [
        {
            "arguments": [
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "drawerShape",
                    "type": "Shape = DrawerDefaults.shape"
                },
                {
                    "name": "drawerContainerColor",
                    "type": "Color = DrawerDefaults.containerColor"
                },
                {
                    "name": "drawerContentColor",
                    "type": "Color = contentColorFor(drawerContainerColor)"
                },
                {
                    "name": "drawerTonalElevation",
                    "type": "Dp = DrawerDefaults.ModalDrawerElevation"
                },
                {
                    "name": "windowInsets",
                    "type": "WindowInsets = DrawerDefaults.windowInsets"
                },
                {
                    "name": "content",
                    "type": "@Composable ColumnScope.() -> Unit\n)"
                }
            ]
        }
    ],
    "DismissibleDrawerSheet": [
        {
            "arguments": [
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "drawerShape",
                    "type": "Shape = RectangleShape"
                },
                {
                    "name": "drawerContainerColor",
                    "type": "Color = DrawerDefaults.containerColor"
                },
                {
                    "name": "drawerContentColor",
                    "type": "Color = contentColorFor(drawerContainerColor)"
                },
                {
                    "name": "drawerTonalElevation",
                    "type": "Dp = DrawerDefaults.DismissibleDrawerElevation"
                },
                {
                    "name": "windowInsets",
                    "type": "WindowInsets = DrawerDefaults.windowInsets"
                },
                {
                    "name": "content",
                    "type": "@Composable ColumnScope.() -> Unit\n)"
                }
            ]
        }
    ],
    "PermanentDrawerSheet": [
        {
            "arguments": [
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "drawerShape",
                    "type": "Shape = RectangleShape"
                },
                {
                    "name": "drawerContainerColor",
                    "type": "Color = DrawerDefaults.containerColor"
                },
                {
                    "name": "drawerContentColor",
                    "type": "Color = contentColorFor(drawerContainerColor)"
                },
                {
                    "name": "drawerTonalElevation",
                    "type": "Dp = DrawerDefaults.PermanentDrawerElevation"
                },
                {
                    "name": "windowInsets",
                    "type": "WindowInsets = DrawerDefaults.windowInsets"
                },
                {
                    "name": "content",
                    "type": "@Composable ColumnScope.() -> Unit\n)"
                }
            ]
        }
    ],
    "NavigationDrawerItem": [
        {
            "arguments": [
                {
                    "name": "label",
                    "type": "@Composable () -> Unit"
                },
                {
                    "name": "selected",
                    "type": "Boolean"
                },
                {
                    "name": "onClick",
                    "type": "() -> Unit"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "icon",
                    "type": "(@Composable () -> Unit)? = null"
                },
                {
                    "name": "badge",
                    "type": "(@Composable () -> Unit)? = null"
                },
                {
                    "name": "shape",
                    "type": "Shape = NavigationDrawerTokens.ActiveIndicatorShape.value"
                },
                {
                    "name": "colors",
                    "type": "NavigationDrawerItemColors = NavigationDrawerItemDefaults.colors()"
                },
                {
                    "name": "interactionSource",
                    "type": "MutableInteractionSource? = null\n)"
                }
            ]
        }
    ],
    "iconColor": [
        {
            "arguments": [
                {
                    "name": "selected",
                    "type": "Boolean): State<Color>\n\n    /**\n     * Represents the text color for this item"
                },
                {
                    "name": "depending on whether it is [selected].\n     *\n     * @param selected whether the item is selected\n     */\n    @Composable\n    fun textColor(selected",
                    "type": "Boolean): State<Color>\n\n    /**\n     * Represents the badge color for this item"
                },
                {
                    "name": "depending on whether it is [selected].\n     *\n     * @param selected whether the item is selected\n     */\n    @Composable\n    fun badgeColor(selected",
                    "type": "Boolean): State<Color>\n\n    /**\n     * Represents the container color for this item"
                },
                {
                    "name": "depending on whether it is [selected].\n     *\n     * @param selected whether the item is selected\n     */\n    @Composable\n    fun containerColor(selected",
                    "type": "Boolean): State<Color>\n}\n\n/** Defaults used in [NavigationDrawerItem]. */\nobject NavigationDrawerItemDefaults"
                }
            ]
        }
    ],
    "PrimaryTabRow": [
        {
            "arguments": [
                {
                    "name": "selectedTabIndex",
                    "type": "Int"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "containerColor",
                    "type": "Color = TabRowDefaults.primaryContainerColor"
                },
                {
                    "name": "contentColor",
                    "type": "Color = TabRowDefaults.primaryContentColor"
                },
                {
                    "name": "indicator",
                    "type": "@Composable TabIndicatorScope.() -> Unit ="
                }
            ]
        }
    ],
    "SecondaryTabRow": [
        {
            "arguments": [
                {
                    "name": "selectedTabIndex",
                    "type": "Int"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "containerColor",
                    "type": "Color = TabRowDefaults.secondaryContainerColor"
                },
                {
                    "name": "contentColor",
                    "type": "Color = TabRowDefaults.secondaryContentColor"
                },
                {
                    "name": "indicator",
                    "type": "@Composable TabIndicatorScope.() -> Unit = @Composable"
                }
            ]
        }
    ],
    "TabRow": [
        {
            "arguments": [
                {
                    "name": "selectedTabIndex",
                    "type": "Int"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "containerColor",
                    "type": "Color = TabRowDefaults.primaryContainerColor"
                },
                {
                    "name": "contentColor",
                    "type": "Color = TabRowDefaults.primaryContentColor"
                },
                {
                    "name": "indicator",
                    "type": "@Composable (tabPositions: List<TabPosition>) -> Unit = @Composable"
                }
            ]
        }
    ],
    "PrimaryScrollableTabRow": [
        {
            "arguments": [
                {
                    "name": "selectedTabIndex",
                    "type": "Int"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "scrollState",
                    "type": "ScrollState = rememberScrollState()"
                },
                {
                    "name": "containerColor",
                    "type": "Color = TabRowDefaults.primaryContainerColor"
                },
                {
                    "name": "contentColor",
                    "type": "Color = TabRowDefaults.primaryContentColor"
                },
                {
                    "name": "edgePadding",
                    "type": "Dp = TabRowDefaults.ScrollableTabRowEdgeStartPadding"
                },
                {
                    "name": "indicator",
                    "type": "@Composable (tabPositions: List<TabPosition>) -> Unit = @Composable"
                }
            ]
        }
    ],
    "SecondaryScrollableTabRow": [
        {
            "arguments": [
                {
                    "name": "selectedTabIndex",
                    "type": "Int"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "scrollState",
                    "type": "ScrollState = rememberScrollState()"
                },
                {
                    "name": "containerColor",
                    "type": "Color = TabRowDefaults.secondaryContainerColor"
                },
                {
                    "name": "contentColor",
                    "type": "Color = TabRowDefaults.secondaryContentColor"
                },
                {
                    "name": "edgePadding",
                    "type": "Dp = TabRowDefaults.ScrollableTabRowEdgeStartPadding"
                },
                {
                    "name": "indicator",
                    "type": "@Composable (tabPositions: List<TabPosition>) -> Unit = @Composable"
                }
            ]
        }
    ],
    "ScrollableTabRow": [
        {
            "arguments": [
                {
                    "name": "selectedTabIndex",
                    "type": "Int"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "containerColor",
                    "type": "Color = TabRowDefaults.primaryContainerColor"
                },
                {
                    "name": "contentColor",
                    "type": "Color = TabRowDefaults.primaryContentColor"
                },
                {
                    "name": "edgePadding",
                    "type": "Dp = TabRowDefaults.ScrollableTabRowEdgeStartPadding"
                },
                {
                    "name": "indicator",
                    "type": "@Composable (tabPositions: List<TabPosition>) -> Unit = @Composable"
                }
            ]
        }
    ],
    "PrimaryIndicator": [
        {
            "arguments": [
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "width",
                    "type": "Dp = 24.dp"
                },
                {
                    "name": "height",
                    "type": "Dp = PrimaryNavigationTabTokens.ActiveIndicatorHeight"
                },
                {
                    "name": "color",
                    "type": "Color = PrimaryNavigationTabTokens.ActiveIndicatorColor.value"
                },
                {
                    "name": "shape",
                    "type": "Shape = PrimaryNavigationTabTokens.ActiveIndicatorShape\n    )"
                }
            ]
        }
    ],
    "SecondaryIndicator": [
        {
            "arguments": [
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "height",
                    "type": "Dp = PrimaryNavigationTabTokens.ActiveIndicatorHeight"
                },
                {
                    "name": "color",
                    "type": "Color = PrimaryNavigationTabTokens.ActiveIndicatorColor.value\n    )"
                }
            ]
        }
    ],
    "ActiveIcon": [
        {
            "arguments": [
                {
                    "name": ")",
                    "type": null
                }
            ]
        }
    ],
    "Icon": [
        {
            "arguments": [
                {
                    "name": "active",
                    "type": "Boolean"
                },
                {
                    "name": "activeContent",
                    "type": "@Composable () -> Unit ="
                }
            ]
        },
        {
            "arguments": [
                {
                    "name": "painter",
                    "type": "Painter"
                },
                {
                    "name": "contentDescription",
                    "type": "String?"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "tint",
                    "type": "Color = LocalContentColor.current\n)"
                }
            ]
        }
    ],
    "TopAppBar": [
        {
            "arguments": [
                {
                    "name": "title",
                    "type": "@Composable () -> Unit"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "navigationIcon",
                    "type": "@Composable () -> Unit ="
                }
            ]
        }
    ],
    "SmallTopAppBar": [
        {
            "arguments": [
                {
                    "name": "title",
                    "type": "@Composable () -> Unit"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "navigationIcon",
                    "type": "@Composable () -> Unit ="
                }
            ]
        }
    ],
    "CenterAlignedTopAppBar": [
        {
            "arguments": [
                {
                    "name": "title",
                    "type": "@Composable () -> Unit"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "navigationIcon",
                    "type": "@Composable () -> Unit ="
                }
            ]
        }
    ],
    "MediumTopAppBar": [
        {
            "arguments": [
                {
                    "name": "title",
                    "type": "@Composable () -> Unit"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "navigationIcon",
                    "type": "@Composable () -> Unit ="
                }
            ]
        }
    ],
    "LargeTopAppBar": [
        {
            "arguments": [
                {
                    "name": "title",
                    "type": "@Composable () -> Unit"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "navigationIcon",
                    "type": "@Composable () -> Unit ="
                }
            ]
        }
    ],
    "BottomAppBar": [
        {
            "arguments": [
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "containerColor",
                    "type": "Color = BottomAppBarDefaults.containerColor"
                },
                {
                    "name": "contentColor",
                    "type": "Color = contentColorFor(containerColor)"
                },
                {
                    "name": "tonalElevation",
                    "type": "Dp = BottomAppBarDefaults.ContainerElevation"
                },
                {
                    "name": "contentPadding",
                    "type": "PaddingValues = BottomAppBarDefaults.ContentPadding"
                },
                {
                    "name": "windowInsets",
                    "type": "WindowInsets = BottomAppBarDefaults.windowInsets"
                },
                {
                    "name": "content",
                    "type": "@Composable RowScope.() -> Unit\n) = BottomAppBar(\n    modifier = modifier"
                },
                {
                    "name": "containerColor = containerColor",
                    "type": null
                },
                {
                    "name": "contentColor = contentColor",
                    "type": null
                },
                {
                    "name": "tonalElevation = tonalElevation",
                    "type": null
                },
                {
                    "name": "contentPadding = contentPadding",
                    "type": null
                },
                {
                    "name": "windowInsets = windowInsets",
                    "type": null
                },
                {
                    "name": "scrollBehavior = null",
                    "type": null
                },
                {
                    "name": "content = content\n)\n\n/**\n * <a href=\"https",
                    "type": "//m3.material.io/components/bottom-app-bar/overview\" class=\"external\" target=\"_blank\">Material Design bottom app bar</a>.\n *\n * A bottom app bar displays navigation and key actions at the bottom of mobile screens.\n *\n * ![Bottom app bar image](https://developer.android.com/images/reference/androidx/compose/material3/bottom-app-bar.png)\n *\n * If you are interested in displaying a [FloatingActionButton]"
                },
                {
                    "name": "consider using another overload.\n *\n * Also see [NavigationBar].\n *\n * @param modifier the [Modifier] to be applied to this BottomAppBar\n * @param containerColor the color used for the background of this BottomAppBar. Use\n * [Color.Transparent] to have no color.\n * @param contentColor the preferred color for content inside this BottomAppBar. Defaults to either\n * the matching content color for [containerColor]",
                    "type": null
                },
                {
                    "name": "or to the current [LocalContentColor] if\n * [containerColor] is not a color from the theme.\n * @param tonalElevation when [containerColor] is [ColorScheme.surface]",
                    "type": null
                },
                {
                    "name": "a translucent primary color\n * overlay is applied on top of the container. A higher tonal elevation value will result in a\n * darker color in light theme and lighter color in dark theme. See also",
                    "type": "[Surface].\n * @param contentPadding the padding applied to the content of this BottomAppBar\n * @param windowInsets a window insets that app bar will respect.\n * @param scrollBehavior a [BottomAppBarScrollBehavior] which holds various offset values that will\n * be applied by this bottom app bar to set up its height. A scroll behavior is designed to\n * work in conjunction with a scrolled content to change the bottom app bar appearance as the\n * content scrolls. See [BottomAppBarScrollBehavior.nestedScrollConnection].\n * @param content the content of this BottomAppBar. The default layout here is a [Row]"
                },
                {
                    "name": "* so content inside will be placed horizontally.\n */\n@ExperimentalMaterial3Api\n@Composable\nfun BottomAppBar(\n    modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "containerColor",
                    "type": "Color = BottomAppBarDefaults.containerColor"
                },
                {
                    "name": "contentColor",
                    "type": "Color = contentColorFor(containerColor)"
                },
                {
                    "name": "tonalElevation",
                    "type": "Dp = BottomAppBarDefaults.ContainerElevation"
                },
                {
                    "name": "contentPadding",
                    "type": "PaddingValues = BottomAppBarDefaults.ContentPadding"
                },
                {
                    "name": "windowInsets",
                    "type": "WindowInsets = BottomAppBarDefaults.windowInsets"
                },
                {
                    "name": "scrollBehavior",
                    "type": "BottomAppBarScrollBehavior? = null"
                },
                {
                    "name": "content",
                    "type": "@Composable RowScope.() -> Unit\n)"
                }
            ]
        }
    ],
    "topAppBarColors": [
        {
            "arguments": [
                {
                    "name": ") = MaterialTheme.colorScheme.defaultTopAppBarColors\n\n    /**\n     * Creates a [TopAppBarColors] for small [TopAppBar]. The default implementation animates\n     * between the provided colors according to the Material Design specification.\n     *\n     * @param containerColor the container color\n     * @param scrolledContainerColor the container color when content is scrolled behind it\n     * @param navigationIconContentColor the content color used for the navigation icon\n     * @param titleContentColor the content color used for the title\n     * @param actionIconContentColor the content color used for actions\n     * @return the resulting [TopAppBarColors] used for the top app bar\n     */\n    @Composable\n    fun topAppBarColors(\n        containerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "scrolledContainerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "navigationIconContentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "titleContentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "actionIconContentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": ")",
                    "type": "TopAppBarColors = MaterialTheme.colorScheme.defaultTopAppBarColors.copy(\n        containerColor"
                },
                {
                    "name": "scrolledContainerColor",
                    "type": null
                },
                {
                    "name": "navigationIconContentColor",
                    "type": null
                },
                {
                    "name": "titleContentColor",
                    "type": null
                },
                {
                    "name": "actionIconContentColor\n    )\n\n    internal val ColorScheme.defaultTopAppBarColors",
                    "type": "TopAppBarColors\n        get()"
                }
            ]
        }
    ],
    "smallTopAppBarColors": [
        {
            "arguments": [
                {
                    "name": "containerColor",
                    "type": "Color = TopAppBarSmallTokens.ContainerColor.value"
                },
                {
                    "name": "scrolledContainerColor",
                    "type": "Color = MaterialTheme.colorScheme.applyTonalElevation(\n            backgroundColor = containerColor"
                },
                {
                    "name": "elevation = TopAppBarSmallTokens.OnScrollContainerElevation\n        )",
                    "type": null
                },
                {
                    "name": "navigationIconContentColor",
                    "type": "Color = TopAppBarSmallTokens.LeadingIconColor.value"
                },
                {
                    "name": "titleContentColor",
                    "type": "Color = TopAppBarSmallTokens.HeadlineColor.value"
                },
                {
                    "name": "actionIconContentColor",
                    "type": "Color = TopAppBarSmallTokens.TrailingIconColor.value"
                },
                {
                    "name": ")",
                    "type": "TopAppBarColors =\n        topAppBarColors(\n            containerColor"
                },
                {
                    "name": "scrolledContainerColor",
                    "type": null
                },
                {
                    "name": "navigationIconContentColor",
                    "type": null
                },
                {
                    "name": "titleContentColor",
                    "type": null
                },
                {
                    "name": "actionIconContentColor\n        )\n\n    /**\n     * Default insets to be used and consumed by the top app bars\n     */\n    val windowInsets",
                    "type": "WindowInsets\n        @Composable\n        get() = WindowInsets.systemBarsForVisualComponents\n            .only(WindowInsetsSides.Horizontal + WindowInsetsSides.Top)\n\n    /**\n     * Creates a [TopAppBarColors] for [CenterAlignedTopAppBar]s. The default implementation\n     * animates between the provided colors according to the Material Design specification.\n     */\n\n    @Composable\n    fun centerAlignedTopAppBarColors() =\n        MaterialTheme.colorScheme.defaultCenterAlignedTopAppBarColors\n\n    /**\n     * Creates a [TopAppBarColors] for [CenterAlignedTopAppBar]s. The default implementation\n     * animates between the provided colors according to the Material Design specification.\n     *\n     * @param containerColor the container color\n     * @param scrolledContainerColor the container color when content is scrolled behind it\n     * @param navigationIconContentColor the content color used for the navigation icon\n     * @param titleContentColor the content color used for the title\n     * @param actionIconContentColor the content color used for actions\n     * @return the resulting [TopAppBarColors] used for the top app bar\n     */\n    @Composable\n    fun centerAlignedTopAppBarColors(\n        containerColor: Color = Color.Unspecified"
                },
                {
                    "name": "scrolledContainerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "navigationIconContentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "titleContentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "actionIconContentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": ")",
                    "type": "TopAppBarColors = MaterialTheme.colorScheme.defaultCenterAlignedTopAppBarColors.copy(\n            containerColor"
                },
                {
                    "name": "scrolledContainerColor",
                    "type": null
                },
                {
                    "name": "navigationIconContentColor",
                    "type": null
                },
                {
                    "name": "titleContentColor",
                    "type": null
                },
                {
                    "name": "actionIconContentColor\n        )\n\n    internal val ColorScheme.defaultCenterAlignedTopAppBarColors",
                    "type": "TopAppBarColors\n        get()"
                }
            ]
        }
    ],
    "mediumTopAppBarColors": [
        {
            "arguments": [
                {
                    "name": ") = MaterialTheme.colorScheme.defaultMediumTopAppBarColors\n\n    /**\n     * Creates a [TopAppBarColors] for [MediumTopAppBar]s. The default implementation interpolates\n     * between the provided colors as the top app bar scrolls according to the Material Design\n     * specification.\n     *\n     * @param containerColor the container color\n     * @param scrolledContainerColor the container color when content is scrolled behind it\n     * @param navigationIconContentColor the content color used for the navigation icon\n     * @param titleContentColor the content color used for the title\n     * @param actionIconContentColor the content color used for actions\n     * @return the resulting [TopAppBarColors] used for the top app bar\n     */\n    @Composable\n    fun mediumTopAppBarColors(\n        containerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "scrolledContainerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "navigationIconContentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "titleContentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "actionIconContentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": ")",
                    "type": "TopAppBarColors = MaterialTheme.colorScheme.defaultMediumTopAppBarColors.copy(\n            containerColor"
                },
                {
                    "name": "scrolledContainerColor",
                    "type": null
                },
                {
                    "name": "navigationIconContentColor",
                    "type": null
                },
                {
                    "name": "titleContentColor",
                    "type": null
                },
                {
                    "name": "actionIconContentColor\n        )\n\n    internal val ColorScheme.defaultMediumTopAppBarColors",
                    "type": "TopAppBarColors\n        get()"
                }
            ]
        }
    ],
    "largeTopAppBarColors": [
        {
            "arguments": [
                {
                    "name": ") = MaterialTheme.colorScheme.defaultLargeTopAppBarColors\n\n/**\n     * Creates a [TopAppBarColors] for [LargeTopAppBar]s. The default implementation interpolates\n     * between the provided colors as the top app bar scrolls according to the Material Design\n     * specification.\n     *\n     * @param containerColor the container color\n     * @param scrolledContainerColor the container color when content is scrolled behind it\n     * @param navigationIconContentColor the content color used for the navigation icon\n     * @param titleContentColor the content color used for the title\n     * @param actionIconContentColor the content color used for actions\n     * @return the resulting [TopAppBarColors] used for the top app bar\n     */\n    @Composable\n    fun largeTopAppBarColors(\n        containerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "scrolledContainerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "navigationIconContentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "titleContentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "actionIconContentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": ")",
                    "type": "TopAppBarColors = MaterialTheme.colorScheme.defaultLargeTopAppBarColors.copy(\n            containerColor"
                },
                {
                    "name": "scrolledContainerColor",
                    "type": null
                },
                {
                    "name": "navigationIconContentColor",
                    "type": null
                },
                {
                    "name": "titleContentColor",
                    "type": null
                },
                {
                    "name": "actionIconContentColor\n        )\n\n    internal val ColorScheme.defaultLargeTopAppBarColors",
                    "type": "TopAppBarColors\n        get()"
                }
            ]
        }
    ],
    "pinnedScrollBehavior": [
        {
            "arguments": [
                {
                    "name": "state",
                    "type": "TopAppBarState = rememberTopAppBarState()"
                },
                {
                    "name": "canScroll",
                    "type": "() -> Boolean ="
                }
            ]
        }
    ],
    "enterAlwaysScrollBehavior": [
        {
            "arguments": [
                {
                    "name": "state",
                    "type": "TopAppBarState = rememberTopAppBarState()"
                },
                {
                    "name": "canScroll",
                    "type": "() -> Boolean ="
                }
            ]
        }
    ],
    "exitUntilCollapsedScrollBehavior": [
        {
            "arguments": [
                {
                    "name": "state",
                    "type": "TopAppBarState = rememberTopAppBarState()"
                },
                {
                    "name": "canScroll",
                    "type": "() -> Boolean ="
                }
            ]
        }
    ],
    "rememberTopAppBarState": [
        {
            "arguments": [
                {
                    "name": "initialHeightOffsetLimit",
                    "type": "Float = -Float.MAX_VALUE"
                },
                {
                    "name": "initialHeightOffset",
                    "type": "Float = 0f"
                },
                {
                    "name": "initialContentOffset",
                    "type": "Float = 0f\n): TopAppBarState"
                }
            ]
        }
    ],
    "exitAlwaysScrollBehavior": [
        {
            "arguments": [
                {
                    "name": "state",
                    "type": "BottomAppBarState = rememberBottomAppBarState()"
                },
                {
                    "name": "canScroll",
                    "type": "() -> Boolean ="
                }
            ]
        }
    ],
    "rememberBottomAppBarState": [
        {
            "arguments": [
                {
                    "name": "initialHeightOffsetLimit",
                    "type": "Float = -Float.MAX_VALUE"
                },
                {
                    "name": "initialHeightOffset",
                    "type": "Float = 0f"
                },
                {
                    "name": "initialContentOffset",
                    "type": "Float = 0f\n): BottomAppBarState"
                }
            ]
        }
    ],
    "OutlinedTextField": [
        {
            "arguments": [
                {
                    "name": "value",
                    "type": "TextFieldValue"
                },
                {
                    "name": "onValueChange",
                    "type": "(TextFieldValue) -> Unit"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "enabled",
                    "type": "Boolean = true"
                },
                {
                    "name": "readOnly",
                    "type": "Boolean = false"
                },
                {
                    "name": "textStyle",
                    "type": "TextStyle = LocalTextStyle.current"
                },
                {
                    "name": "label",
                    "type": "@Composable (() -> Unit)? = null"
                },
                {
                    "name": "placeholder",
                    "type": "@Composable (() -> Unit)? = null"
                },
                {
                    "name": "leadingIcon",
                    "type": "@Composable (() -> Unit)? = null"
                },
                {
                    "name": "trailingIcon",
                    "type": "@Composable (() -> Unit)? = null"
                },
                {
                    "name": "supportingText",
                    "type": "@Composable (() -> Unit)? = null"
                },
                {
                    "name": "isError",
                    "type": "Boolean = false"
                },
                {
                    "name": "visualTransformation",
                    "type": "VisualTransformation = VisualTransformation.None"
                },
                {
                    "name": "keyboardOptions",
                    "type": "KeyboardOptions = KeyboardOptions.Default"
                },
                {
                    "name": "keyboardActions",
                    "type": "KeyboardActions = KeyboardActions.Default"
                },
                {
                    "name": "singleLine",
                    "type": "Boolean = false"
                },
                {
                    "name": "maxLines",
                    "type": "Int = if (singleLine) 1 else Int.MAX_VALUE"
                },
                {
                    "name": "minLines",
                    "type": "Int = 1"
                },
                {
                    "name": "interactionSource",
                    "type": "MutableInteractionSource = remember"
                }
            ]
        }
    ],
    "Snackbar": [
        {
            "arguments": [
                {
                    "name": "snackbarData",
                    "type": "SnackbarData"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "actionOnNewLine",
                    "type": "Boolean = false"
                },
                {
                    "name": "shape",
                    "type": "Shape = SnackbarDefaults.shape"
                },
                {
                    "name": "containerColor",
                    "type": "Color = SnackbarDefaults.color"
                },
                {
                    "name": "contentColor",
                    "type": "Color = SnackbarDefaults.contentColor"
                },
                {
                    "name": "actionColor",
                    "type": "Color = SnackbarDefaults.actionColor"
                },
                {
                    "name": "actionContentColor",
                    "type": "Color = SnackbarDefaults.actionContentColor"
                },
                {
                    "name": "dismissActionContentColor",
                    "type": "Color = SnackbarDefaults.dismissActionContentColor"
                },
                {
                    "name": ")",
                    "type": null
                }
            ]
        }
    ],
    "ListItem": [
        {
            "arguments": [
                {
                    "name": "headlineContent",
                    "type": "@Composable () -> Unit"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "overlineContent",
                    "type": "@Composable (() -> Unit)? = null"
                },
                {
                    "name": "supportingContent",
                    "type": "@Composable (() -> Unit)? = null"
                },
                {
                    "name": "leadingContent",
                    "type": "@Composable (() -> Unit)? = null"
                },
                {
                    "name": "trailingContent",
                    "type": "@Composable (() -> Unit)? = null"
                },
                {
                    "name": "colors",
                    "type": "ListItemColors = ListItemDefaults.colors()"
                },
                {
                    "name": "tonalElevation",
                    "type": "Dp = ListItemDefaults.Elevation"
                },
                {
                    "name": "shadowElevation",
                    "type": "Dp = ListItemDefaults.Elevation"
                },
                {
                    "name": ")",
                    "type": null
                }
            ]
        }
    ],
    "DragHandle": [
        {
            "arguments": [
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "width",
                    "type": "Dp = SheetBottomTokens.DockedDragHandleWidth"
                },
                {
                    "name": "height",
                    "type": "Dp = SheetBottomTokens.DockedDragHandleHeight"
                },
                {
                    "name": "shape",
                    "type": "Shape = MaterialTheme.shapes.extraLarge"
                },
                {
                    "name": "color",
                    "type": "Color = SheetBottomTokens.DockedDragHandleColor.value\n            .copy(SheetBottomTokens.DockedDragHandleOpacity)"
                },
                {
                    "name": ")",
                    "type": null
                }
            ]
        }
    ],
    "RadioButton": [
        {
            "arguments": [
                {
                    "name": "selected",
                    "type": "Boolean"
                },
                {
                    "name": "onClick",
                    "type": "(() -> Unit)?"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "enabled",
                    "type": "Boolean = true"
                },
                {
                    "name": "colors",
                    "type": "RadioButtonColors = RadioButtonDefaults.colors()"
                },
                {
                    "name": "interactionSource",
                    "type": "MutableInteractionSource? = null\n)"
                }
            ]
        }
    ],
    "BadgedBox": [
        {
            "arguments": [
                {
                    "name": "badge",
                    "type": "@Composable BoxScope.() -> Unit"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "content",
                    "type": "@Composable BoxScope.() -> Unit"
                },
                {
                    "name": ")",
                    "type": null
                }
            ]
        }
    ],
    "Badge": [
        {
            "arguments": [
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "containerColor",
                    "type": "Color = BadgeDefaults.containerColor"
                },
                {
                    "name": "contentColor",
                    "type": "Color = contentColorFor(containerColor)"
                },
                {
                    "name": "content",
                    "type": "@Composable (RowScope.() -> Unit)? = null"
                },
                {
                    "name": ")",
                    "type": null
                }
            ]
        }
    ],
    "richTooltipColors": [
        {
            "arguments": [
                {
                    "name": ") = MaterialTheme.colorScheme.defaultRichTooltipColors\n\n    /**\n     * Method to create a [RichTooltipColors] for [RichTooltip]\n     * using [RichTooltipTokens] to obtain the default colors.\n     */\n    @Composable\n    fun richTooltipColors(\n        containerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "contentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "titleContentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "actionContentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": ")",
                    "type": "RichTooltipColors = MaterialTheme.colorScheme.defaultRichTooltipColors.copy(\n        containerColor = containerColor"
                },
                {
                    "name": "contentColor = contentColor",
                    "type": null
                },
                {
                    "name": "titleContentColor = titleContentColor",
                    "type": null
                },
                {
                    "name": "actionContentColor = actionContentColor\n    )\n\n    internal val ColorScheme.defaultRichTooltipColors",
                    "type": "RichTooltipColors\n        get()"
                }
            ]
        }
    ],
    "rememberPlainTooltipPositionProvider": [
        {
            "arguments": [
                {
                    "name": "spacingBetweenTooltipAndAnchor",
                    "type": "Dp = SpacingBetweenTooltipAndAnchor\n    ): PopupPositionProvider"
                }
            ]
        }
    ],
    "rememberRichTooltipPositionProvider": [
        {
            "arguments": [
                {
                    "name": "spacingBetweenTooltipAndAnchor",
                    "type": "Dp = SpacingBetweenTooltipAndAnchor\n    ): PopupPositionProvider"
                }
            ]
        }
    ],
    "AssistChip": [
        {
            "arguments": [
                {
                    "name": "onClick",
                    "type": "() -> Unit"
                },
                {
                    "name": "label",
                    "type": "@Composable () -> Unit"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "enabled",
                    "type": "Boolean = true"
                },
                {
                    "name": "leadingIcon",
                    "type": "@Composable (() -> Unit)? = null"
                },
                {
                    "name": "trailingIcon",
                    "type": "@Composable (() -> Unit)? = null"
                },
                {
                    "name": "shape",
                    "type": "Shape = AssistChipDefaults.shape"
                },
                {
                    "name": "colors",
                    "type": "ChipColors = AssistChipDefaults.assistChipColors()"
                },
                {
                    "name": "elevation",
                    "type": "ChipElevation? = AssistChipDefaults.assistChipElevation()"
                },
                {
                    "name": "border",
                    "type": "BorderStroke? = AssistChipDefaults.assistChipBorder(enabled)"
                },
                {
                    "name": "interactionSource",
                    "type": "MutableInteractionSource? = null"
                },
                {
                    "name": ") = Chip(\n    modifier = modifier",
                    "type": null
                },
                {
                    "name": "onClick = onClick",
                    "type": null
                },
                {
                    "name": "enabled = enabled",
                    "type": null
                },
                {
                    "name": "label = label",
                    "type": null
                },
                {
                    "name": "labelTextStyle = MaterialTheme.typography.fromToken(AssistChipTokens.LabelTextFont)",
                    "type": null
                },
                {
                    "name": "labelColor = colors.labelColor(enabled)",
                    "type": null
                },
                {
                    "name": "leadingIcon = leadingIcon",
                    "type": null
                },
                {
                    "name": "trailingIcon = trailingIcon",
                    "type": null
                },
                {
                    "name": "shape = shape",
                    "type": null
                },
                {
                    "name": "colors = colors",
                    "type": null
                },
                {
                    "name": "elevation = elevation",
                    "type": null
                },
                {
                    "name": "border = border",
                    "type": null
                },
                {
                    "name": "minHeight = AssistChipDefaults.Height",
                    "type": null
                },
                {
                    "name": "paddingValues = AssistChipPadding",
                    "type": null
                },
                {
                    "name": "interactionSource = interactionSource\n)\n\n/**\n * <a href=\"https",
                    "type": "//m3.material.io/components/chips/overview\" class=\"external\" target=\"_blank\">Material Design assist chip</a>.\n *\n * Chips help people enter information"
                },
                {
                    "name": "make selections",
                    "type": null
                },
                {
                    "name": "filter content",
                    "type": null
                },
                {
                    "name": "or trigger actions. Chips\n * can show multiple interactive elements together in the same area",
                    "type": null
                },
                {
                    "name": "such as a list of selectable\n * movie times",
                    "type": null
                },
                {
                    "name": "or a series of email contacts.\n *\n * Assist chips represent smart or automated actions that can span multiple apps",
                    "type": null
                },
                {
                    "name": "such as opening a\n * calendar event from the home screen. Assist chips function as though the user asked an assistant\n * to complete the action. They should appear dynamically and contextually in a UI.\n *\n * ![Assist chip image](https",
                    "type": "//developer.android.com/images/reference/androidx/compose/material3/assist-chip.png)\n *\n * This assist chip is applied with a flat style. If you want an elevated style"
                },
                {
                    "name": "use the\n * [ElevatedAssistChip].\n *\n * Example of a flat AssistChip",
                    "type": "* @sample androidx.compose.material3.samples.AssistChipSample\n *\n * @param onClick called when this chip is clicked\n * @param label text label for this chip\n * @param modifier the [Modifier] to be applied to this chip\n * @param enabled controls the enabled state of this chip. When `false`"
                },
                {
                    "name": "this component will not\n * respond to user input",
                    "type": null
                },
                {
                    "name": "and it will appear visually disabled and disabled to accessibility\n * services.\n * @param leadingIcon optional icon at the start of the chip",
                    "type": null
                },
                {
                    "name": "preceding the [label] text\n * @param trailingIcon optional icon at the end of the chip\n * @param shape defines the shape of this chip's container",
                    "type": null
                },
                {
                    "name": "border (when [border] is not null)",
                    "type": null
                },
                {
                    "name": "and\n * shadow (when using [elevation])\n * @param colors [ChipColors] that will be used to resolve the colors used for this chip in\n * different states. See [AssistChipDefaults.assistChipColors].\n * @param elevation [ChipElevation] used to resolve the elevation for this chip in different states.\n * This controls the size of the shadow below the chip. Additionally",
                    "type": null
                },
                {
                    "name": "when the container color is\n * [ColorScheme.surface]",
                    "type": null
                },
                {
                    "name": "this controls the amount of primary color applied as an overlay. See\n * [AssistChipDefaults.assistChipElevation].\n * @param border the border to draw around the container of this chip. Pass `null` for no border.\n * See [AssistChipDefaults.assistChipBorder].\n * @param interactionSource the [MutableInteractionSource] representing the stream of [Interaction]s\n * for this chip. You can create and pass in your own `remember`ed instance to observe\n * [Interaction]s and customize the appearance / behavior of this chip in different states.\n */\n@Suppress(\"DEPRECATION\")\n@Deprecated(\n    \"Maintained for binary compatibility. Use version with AssistChip that take a\" +\n        \" BorderStroke instead\"",
                    "type": null
                },
                {
                    "name": "replaceWith = ReplaceWith(\"AssistChip(onClick",
                    "type": null
                },
                {
                    "name": "label",
                    "type": null
                },
                {
                    "name": "modifier",
                    "type": null
                },
                {
                    "name": "enabled",
                    "type": null
                },
                {
                    "name": "leadingIcon",
                    "type": null
                },
                {
                    "name": "\" +\n        \" trailingIcon",
                    "type": null
                },
                {
                    "name": "shape",
                    "type": null
                },
                {
                    "name": "colors",
                    "type": null
                },
                {
                    "name": "elevation",
                    "type": null
                },
                {
                    "name": "border",
                    "type": null
                },
                {
                    "name": "interactionSource\")",
                    "type": null
                },
                {
                    "name": "level = DeprecationLevel.HIDDEN\n)\n@Composable\nfun AssistChip(\n    onClick",
                    "type": "() -> Unit"
                },
                {
                    "name": "label",
                    "type": "@Composable () -> Unit"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "enabled",
                    "type": "Boolean = true"
                },
                {
                    "name": "leadingIcon",
                    "type": "@Composable (() -> Unit)? = null"
                },
                {
                    "name": "trailingIcon",
                    "type": "@Composable (() -> Unit)? = null"
                },
                {
                    "name": "shape",
                    "type": "Shape = AssistChipDefaults.shape"
                },
                {
                    "name": "colors",
                    "type": "ChipColors = AssistChipDefaults.assistChipColors()"
                },
                {
                    "name": "elevation",
                    "type": "ChipElevation? = AssistChipDefaults.assistChipElevation()"
                },
                {
                    "name": "border",
                    "type": "ChipBorder? = AssistChipDefaults.assistChipBorder()"
                },
                {
                    "name": "interactionSource",
                    "type": "MutableInteractionSource = remember"
                }
            ]
        }
    ],
    "ElevatedAssistChip": [
        {
            "arguments": [
                {
                    "name": "onClick",
                    "type": "() -> Unit"
                },
                {
                    "name": "label",
                    "type": "@Composable () -> Unit"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "enabled",
                    "type": "Boolean = true"
                },
                {
                    "name": "leadingIcon",
                    "type": "@Composable (() -> Unit)? = null"
                },
                {
                    "name": "trailingIcon",
                    "type": "@Composable (() -> Unit)? = null"
                },
                {
                    "name": "shape",
                    "type": "Shape = AssistChipDefaults.shape"
                },
                {
                    "name": "colors",
                    "type": "ChipColors = AssistChipDefaults.elevatedAssistChipColors()"
                },
                {
                    "name": "elevation",
                    "type": "ChipElevation? = AssistChipDefaults.elevatedAssistChipElevation()"
                },
                {
                    "name": "border",
                    "type": "BorderStroke? = null"
                },
                {
                    "name": "interactionSource",
                    "type": "MutableInteractionSource? = null\n) = Chip(\n    modifier = modifier"
                },
                {
                    "name": "onClick = onClick",
                    "type": null
                },
                {
                    "name": "enabled = enabled",
                    "type": null
                },
                {
                    "name": "label = label",
                    "type": null
                },
                {
                    "name": "labelTextStyle = MaterialTheme.typography.fromToken(AssistChipTokens.LabelTextFont)",
                    "type": null
                },
                {
                    "name": "labelColor = colors.labelColor(enabled)",
                    "type": null
                },
                {
                    "name": "leadingIcon = leadingIcon",
                    "type": null
                },
                {
                    "name": "trailingIcon = trailingIcon",
                    "type": null
                },
                {
                    "name": "elevation = elevation",
                    "type": null
                },
                {
                    "name": "colors = colors",
                    "type": null
                },
                {
                    "name": "minHeight = AssistChipDefaults.Height",
                    "type": null
                },
                {
                    "name": "paddingValues = AssistChipPadding",
                    "type": null
                },
                {
                    "name": "shape = shape",
                    "type": null
                },
                {
                    "name": "border = border",
                    "type": null
                },
                {
                    "name": "interactionSource = interactionSource\n)\n\n/**\n * <a href=\"https",
                    "type": "//m3.material.io/components/chips/overview\" class=\"external\" target=\"_blank\">Material Design elevated assist chip</a>.\n *\n * Chips help people enter information"
                },
                {
                    "name": "make selections",
                    "type": null
                },
                {
                    "name": "filter content",
                    "type": null
                },
                {
                    "name": "or trigger actions. Chips\n * can show multiple interactive elements together in the same area",
                    "type": null
                },
                {
                    "name": "such as a list of selectable\n * movie times",
                    "type": null
                },
                {
                    "name": "or a series of email contacts.\n *\n * Assist chips represent smart or automated actions that can span multiple apps",
                    "type": null
                },
                {
                    "name": "such as opening a\n * calendar event from the home screen. Assist chips function as though the user asked an assistant\n * to complete the action. They should appear dynamically and contextually in a UI.\n *\n * ![Assist chip image](https",
                    "type": "//developer.android.com/images/reference/androidx/compose/material3/elevated-assist-chip.png)\n *\n * This assist chip is applied with an elevated style. If you want a flat style"
                },
                {
                    "name": "use the\n * [AssistChip].\n *\n * Example of an elevated AssistChip with a trailing icon",
                    "type": "* @sample androidx.compose.material3.samples.ElevatedAssistChipSample\n *\n * @param onClick called when this chip is clicked\n * @param label text label for this chip\n * @param modifier the [Modifier] to be applied to this chip\n * @param enabled controls the enabled state of this chip. When `false`"
                },
                {
                    "name": "this component will not\n * respond to user input",
                    "type": null
                },
                {
                    "name": "and it will appear visually disabled and disabled to accessibility\n * services.\n * @param leadingIcon optional icon at the start of the chip",
                    "type": null
                },
                {
                    "name": "preceding the [label] text\n * @param trailingIcon optional icon at the end of the chip\n * @param shape defines the shape of this chip's container",
                    "type": null
                },
                {
                    "name": "border (when [border] is not null)",
                    "type": null
                },
                {
                    "name": "and\n * shadow (when using [elevation])\n * @param colors [ChipColors] that will be used to resolve the colors used for this chip in\n * different states. See [AssistChipDefaults.elevatedAssistChipColors].\n * @param elevation [ChipElevation] used to resolve the elevation for this chip in different states.\n * This controls the size of the shadow below the chip. Additionally",
                    "type": null
                },
                {
                    "name": "when the container color is\n * [ColorScheme.surface]",
                    "type": null
                },
                {
                    "name": "this controls the amount of primary color applied as an overlay. See\n * [AssistChipDefaults.elevatedAssistChipElevation].\n * @param border the border to draw around the container of this chip\n * @param interactionSource the [MutableInteractionSource] representing the stream of [Interaction]s\n * for this chip. You can create and pass in your own `remember`ed instance to observe\n * [Interaction]s and customize the appearance / behavior of this chip in different states.\n */\n@Suppress(\"DEPRECATION\")\n@Deprecated(\n    \"Maintained for binary compatibility. Use version with ElevatedAssistChip that take a\" +\n        \" BorderStroke instead\"",
                    "type": null
                },
                {
                    "name": "replaceWith = ReplaceWith(\"ElevatedAssistChip(onClick",
                    "type": null
                },
                {
                    "name": "label",
                    "type": null
                },
                {
                    "name": "modifier",
                    "type": null
                },
                {
                    "name": "enabled",
                    "type": null
                },
                {
                    "name": "\" +\n        \"leadingIcon",
                    "type": null
                },
                {
                    "name": "trailingIcon",
                    "type": null
                },
                {
                    "name": "shape",
                    "type": null
                },
                {
                    "name": "colors",
                    "type": null
                },
                {
                    "name": "elevation",
                    "type": null
                },
                {
                    "name": "border",
                    "type": null
                },
                {
                    "name": "interactionSource\")",
                    "type": null
                },
                {
                    "name": "level = DeprecationLevel.HIDDEN\n)\n@Composable\nfun ElevatedAssistChip(\n    onClick",
                    "type": "() -> Unit"
                },
                {
                    "name": "label",
                    "type": "@Composable () -> Unit"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "enabled",
                    "type": "Boolean = true"
                },
                {
                    "name": "leadingIcon",
                    "type": "@Composable (() -> Unit)? = null"
                },
                {
                    "name": "trailingIcon",
                    "type": "@Composable (() -> Unit)? = null"
                },
                {
                    "name": "shape",
                    "type": "Shape = AssistChipDefaults.shape"
                },
                {
                    "name": "colors",
                    "type": "ChipColors = AssistChipDefaults.elevatedAssistChipColors()"
                },
                {
                    "name": "elevation",
                    "type": "ChipElevation? = AssistChipDefaults.elevatedAssistChipElevation()"
                },
                {
                    "name": "border",
                    "type": "ChipBorder? = null"
                },
                {
                    "name": "interactionSource",
                    "type": "MutableInteractionSource = remember"
                }
            ]
        }
    ],
    "FilterChip": [
        {
            "arguments": [
                {
                    "name": "selected",
                    "type": "Boolean"
                },
                {
                    "name": "onClick",
                    "type": "() -> Unit"
                },
                {
                    "name": "label",
                    "type": "@Composable () -> Unit"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "enabled",
                    "type": "Boolean = true"
                },
                {
                    "name": "leadingIcon",
                    "type": "@Composable (() -> Unit)? = null"
                },
                {
                    "name": "trailingIcon",
                    "type": "@Composable (() -> Unit)? = null"
                },
                {
                    "name": "shape",
                    "type": "Shape = FilterChipDefaults.shape"
                },
                {
                    "name": "colors",
                    "type": "SelectableChipColors = FilterChipDefaults.filterChipColors()"
                },
                {
                    "name": "elevation",
                    "type": "SelectableChipElevation? = FilterChipDefaults.filterChipElevation()"
                },
                {
                    "name": "border",
                    "type": "BorderStroke? = FilterChipDefaults.filterChipBorder(enabled"
                },
                {
                    "name": "selected)",
                    "type": null
                },
                {
                    "name": "interactionSource",
                    "type": "MutableInteractionSource? = null\n) = SelectableChip(\n    selected = selected"
                },
                {
                    "name": "modifier = modifier",
                    "type": null
                },
                {
                    "name": "onClick = onClick",
                    "type": null
                },
                {
                    "name": "enabled = enabled",
                    "type": null
                },
                {
                    "name": "label = label",
                    "type": null
                },
                {
                    "name": "labelTextStyle = MaterialTheme.typography.fromToken(FilterChipTokens.LabelTextFont)",
                    "type": null
                },
                {
                    "name": "leadingIcon = leadingIcon",
                    "type": null
                },
                {
                    "name": "avatar = null",
                    "type": null
                },
                {
                    "name": "trailingIcon = trailingIcon",
                    "type": null
                },
                {
                    "name": "elevation = elevation",
                    "type": null
                },
                {
                    "name": "colors = colors",
                    "type": null
                },
                {
                    "name": "minHeight = FilterChipDefaults.Height",
                    "type": null
                },
                {
                    "name": "paddingValues = FilterChipPadding",
                    "type": null
                },
                {
                    "name": "shape = shape",
                    "type": null
                },
                {
                    "name": "border = border",
                    "type": null
                },
                {
                    "name": "interactionSource = interactionSource\n)\n\n/**\n * <a href=\"https",
                    "type": "//m3.material.io/components/chips/overview\" class=\"external\" target=\"_blank\">Material Design elevated filter chip</a>.\n *\n * Chips help people enter information"
                },
                {
                    "name": "make selections",
                    "type": null
                },
                {
                    "name": "filter content",
                    "type": null
                },
                {
                    "name": "or trigger actions. Chips\n * can show multiple interactive elements together in the same area",
                    "type": null
                },
                {
                    "name": "such as a list of selectable\n * movie times",
                    "type": null
                },
                {
                    "name": "or a series of email contacts.\n *\n * Filter chips use tags or descriptive words to filter content. They can be a good alternative to\n * toggle buttons or checkboxes.\n *\n * ![Filter chip image](https",
                    "type": "//developer.android.com/images/reference/androidx/compose/material3/elevated-filter-chip.png)\n *\n * This filter chip is applied with an elevated style. If you want a flat style"
                },
                {
                    "name": "use the\n * [FilterChip].\n *\n * Tapping on a filter chip toggles its selection state. A selection state [leadingIcon] can be\n * provided (e.g. a checkmark) to be appended at the starting edge of the chip's label.\n *\n * Example of an elevated FilterChip with a trailing icon",
                    "type": "* @sample androidx.compose.material3.samples.ElevatedFilterChipSample\n *\n * @param selected whether this chip is selected or not\n * @param onClick called when this chip is clicked\n * @param label text label for this chip\n * @param modifier the [Modifier] to be applied to this chip\n * @param enabled controls the enabled state of this chip. When `false`"
                },
                {
                    "name": "this component will not\n * respond to user input",
                    "type": null
                },
                {
                    "name": "and it will appear visually disabled and disabled to accessibility\n * services.\n * @param leadingIcon optional icon at the start of the chip",
                    "type": null
                },
                {
                    "name": "preceding the [label] text. When\n * [selected] is true",
                    "type": null
                },
                {
                    "name": "this icon may visually indicate that the chip is selected (for example",
                    "type": null
                },
                {
                    "name": "via a\n * checkmark icon).\n * @param trailingIcon optional icon at the end of the chip\n * @param shape defines the shape of this chip's container",
                    "type": null
                },
                {
                    "name": "border (when [border] is not null)",
                    "type": null
                },
                {
                    "name": "and\n * shadow (when using [elevation])\n * @param colors [SelectableChipColors] that will be used to resolve the colors used for this chip\n * in different states. See [FilterChipDefaults.elevatedFilterChipColors].\n * @param elevation [SelectableChipElevation] used to resolve the elevation for this chip in\n * different states. This controls the size of the shadow below the chip. Additionally",
                    "type": null
                },
                {
                    "name": "when the\n * container color is [ColorScheme.surface]",
                    "type": null
                },
                {
                    "name": "this controls the amount of primary color applied as an\n * overlay. See [FilterChipDefaults.filterChipElevation].\n * @param border the border to draw around the container of this chip. Pass `null` for no border.\n * See [FilterChipDefaults.filterChipBorder].\n * @param interactionSource an optional hoisted [MutableInteractionSource] for observing and\n * emitting [Interaction]s for this chip. You can use this to change the chip's appearance\n * or preview the chip in different states. Note that if `null` is provided",
                    "type": null
                },
                {
                    "name": "interactions will\n * still happen internally.\n */\n@Composable\nfun ElevatedFilterChip(\n    selected",
                    "type": "Boolean"
                },
                {
                    "name": "onClick",
                    "type": "() -> Unit"
                },
                {
                    "name": "label",
                    "type": "@Composable () -> Unit"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "enabled",
                    "type": "Boolean = true"
                },
                {
                    "name": "leadingIcon",
                    "type": "@Composable (() -> Unit)? = null"
                },
                {
                    "name": "trailingIcon",
                    "type": "@Composable (() -> Unit)? = null"
                },
                {
                    "name": "shape",
                    "type": "Shape = FilterChipDefaults.shape"
                },
                {
                    "name": "colors",
                    "type": "SelectableChipColors = FilterChipDefaults.elevatedFilterChipColors()"
                },
                {
                    "name": "elevation",
                    "type": "SelectableChipElevation? = FilterChipDefaults.elevatedFilterChipElevation()"
                },
                {
                    "name": "border",
                    "type": "BorderStroke? = null"
                },
                {
                    "name": "interactionSource",
                    "type": "MutableInteractionSource? = null\n) = SelectableChip(\n    selected = selected"
                },
                {
                    "name": "modifier = modifier",
                    "type": null
                },
                {
                    "name": "onClick = onClick",
                    "type": null
                },
                {
                    "name": "enabled = enabled",
                    "type": null
                },
                {
                    "name": "label = label",
                    "type": null
                },
                {
                    "name": "labelTextStyle = MaterialTheme.typography.fromToken(FilterChipTokens.LabelTextFont)",
                    "type": null
                },
                {
                    "name": "leadingIcon = leadingIcon",
                    "type": null
                },
                {
                    "name": "avatar = null",
                    "type": null
                },
                {
                    "name": "trailingIcon = trailingIcon",
                    "type": null
                },
                {
                    "name": "elevation = elevation",
                    "type": null
                },
                {
                    "name": "colors = colors",
                    "type": null
                },
                {
                    "name": "minHeight = FilterChipDefaults.Height",
                    "type": null
                },
                {
                    "name": "paddingValues = FilterChipPadding",
                    "type": null
                },
                {
                    "name": "shape = shape",
                    "type": null
                },
                {
                    "name": "border = border",
                    "type": null
                },
                {
                    "name": "interactionSource = interactionSource\n)\n\n/**\n * <a href=\"https",
                    "type": "//m3.material.io/components/chips/overview\" class=\"external\" target=\"_blank\">Material Design input chip</a>.\n *\n * Chips help people enter information"
                },
                {
                    "name": "make selections",
                    "type": null
                },
                {
                    "name": "filter content",
                    "type": null
                },
                {
                    "name": "or trigger actions. Chips\n * can show multiple interactive elements together in the same area",
                    "type": null
                },
                {
                    "name": "such as a list of selectable\n * movie times",
                    "type": null
                },
                {
                    "name": "or a series of email contacts.\n *\n * Input chips represent discrete pieces of information entered by a user.\n *\n * ![Input chip image](https",
                    "type": "//developer.android.com/images/reference/androidx/compose/material3/input-chip.png)\n *\n * An Input Chip can have a leading icon or an avatar at its start. In case both are provided"
                },
                {
                    "name": "the\n * avatar will take precedence and will be displayed.\n *\n * Example of an InputChip with a trailing icon",
                    "type": "* @sample androidx.compose.material3.samples.InputChipSample\n *\n * Example of an InputChip with an avatar and a trailing icon:\n * @sample androidx.compose.material3.samples.InputChipWithAvatarSample\n *\n * Input chips should appear in a set and can be horizontally scrollable:\n * @sample androidx.compose.material3.samples.ChipGroupSingleLineSample\n *\n * Alternatively"
                },
                {
                    "name": "use [androidx.compose.foundation.layout.FlowRow] to wrap chips to a new line.\n * @sample androidx.compose.material3.samples.ChipGroupReflowSample\n *\n * @param selected whether this chip is selected or not\n * @param onClick called when this chip is clicked\n * @param label text label for this chip\n * @param modifier the [Modifier] to be applied to this chip\n * @param enabled controls the enabled state of this chip. When `false`",
                    "type": null
                },
                {
                    "name": "this component will not\n * respond to user input",
                    "type": null
                },
                {
                    "name": "and it will appear visually disabled and disabled to accessibility\n * services.\n * @param leadingIcon optional icon at the start of the chip",
                    "type": null
                },
                {
                    "name": "preceding the [label] text\n * @param avatar optional avatar at the start of the chip",
                    "type": null
                },
                {
                    "name": "preceding the [label] text\n * @param trailingIcon optional icon at the end of the chip\n * @param shape defines the shape of this chip's container",
                    "type": null
                },
                {
                    "name": "border (when [border] is not null)",
                    "type": null
                },
                {
                    "name": "and\n * shadow (when using [elevation])\n * @param colors [ChipColors] that will be used to resolve the colors used for this chip in\n * different states. See [InputChipDefaults.inputChipColors].\n * @param elevation [ChipElevation] used to resolve the elevation for this chip in different states.\n * This controls the size of the shadow below the chip. Additionally",
                    "type": null
                },
                {
                    "name": "when the container color is\n * [ColorScheme.surface]",
                    "type": null
                },
                {
                    "name": "this controls the amount of primary color applied as an overlay. See\n * [InputChipDefaults.inputChipElevation].\n * @param border the border to draw around the container of this chip. Pass `null` for no border.\n * See [InputChipDefaults.inputChipBorder].\n * @param interactionSource an optional hoisted [MutableInteractionSource] for observing and\n * emitting [Interaction]s for this chip. You can use this to change the chip's appearance\n * or preview the chip in different states. Note that if `null` is provided",
                    "type": null
                },
                {
                    "name": "interactions will\n * still happen internally.\n */\n@Composable\nfun InputChip(\n    selected",
                    "type": "Boolean"
                },
                {
                    "name": "onClick",
                    "type": "() -> Unit"
                },
                {
                    "name": "label",
                    "type": "@Composable () -> Unit"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "enabled",
                    "type": "Boolean = true"
                },
                {
                    "name": "leadingIcon",
                    "type": "@Composable (() -> Unit)? = null"
                },
                {
                    "name": "avatar",
                    "type": "@Composable (() -> Unit)? = null"
                },
                {
                    "name": "trailingIcon",
                    "type": "@Composable (() -> Unit)? = null"
                },
                {
                    "name": "shape",
                    "type": "Shape = InputChipDefaults.shape"
                },
                {
                    "name": "colors",
                    "type": "SelectableChipColors = InputChipDefaults.inputChipColors()"
                },
                {
                    "name": "elevation",
                    "type": "SelectableChipElevation? = InputChipDefaults.inputChipElevation()"
                },
                {
                    "name": "border",
                    "type": "BorderStroke? = InputChipDefaults.inputChipBorder(enabled"
                },
                {
                    "name": "selected)",
                    "type": null
                },
                {
                    "name": "interactionSource",
                    "type": "MutableInteractionSource? = null"
                },
                {
                    "name": ")",
                    "type": null
                }
            ]
        }
    ],
    "SuggestionChip": [
        {
            "arguments": [
                {
                    "name": "onClick",
                    "type": "() -> Unit"
                },
                {
                    "name": "label",
                    "type": "@Composable () -> Unit"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "enabled",
                    "type": "Boolean = true"
                },
                {
                    "name": "icon",
                    "type": "@Composable (() -> Unit)? = null"
                },
                {
                    "name": "shape",
                    "type": "Shape = SuggestionChipDefaults.shape"
                },
                {
                    "name": "colors",
                    "type": "ChipColors = SuggestionChipDefaults.suggestionChipColors()"
                },
                {
                    "name": "elevation",
                    "type": "ChipElevation? = SuggestionChipDefaults.suggestionChipElevation()"
                },
                {
                    "name": "border",
                    "type": "BorderStroke? = SuggestionChipDefaults.suggestionChipBorder(enabled)"
                },
                {
                    "name": "interactionSource",
                    "type": "MutableInteractionSource? = null"
                },
                {
                    "name": ") = Chip(\n    modifier = modifier",
                    "type": null
                },
                {
                    "name": "onClick = onClick",
                    "type": null
                },
                {
                    "name": "enabled = enabled",
                    "type": null
                },
                {
                    "name": "label = label",
                    "type": null
                },
                {
                    "name": "labelTextStyle = MaterialTheme.typography.fromToken(SuggestionChipTokens.LabelTextFont)",
                    "type": null
                },
                {
                    "name": "labelColor = colors.labelColor(enabled)",
                    "type": null
                },
                {
                    "name": "leadingIcon = icon",
                    "type": null
                },
                {
                    "name": "trailingIcon = null",
                    "type": null
                },
                {
                    "name": "shape = shape",
                    "type": null
                },
                {
                    "name": "colors = colors",
                    "type": null
                },
                {
                    "name": "elevation = elevation",
                    "type": null
                },
                {
                    "name": "border = border",
                    "type": null
                },
                {
                    "name": "minHeight = SuggestionChipDefaults.Height",
                    "type": null
                },
                {
                    "name": "paddingValues = SuggestionChipPadding",
                    "type": null
                },
                {
                    "name": "interactionSource = interactionSource\n)\n\n/**\n * <a href=\"https",
                    "type": "//m3.material.io/components/chips/overview\" class=\"external\" target=\"_blank\">Material Design suggestion chip</a>.\n *\n * Chips help people enter information"
                },
                {
                    "name": "make selections",
                    "type": null
                },
                {
                    "name": "filter content",
                    "type": null
                },
                {
                    "name": "or trigger actions. Chips\n * can show multiple interactive elements together in the same area",
                    "type": null
                },
                {
                    "name": "such as a list of selectable\n * movie times",
                    "type": null
                },
                {
                    "name": "or a series of email contacts.\n *\n * Suggestion chips help narrow a user's intent by presenting dynamically generated suggestions",
                    "type": null
                },
                {
                    "name": "* such as possible responses or search filters.\n *\n * ![Suggestion chip image](https",
                    "type": "//developer.android.com/images/reference/androidx/compose/material3/suggestion-chip.png)\n *\n * This suggestion chip is applied with a flat style. If you want an elevated style"
                },
                {
                    "name": "use the\n * [ElevatedSuggestionChip].\n *\n * Example of a flat SuggestionChip with a trailing icon",
                    "type": "* @sample androidx.compose.material3.samples.SuggestionChipSample\n *\n * @param onClick called when this chip is clicked\n * @param label text label for this chip\n * @param modifier the [Modifier] to be applied to this chip\n * @param enabled controls the enabled state of this chip. When `false`"
                },
                {
                    "name": "this component will not\n * respond to user input",
                    "type": null
                },
                {
                    "name": "and it will appear visually disabled and disabled to accessibility\n * services.\n * @param icon optional icon at the start of the chip",
                    "type": null
                },
                {
                    "name": "preceding the [label] text\n * @param shape defines the shape of this chip's container",
                    "type": null
                },
                {
                    "name": "border (when [border] is not null)",
                    "type": null
                },
                {
                    "name": "and\n * shadow (when using [elevation])\n * @param colors [ChipColors] that will be used to resolve the colors used for this chip in\n * different states. See [SuggestionChipDefaults.suggestionChipColors].\n * @param elevation [ChipElevation] used to resolve the elevation for this chip in different states.\n * This controls the size of the shadow below the chip. Additionally",
                    "type": null
                },
                {
                    "name": "when the container color is\n * [ColorScheme.surface]",
                    "type": null
                },
                {
                    "name": "this controls the amount of primary color applied as an overlay. See\n * [SuggestionChipDefaults.suggestionChipElevation].\n * @param border the border to draw around the container of this chip. Pass `null` for no border.\n * See [SuggestionChipDefaults.suggestionChipBorder].\n * @param interactionSource the [MutableInteractionSource] representing the stream of [Interaction]s\n * for this chip. You can create and pass in your own `remember`ed instance to observe\n * [Interaction]s and customize the appearance / behavior of this chip in different states.\n */\n@Suppress(\"DEPRECATION\")\n@Deprecated(\n    \"Maintained for binary compatibility. Use version with SuggestionChip that take a\" +\n        \" BorderStroke instead\"",
                    "type": null
                },
                {
                    "name": "replaceWith = ReplaceWith(\"SuggestionChip(onClick",
                    "type": null
                },
                {
                    "name": "label",
                    "type": null
                },
                {
                    "name": "modifier",
                    "type": null
                },
                {
                    "name": "enabled",
                    "type": null
                },
                {
                    "name": "icon",
                    "type": null
                },
                {
                    "name": "\" +\n        \" shape",
                    "type": null
                },
                {
                    "name": "colors",
                    "type": null
                },
                {
                    "name": "elevation",
                    "type": null
                },
                {
                    "name": "border",
                    "type": null
                },
                {
                    "name": "interactionSource\")",
                    "type": null
                },
                {
                    "name": "level = DeprecationLevel.HIDDEN\n)\n@Composable\nfun SuggestionChip(\n    onClick",
                    "type": "() -> Unit"
                },
                {
                    "name": "label",
                    "type": "@Composable () -> Unit"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "enabled",
                    "type": "Boolean = true"
                },
                {
                    "name": "icon",
                    "type": "@Composable (() -> Unit)? = null"
                },
                {
                    "name": "shape",
                    "type": "Shape = SuggestionChipDefaults.shape"
                },
                {
                    "name": "colors",
                    "type": "ChipColors = SuggestionChipDefaults.suggestionChipColors()"
                },
                {
                    "name": "elevation",
                    "type": "ChipElevation? = SuggestionChipDefaults.suggestionChipElevation()"
                },
                {
                    "name": "border",
                    "type": "ChipBorder? = SuggestionChipDefaults.suggestionChipBorder()"
                },
                {
                    "name": "interactionSource",
                    "type": "MutableInteractionSource = remember"
                }
            ]
        }
    ],
    "ElevatedSuggestionChip": [
        {
            "arguments": [
                {
                    "name": "onClick",
                    "type": "() -> Unit"
                },
                {
                    "name": "label",
                    "type": "@Composable () -> Unit"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "enabled",
                    "type": "Boolean = true"
                },
                {
                    "name": "icon",
                    "type": "@Composable (() -> Unit)? = null"
                },
                {
                    "name": "shape",
                    "type": "Shape = SuggestionChipDefaults.shape"
                },
                {
                    "name": "colors",
                    "type": "ChipColors = SuggestionChipDefaults.elevatedSuggestionChipColors()"
                },
                {
                    "name": "elevation",
                    "type": "ChipElevation? = SuggestionChipDefaults.elevatedSuggestionChipElevation()"
                },
                {
                    "name": "border",
                    "type": "BorderStroke? = null"
                },
                {
                    "name": "interactionSource",
                    "type": "MutableInteractionSource? = null"
                },
                {
                    "name": ") = Chip(\n    modifier = modifier",
                    "type": null
                },
                {
                    "name": "onClick = onClick",
                    "type": null
                },
                {
                    "name": "enabled = enabled",
                    "type": null
                },
                {
                    "name": "label = label",
                    "type": null
                },
                {
                    "name": "labelTextStyle = MaterialTheme.typography.fromToken(SuggestionChipTokens.LabelTextFont)",
                    "type": null
                },
                {
                    "name": "labelColor = colors.labelColor(enabled)",
                    "type": null
                },
                {
                    "name": "leadingIcon = icon",
                    "type": null
                },
                {
                    "name": "trailingIcon = null",
                    "type": null
                },
                {
                    "name": "elevation = elevation",
                    "type": null
                },
                {
                    "name": "colors = colors",
                    "type": null
                },
                {
                    "name": "minHeight = SuggestionChipDefaults.Height",
                    "type": null
                },
                {
                    "name": "paddingValues = SuggestionChipPadding",
                    "type": null
                },
                {
                    "name": "shape = shape",
                    "type": null
                },
                {
                    "name": "border = border",
                    "type": null
                },
                {
                    "name": "interactionSource = interactionSource\n)\n\n/**\n * <a href=\"https",
                    "type": "//m3.material.io/components/chips/overview\" class=\"external\" target=\"_blank\">Material Design elevated suggestion chip</a>.\n *\n * Chips help people enter information"
                },
                {
                    "name": "make selections",
                    "type": null
                },
                {
                    "name": "filter content",
                    "type": null
                },
                {
                    "name": "or trigger actions. Chips\n * can show multiple interactive elements together in the same area",
                    "type": null
                },
                {
                    "name": "such as a list of selectable\n * movie times",
                    "type": null
                },
                {
                    "name": "or a series of email contacts.\n *\n * Suggestion chips help narrow a user's intent by presenting dynamically generated suggestions",
                    "type": null
                },
                {
                    "name": "* such as possible responses or search filters.\n *\n * ![Suggestion chip image](https",
                    "type": "//developer.android.com/images/reference/androidx/compose/material3/elevated-suggestion-chip.png)\n *\n * This suggestion chip is applied with an elevated style. If you want a flat style"
                },
                {
                    "name": "use the\n * [SuggestionChip].\n *\n * Example of an elevated SuggestionChip with a trailing icon",
                    "type": "* @sample androidx.compose.material3.samples.ElevatedSuggestionChipSample\n *\n * @param onClick called when this chip is clicked\n * @param label text label for this chip\n * @param modifier the [Modifier] to be applied to this chip\n * @param enabled controls the enabled state of this chip. When `false`"
                },
                {
                    "name": "this component will not\n * respond to user input",
                    "type": null
                },
                {
                    "name": "and it will appear visually disabled and disabled to accessibility\n * services.\n * @param icon optional icon at the start of the chip",
                    "type": null
                },
                {
                    "name": "preceding the [label] text\n * @param shape defines the shape of this chip's container",
                    "type": null
                },
                {
                    "name": "border (when [border] is not null)",
                    "type": null
                },
                {
                    "name": "and\n * shadow (when using [elevation])\n * @param colors [ChipColors] that will be used to resolve the colors used for this chip in\n * @param elevation [ChipElevation] used to resolve the elevation for this chip in different states.\n * This controls the size of the shadow below the chip. Additionally",
                    "type": null
                },
                {
                    "name": "when the container color is\n * [ColorScheme.surface]",
                    "type": null
                },
                {
                    "name": "this controls the amount of primary color applied as an overlay. See\n * [Surface] and [SuggestionChipDefaults.elevatedSuggestionChipElevation].\n * @param border the border to draw around the container of this chip\n * different states. See [SuggestionChipDefaults.elevatedSuggestionChipColors].\n * @param interactionSource the [MutableInteractionSource] representing the stream of [Interaction]s\n * for this chip. You can create and pass in your own `remember`ed instance to observe\n * [Interaction]s and customize the appearance / behavior of this chip in different states.\n */\n@Suppress(\"DEPRECATION\")\n@Deprecated(\n    \"Maintained for binary compatibility. Use version with ElevatedSuggestionChip that take\" +\n        \" a BorderStroke instead\"",
                    "type": null
                },
                {
                    "name": "replaceWith = ReplaceWith(\"ElevatedSuggestionChip(onClick",
                    "type": null
                },
                {
                    "name": "label",
                    "type": null
                },
                {
                    "name": "modifier",
                    "type": null
                },
                {
                    "name": "enabled",
                    "type": null
                },
                {
                    "name": "\" +\n        \" icon",
                    "type": null
                },
                {
                    "name": "shape",
                    "type": null
                },
                {
                    "name": "colors",
                    "type": null
                },
                {
                    "name": "elevation",
                    "type": null
                },
                {
                    "name": "border",
                    "type": null
                },
                {
                    "name": "interactionSource\")",
                    "type": null
                },
                {
                    "name": "level = DeprecationLevel.HIDDEN\n)\n@Composable\nfun ElevatedSuggestionChip(\n    onClick",
                    "type": "() -> Unit"
                },
                {
                    "name": "label",
                    "type": "@Composable () -> Unit"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "enabled",
                    "type": "Boolean = true"
                },
                {
                    "name": "icon",
                    "type": "@Composable (() -> Unit)? = null"
                },
                {
                    "name": "shape",
                    "type": "Shape = SuggestionChipDefaults.shape"
                },
                {
                    "name": "colors",
                    "type": "ChipColors = SuggestionChipDefaults.elevatedSuggestionChipColors()"
                },
                {
                    "name": "elevation",
                    "type": "ChipElevation? = SuggestionChipDefaults.elevatedSuggestionChipElevation()"
                },
                {
                    "name": "border",
                    "type": "ChipBorder? = null"
                },
                {
                    "name": "interactionSource",
                    "type": "MutableInteractionSource = remember"
                }
            ]
        }
    ],
    "assistChipColors": [
        {
            "arguments": [
                {
                    "name": ") = MaterialTheme.colorScheme.defaultAssistChipColors\n\n    /**\n     * Creates a [ChipColors] that represents the default container",
                    "type": null
                },
                {
                    "name": "label",
                    "type": null
                },
                {
                    "name": "and icon colors used in\n     * a flat [AssistChip].\n     *\n     * @param containerColor the container color of this chip when enabled\n     * @param labelColor the label color of this chip when enabled\n     * @param leadingIconContentColor the color of this chip's start icon when enabled\n     * @param trailingIconContentColor the color of this chip's end icon when enabled\n     * @param disabledContainerColor the container color of this chip when not enabled\n     * @param disabledLabelColor the label color of this chip when not enabled\n     * @param disabledLeadingIconContentColor the color of this chip's start icon when not enabled\n     * @param disabledTrailingIconContentColor the color of this chip's end icon when not enabled\n     */\n    @Composable\n    fun assistChipColors(\n        containerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "labelColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "leadingIconContentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "trailingIconContentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledContainerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledLabelColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledLeadingIconContentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledTrailingIconContentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": ")",
                    "type": "ChipColors = MaterialTheme.colorScheme.defaultAssistChipColors.copy(\n        containerColor = containerColor"
                },
                {
                    "name": "labelColor = labelColor",
                    "type": null
                },
                {
                    "name": "leadingIconContentColor = leadingIconContentColor",
                    "type": null
                },
                {
                    "name": "trailingIconContentColor = trailingIconContentColor",
                    "type": null
                },
                {
                    "name": "disabledContainerColor = disabledContainerColor",
                    "type": null
                },
                {
                    "name": "disabledLabelColor = disabledLabelColor",
                    "type": null
                },
                {
                    "name": "disabledLeadingIconContentColor = disabledLeadingIconContentColor",
                    "type": null
                },
                {
                    "name": "disabledTrailingIconContentColor = disabledTrailingIconContentColor\n    )\n\n    internal val ColorScheme.defaultAssistChipColors",
                    "type": "ChipColors\n        get()"
                }
            ]
        }
    ],
    "assistChipElevation": [
        {
            "arguments": [
                {
                    "name": "elevation",
                    "type": "Dp = AssistChipTokens.FlatContainerElevation"
                },
                {
                    "name": "pressedElevation",
                    "type": "Dp = elevation"
                },
                {
                    "name": "focusedElevation",
                    "type": "Dp = elevation"
                },
                {
                    "name": "hoveredElevation",
                    "type": "Dp = elevation"
                },
                {
                    "name": "draggedElevation",
                    "type": "Dp = AssistChipTokens.DraggedContainerElevation"
                },
                {
                    "name": "disabledElevation",
                    "type": "Dp = elevation\n    ): ChipElevation = ChipElevation(\n        elevation = elevation"
                },
                {
                    "name": "pressedElevation = pressedElevation",
                    "type": null
                },
                {
                    "name": "focusedElevation = focusedElevation",
                    "type": null
                },
                {
                    "name": "hoveredElevation = hoveredElevation",
                    "type": null
                },
                {
                    "name": "draggedElevation = draggedElevation",
                    "type": null
                },
                {
                    "name": "disabledElevation = disabledElevation\n    )\n\n    /**\n     * Creates a [ChipBorder] that represents the default border used in a flat [AssistChip].\n     *\n     * @param enabled whether the chip is enabled\n     * @param borderColor the border color of this chip when enabled\n     * @param disabledBorderColor the border color of this chip when not enabled\n     * @param borderWidth the border stroke width of this chip\n     */\n    @Composable\n    fun assistChipBorder(\n        enabled",
                    "type": "Boolean"
                },
                {
                    "name": "borderColor",
                    "type": "Color = AssistChipTokens.FlatOutlineColor.value"
                },
                {
                    "name": "disabledBorderColor",
                    "type": "Color = AssistChipTokens.FlatDisabledOutlineColor.value\n            .copy(alpha = AssistChipTokens.FlatDisabledOutlineOpacity)"
                },
                {
                    "name": "borderWidth",
                    "type": "Dp = AssistChipTokens.FlatOutlineWidth"
                },
                {
                    "name": ")",
                    "type": "BorderStroke = BorderStroke(borderWidth"
                },
                {
                    "name": "if (enabled) borderColor else disabledBorderColor)\n\n    /**\n     * Creates a [ChipBorder] that represents the default border used in a flat [AssistChip].\n     *\n     * @param borderColor the border color of this chip when enabled\n     * @param disabledBorderColor the border color of this chip when not enabled\n     * @param borderWidth the border stroke width of this chip\n     */\n    @Suppress(\"DEPRECATION\")\n    @Deprecated(\n        \"Maintained for binary compatibility. Use the assistChipBorder function that returns\" +\n            \" BorderStroke instead\"",
                    "type": null
                },
                {
                    "name": "replaceWith = ReplaceWith(\"assistChipBorder(enabled",
                    "type": null
                },
                {
                    "name": "borderColor",
                    "type": null
                },
                {
                    "name": "\" +\n            \" disabledBorderColor",
                    "type": null
                },
                {
                    "name": "borderWidth)\")",
                    "type": null
                },
                {
                    "name": "level = DeprecationLevel.WARNING\n    )\n    @Composable\n    fun assistChipBorder(\n        borderColor",
                    "type": "Color = AssistChipTokens.FlatOutlineColor.value"
                },
                {
                    "name": "disabledBorderColor",
                    "type": "Color = AssistChipTokens.FlatDisabledOutlineColor.value\n            .copy(alpha = AssistChipTokens.FlatDisabledOutlineOpacity)"
                },
                {
                    "name": "borderWidth",
                    "type": "Dp = AssistChipTokens.FlatOutlineWidth"
                },
                {
                    "name": ")",
                    "type": "ChipBorder = ChipBorder(\n        borderColor = borderColor"
                },
                {
                    "name": "disabledBorderColor = disabledBorderColor",
                    "type": null
                },
                {
                    "name": "borderWidth = borderWidth\n    )\n\n    /**\n     * Creates a [ChipColors] that represents the default container",
                    "type": null
                },
                {
                    "name": "label",
                    "type": null
                },
                {
                    "name": "and icon colors used in\n     * an elevated [AssistChip].\n     */\n    @Composable\n    fun elevatedAssistChipColors() = MaterialTheme.colorScheme.defaultElevatedAssistChipColors\n\n/**\n     * Creates a [ChipColors] that represents the default container",
                    "type": null
                },
                {
                    "name": "label",
                    "type": null
                },
                {
                    "name": "and icon colors used in\n     * an elevated [AssistChip].\n     *\n     * @param containerColor the container color of this chip when enabled\n     * @param labelColor the label color of this chip when enabled\n     * @param leadingIconContentColor the color of this chip's start icon when enabled\n     * @param trailingIconContentColor the color of this chip's end icon when enabled\n     * @param disabledContainerColor the container color of this chip when not enabled\n     * @param disabledLabelColor the label color of this chip when not enabled\n     * @param disabledLeadingIconContentColor the color of this chip's start icon when not enabled\n     * @param disabledTrailingIconContentColor the color of this chip's end icon when not enabled\n     */\n    @Composable\n    fun elevatedAssistChipColors(\n        containerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "labelColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "leadingIconContentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "trailingIconContentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledContainerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledLabelColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledLeadingIconContentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledTrailingIconContentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": ")",
                    "type": "ChipColors = MaterialTheme.colorScheme.defaultElevatedSuggestionChipColors.copy(\n        containerColor = containerColor"
                },
                {
                    "name": "labelColor = labelColor",
                    "type": null
                },
                {
                    "name": "leadingIconContentColor = leadingIconContentColor",
                    "type": null
                },
                {
                    "name": "trailingIconContentColor = trailingIconContentColor",
                    "type": null
                },
                {
                    "name": "disabledContainerColor = disabledContainerColor",
                    "type": null
                },
                {
                    "name": "disabledLabelColor = disabledLabelColor",
                    "type": null
                },
                {
                    "name": "disabledLeadingIconContentColor = disabledLeadingIconContentColor",
                    "type": null
                },
                {
                    "name": "disabledTrailingIconContentColor = disabledTrailingIconContentColor\n    )\n\n    internal val ColorScheme.defaultElevatedAssistChipColors",
                    "type": "ChipColors\n        get()"
                }
            ]
        }
    ],
    "elevatedAssistChipElevation": [
        {
            "arguments": [
                {
                    "name": "elevation",
                    "type": "Dp = AssistChipTokens.ElevatedContainerElevation"
                },
                {
                    "name": "pressedElevation",
                    "type": "Dp = AssistChipTokens.ElevatedPressedContainerElevation"
                },
                {
                    "name": "focusedElevation",
                    "type": "Dp = AssistChipTokens.ElevatedFocusContainerElevation"
                },
                {
                    "name": "hoveredElevation",
                    "type": "Dp = AssistChipTokens.ElevatedHoverContainerElevation"
                },
                {
                    "name": "draggedElevation",
                    "type": "Dp = AssistChipTokens.DraggedContainerElevation"
                },
                {
                    "name": "disabledElevation",
                    "type": "Dp = AssistChipTokens.ElevatedDisabledContainerElevation\n    ): ChipElevation = ChipElevation(\n        elevation = elevation"
                },
                {
                    "name": "pressedElevation = pressedElevation",
                    "type": null
                },
                {
                    "name": "focusedElevation = focusedElevation",
                    "type": null
                },
                {
                    "name": "hoveredElevation = hoveredElevation",
                    "type": null
                },
                {
                    "name": "draggedElevation = draggedElevation",
                    "type": null
                },
                {
                    "name": "disabledElevation = disabledElevation\n    )\n\n    /** Default shape of an assist chip. */\n    val shape",
                    "type": "Shape @Composable get() = AssistChipTokens.ContainerShape.value\n}\n\n/**\n * Contains the baseline values used by [FilterChip].\n */\nobject FilterChipDefaults"
                }
            ]
        }
    ],
    "filterChipColors": [
        {
            "arguments": [
                {
                    "name": ") = MaterialTheme.colorScheme.defaultFilterChipColors\n\n    /**\n     * Creates a [SelectableChipColors] that represents the default container and content colors\n     * used in a flat [FilterChip].\n     *\n     * @param containerColor the container color of this chip when enabled\n     * @param labelColor the label color of this chip when enabled\n     * @param iconColor the color of this chip's start and end icons when enabled\n     * @param disabledContainerColor the container color of this chip when not enabled\n     * @param disabledLabelColor the label color of this chip when not enabled\n     * @param disabledLeadingIconColor the color of this chip's start icon when not enabled\n     * @param disabledTrailingIconColor the color of this chip's end icon when not enabled\n     * @param selectedContainerColor the container color of this chip when selected\n     * @param disabledSelectedContainerColor the container color of this chip when not enabled and\n     * selected\n     * @param selectedLabelColor the label color of this chip when selected\n     * @param selectedLeadingIconColor the color of this chip's start icon when selected\n     * @param selectedTrailingIconColor the color of this chip's end icon when selected\n     */\n    @Composable\n    fun filterChipColors(\n        containerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "labelColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "iconColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledContainerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledLabelColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledLeadingIconColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledTrailingIconColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "selectedContainerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledSelectedContainerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "selectedLabelColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "selectedLeadingIconColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "selectedTrailingIconColor",
                    "type": "Color = Color.Unspecified\n    ): SelectableChipColors = MaterialTheme.colorScheme.defaultFilterChipColors.copy(\n        containerColor = containerColor"
                },
                {
                    "name": "labelColor = labelColor",
                    "type": null
                },
                {
                    "name": "leadingIconColor = iconColor",
                    "type": null
                },
                {
                    "name": "trailingIconColor = iconColor",
                    "type": null
                },
                {
                    "name": "disabledContainerColor = disabledContainerColor",
                    "type": null
                },
                {
                    "name": "disabledLabelColor = disabledLabelColor",
                    "type": null
                },
                {
                    "name": "disabledLeadingIconColor = disabledLeadingIconColor",
                    "type": null
                },
                {
                    "name": "disabledTrailingIconColor = disabledTrailingIconColor",
                    "type": null
                },
                {
                    "name": "selectedContainerColor = selectedContainerColor",
                    "type": null
                },
                {
                    "name": "disabledSelectedContainerColor = disabledSelectedContainerColor",
                    "type": null
                },
                {
                    "name": "selectedLabelColor = selectedLabelColor",
                    "type": null
                },
                {
                    "name": "selectedLeadingIconColor = selectedLeadingIconColor",
                    "type": null
                },
                {
                    "name": "selectedTrailingIconColor = selectedTrailingIconColor\n    )\n\n    internal val ColorScheme.defaultFilterChipColors",
                    "type": "SelectableChipColors\n        get()"
                }
            ]
        }
    ],
    "filterChipElevation": [
        {
            "arguments": [
                {
                    "name": "elevation",
                    "type": "Dp = FilterChipTokens.FlatContainerElevation"
                },
                {
                    "name": "pressedElevation",
                    "type": "Dp = FilterChipTokens.FlatSelectedPressedContainerElevation"
                },
                {
                    "name": "focusedElevation",
                    "type": "Dp = FilterChipTokens.FlatSelectedFocusContainerElevation"
                },
                {
                    "name": "hoveredElevation",
                    "type": "Dp = FilterChipTokens.FlatSelectedHoverContainerElevation"
                },
                {
                    "name": "draggedElevation",
                    "type": "Dp = FilterChipTokens.DraggedContainerElevation"
                },
                {
                    "name": "disabledElevation",
                    "type": "Dp = elevation\n    ): SelectableChipElevation = SelectableChipElevation(\n        elevation = elevation"
                },
                {
                    "name": "pressedElevation = pressedElevation",
                    "type": null
                },
                {
                    "name": "focusedElevation = focusedElevation",
                    "type": null
                },
                {
                    "name": "hoveredElevation = hoveredElevation",
                    "type": null
                },
                {
                    "name": "draggedElevation = draggedElevation",
                    "type": null
                },
                {
                    "name": "disabledElevation = disabledElevation\n    )\n\n    /**\n     * Creates a [BorderStroke] that represents the default border used in a flat\n     * [FilterChip].\n     *\n     * @param selected whether this chip is selected or not\n     * @param enabled controls the enabled state of this chip. When `false`",
                    "type": null
                },
                {
                    "name": "this component will not\n     * respond to user input",
                    "type": null
                },
                {
                    "name": "and it will appear visually disabled and disabled to accessibility\n     * services.\n     * @param borderColor the border color of this chip when enabled and not selected\n     * @param selectedBorderColor the border color of this chip when enabled and selected\n     * @param disabledBorderColor the border color of this chip when not enabled and not\n     * selected\n     * @param disabledSelectedBorderColor the border color of this chip when not enabled\n     * but selected\n     * @param borderWidth the border stroke width of this chip when not selected\n     * @param selectedBorderWidth the border stroke width of this chip when selected\n     */\n    @Composable\n    fun filterChipBorder(\n        enabled",
                    "type": "Boolean"
                },
                {
                    "name": "selected",
                    "type": "Boolean"
                },
                {
                    "name": "borderColor",
                    "type": "Color = FilterChipTokens.FlatUnselectedOutlineColor.value"
                },
                {
                    "name": "selectedBorderColor",
                    "type": "Color = Color.Transparent"
                },
                {
                    "name": "disabledBorderColor",
                    "type": "Color = FilterChipTokens.FlatDisabledUnselectedOutlineColor.value\n            .copy(alpha = FilterChipTokens.FlatDisabledUnselectedOutlineOpacity)"
                },
                {
                    "name": "disabledSelectedBorderColor",
                    "type": "Color = Color.Transparent"
                },
                {
                    "name": "borderWidth",
                    "type": "Dp = FilterChipTokens.FlatUnselectedOutlineWidth"
                },
                {
                    "name": "selectedBorderWidth",
                    "type": "Dp = FilterChipTokens.FlatSelectedOutlineWidth"
                },
                {
                    "name": ")",
                    "type": "BorderStroke"
                }
            ]
        }
    ],
    "elevatedFilterChipColors": [
        {
            "arguments": [
                {
                    "name": ") = MaterialTheme.colorScheme.defaultElevatedFilterChipColors\n\n    /**\n     * Creates a [SelectableChipColors] that represents the default container and content colors\n     * used in an elevated [FilterChip].\n     *\n     * @param containerColor the container color of this chip when enabled\n     * @param labelColor the label color of this chip when enabled\n     * @param iconColor the color of this chip's start and end icons when enabled\n     * @param disabledContainerColor the container color of this chip when not enabled\n     * @param disabledLabelColor the label color of this chip when not enabled\n     * @param disabledLeadingIconColor the color of this chip's start icon when not enabled\n     * @param disabledTrailingIconColor the color of this chip's end icon when not enabled\n     * @param selectedContainerColor the container color of this chip when selected\n     * @param disabledSelectedContainerColor the container color of this chip when not enabled and\n     * selected\n     * @param selectedLabelColor the label color of this chip when selected\n     * @param selectedLeadingIconColor the color of this chip's start icon when selected\n     * @param selectedTrailingIconColor the color of this chip's end icon when selected\n     */\n    @Composable\n    fun elevatedFilterChipColors(\n        containerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "labelColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "iconColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledContainerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledLabelColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledLeadingIconColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledTrailingIconColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "selectedContainerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledSelectedContainerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "selectedLabelColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "selectedLeadingIconColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "selectedTrailingIconColor",
                    "type": "Color = Color.Unspecified\n    ): SelectableChipColors = MaterialTheme.colorScheme.defaultElevatedFilterChipColors.copy(\n        containerColor = containerColor"
                },
                {
                    "name": "labelColor = labelColor",
                    "type": null
                },
                {
                    "name": "leadingIconColor = iconColor",
                    "type": null
                },
                {
                    "name": "trailingIconColor = iconColor",
                    "type": null
                },
                {
                    "name": "disabledContainerColor = disabledContainerColor",
                    "type": null
                },
                {
                    "name": "disabledLabelColor = disabledLabelColor",
                    "type": null
                },
                {
                    "name": "disabledLeadingIconColor = disabledLeadingIconColor",
                    "type": null
                },
                {
                    "name": "disabledTrailingIconColor = disabledTrailingIconColor",
                    "type": null
                },
                {
                    "name": "selectedContainerColor = selectedContainerColor",
                    "type": null
                },
                {
                    "name": "disabledSelectedContainerColor = disabledSelectedContainerColor",
                    "type": null
                },
                {
                    "name": "selectedLabelColor = selectedLabelColor",
                    "type": null
                },
                {
                    "name": "selectedLeadingIconColor = selectedLeadingIconColor",
                    "type": null
                },
                {
                    "name": "selectedTrailingIconColor = selectedTrailingIconColor\n    )\n\n    internal val ColorScheme.defaultElevatedFilterChipColors",
                    "type": "SelectableChipColors\n        get()"
                }
            ]
        }
    ],
    "elevatedFilterChipElevation": [
        {
            "arguments": [
                {
                    "name": "elevation",
                    "type": "Dp = FilterChipTokens.ElevatedContainerElevation"
                },
                {
                    "name": "pressedElevation",
                    "type": "Dp = FilterChipTokens.ElevatedPressedContainerElevation"
                },
                {
                    "name": "focusedElevation",
                    "type": "Dp = FilterChipTokens.ElevatedFocusContainerElevation"
                },
                {
                    "name": "hoveredElevation",
                    "type": "Dp = FilterChipTokens.ElevatedHoverContainerElevation"
                },
                {
                    "name": "draggedElevation",
                    "type": "Dp = FilterChipTokens.DraggedContainerElevation"
                },
                {
                    "name": "disabledElevation",
                    "type": "Dp = FilterChipTokens.ElevatedDisabledContainerElevation\n    ): SelectableChipElevation = SelectableChipElevation(\n        elevation = elevation"
                },
                {
                    "name": "pressedElevation = pressedElevation",
                    "type": null
                },
                {
                    "name": "focusedElevation = focusedElevation",
                    "type": null
                },
                {
                    "name": "hoveredElevation = hoveredElevation",
                    "type": null
                },
                {
                    "name": "draggedElevation = draggedElevation",
                    "type": null
                },
                {
                    "name": "disabledElevation = disabledElevation\n    )\n\n    /** Default shape of a filter chip. */\n    val shape",
                    "type": "Shape @Composable get() = FilterChipTokens.ContainerShape.value\n}\n\n/**\n * Contains the baseline values used by an [InputChip].\n */\nobject InputChipDefaults"
                }
            ]
        }
    ],
    "inputChipColors": [
        {
            "arguments": [
                {
                    "name": ") = MaterialTheme.colorScheme.defaultInputChipColors\n\n/**\n     * Creates a [SelectableChipColors] that represents the default container",
                    "type": null
                },
                {
                    "name": "label",
                    "type": null
                },
                {
                    "name": "and icon\n     * colors used in an [InputChip].\n     *\n     * @param containerColor the container color of this chip when enabled\n     * @param labelColor the label color of this chip when enabled\n     * @param leadingIconColor the color of this chip's start icon when enabled\n     * @param trailingIconColor the color of this chip's start end icon when enabled\n     * @param disabledContainerColor the container color of this chip when not enabled\n     * @param disabledLabelColor the label color of this chip when not enabled\n     * @param disabledLeadingIconColor the color of this chip's start icon when not enabled\n     * @param disabledTrailingIconColor the color of this chip's end icon when not enabled\n     * @param selectedContainerColor the container color of this chip when selected\n     * @param disabledSelectedContainerColor the container color of this chip when not enabled and\n     * selected\n     * @param selectedLabelColor the label color of this chip when selected\n     * @param selectedLeadingIconColor the color of this chip's start icon when selected\n     * @param selectedTrailingIconColor the color of this chip's end icon when selected\n     */\n    @Composable\n    fun inputChipColors(\n        containerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "labelColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "leadingIconColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "trailingIconColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledContainerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledLabelColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledLeadingIconColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledTrailingIconColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "selectedContainerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledSelectedContainerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "selectedLabelColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "selectedLeadingIconColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "selectedTrailingIconColor",
                    "type": "Color = Color.Unspecified\n    ): SelectableChipColors = MaterialTheme.colorScheme.defaultInputChipColors.copy(\n        containerColor = containerColor"
                },
                {
                    "name": "labelColor = labelColor",
                    "type": null
                },
                {
                    "name": "leadingIconColor = leadingIconColor",
                    "type": null
                },
                {
                    "name": "trailingIconColor = trailingIconColor",
                    "type": null
                },
                {
                    "name": "disabledContainerColor = disabledContainerColor",
                    "type": null
                },
                {
                    "name": "disabledLabelColor = disabledLabelColor",
                    "type": null
                },
                {
                    "name": "disabledLeadingIconColor = disabledLeadingIconColor",
                    "type": null
                },
                {
                    "name": "disabledTrailingIconColor = disabledTrailingIconColor",
                    "type": null
                },
                {
                    "name": "selectedContainerColor = selectedContainerColor",
                    "type": null
                },
                {
                    "name": "disabledSelectedContainerColor = disabledSelectedContainerColor",
                    "type": null
                },
                {
                    "name": "selectedLabelColor = selectedLabelColor",
                    "type": null
                },
                {
                    "name": "selectedLeadingIconColor = selectedLeadingIconColor",
                    "type": null
                },
                {
                    "name": "selectedTrailingIconColor = selectedTrailingIconColor\n    )\n\n    internal val ColorScheme.defaultInputChipColors",
                    "type": "SelectableChipColors\n        get()"
                }
            ]
        }
    ],
    "inputChipElevation": [
        {
            "arguments": [
                {
                    "name": "elevation",
                    "type": "Dp = InputChipTokens.ContainerElevation"
                },
                {
                    "name": "pressedElevation",
                    "type": "Dp = elevation"
                },
                {
                    "name": "focusedElevation",
                    "type": "Dp = elevation"
                },
                {
                    "name": "hoveredElevation",
                    "type": "Dp = elevation"
                },
                {
                    "name": "draggedElevation",
                    "type": "Dp = InputChipTokens.DraggedContainerElevation"
                },
                {
                    "name": "disabledElevation",
                    "type": "Dp = elevation\n    ): SelectableChipElevation = SelectableChipElevation(\n        elevation = elevation"
                },
                {
                    "name": "pressedElevation = pressedElevation",
                    "type": null
                },
                {
                    "name": "focusedElevation = focusedElevation",
                    "type": null
                },
                {
                    "name": "hoveredElevation = hoveredElevation",
                    "type": null
                },
                {
                    "name": "draggedElevation = draggedElevation",
                    "type": null
                },
                {
                    "name": "disabledElevation = disabledElevation\n    )\n\n    /**\n     * Creates a [BorderStroke] that represents the default border used in an [InputChip].\n     *\n     * @param selected whether this chip is selected or not\n     * @param enabled controls the enabled state of this chip. When `false`",
                    "type": null
                },
                {
                    "name": "this component will not\n     * respond to user input",
                    "type": null
                },
                {
                    "name": "and it will appear visually disabled and disabled to accessibility\n     * services.\n     * @param borderColor the border color of this chip when enabled and not selected\n     * @param selectedBorderColor the border color of this chip when enabled and selected\n     * @param disabledBorderColor the border color of this chip when not enabled and not\n     * selected\n     * @param disabledSelectedBorderColor the border color of this chip when not enabled\n     * but selected\n     * @param borderWidth the border stroke width of this chip when not selected\n     * @param selectedBorderWidth the border stroke width of this chip when selected\n     */\n    @Composable\n    fun inputChipBorder(\n        enabled",
                    "type": "Boolean"
                },
                {
                    "name": "selected",
                    "type": "Boolean"
                },
                {
                    "name": "borderColor",
                    "type": "Color = InputChipTokens.UnselectedOutlineColor.value"
                },
                {
                    "name": "selectedBorderColor",
                    "type": "Color = Color.Transparent"
                },
                {
                    "name": "disabledBorderColor",
                    "type": "Color = InputChipTokens.DisabledUnselectedOutlineColor.value\n            .copy(alpha = InputChipTokens.DisabledUnselectedOutlineOpacity)"
                },
                {
                    "name": "disabledSelectedBorderColor",
                    "type": "Color = Color.Transparent"
                },
                {
                    "name": "borderWidth",
                    "type": "Dp = InputChipTokens.UnselectedOutlineWidth"
                },
                {
                    "name": "selectedBorderWidth",
                    "type": "Dp = InputChipTokens.SelectedOutlineWidth"
                },
                {
                    "name": ")",
                    "type": "BorderStroke"
                }
            ]
        }
    ],
    "suggestionChipColors": [
        {
            "arguments": [
                {
                    "name": ") = MaterialTheme.colorScheme.defaultSuggestionChipColors\n\n    /**\n     * Creates a [ChipColors] that represents the default container",
                    "type": null
                },
                {
                    "name": "label",
                    "type": null
                },
                {
                    "name": "and icon colors used in\n     * a flat [SuggestionChip].\n     *\n     * @param containerColor the container color of this chip when enabled\n     * @param labelColor the label color of this chip when enabled\n     * @param iconContentColor the color of this chip's icon when enabled\n     * @param disabledContainerColor the container color of this chip when not enabled\n     * @param disabledLabelColor the label color of this chip when not enabled\n     * @param disabledIconContentColor the color of this chip's icon when not enabled\n     */\n    @Composable\n    fun suggestionChipColors(\n        containerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "labelColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "iconContentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledContainerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledLabelColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledIconContentColor",
                    "type": "Color = Color.Unspecified\n    ): ChipColors = MaterialTheme.colorScheme.defaultSuggestionChipColors.copy(\n        containerColor = containerColor"
                },
                {
                    "name": "labelColor = labelColor",
                    "type": null
                },
                {
                    "name": "leadingIconContentColor = iconContentColor",
                    "type": null
                },
                {
                    "name": "trailingIconContentColor = Color.Unspecified",
                    "type": null
                },
                {
                    "name": "disabledContainerColor = disabledContainerColor",
                    "type": null
                },
                {
                    "name": "disabledLabelColor = disabledLabelColor",
                    "type": null
                },
                {
                    "name": "disabledLeadingIconContentColor = disabledIconContentColor",
                    "type": null
                },
                {
                    "name": "disabledTrailingIconContentColor = Color.Unspecified)\n\n    /**\n     * Creates a [ChipElevation] that will animate between the provided values according to the\n     * Material specification for a flat [SuggestionChip].\n     *\n     * @param elevation the elevation used when the chip is has no other\n     * [Interaction]s\n     * @param pressedElevation the elevation used when the chip is pressed\n     * @param focusedElevation the elevation used when the chip is focused\n     * @param hoveredElevation the elevation used when the chip is hovered\n     * @param draggedElevation the elevation used when the chip is dragged\n     * @param disabledElevation the elevation used when the chip is not enabled\n     */\n    @Composable\n    fun suggestionChipElevation(\n        elevation",
                    "type": "Dp = SuggestionChipTokens.FlatContainerElevation"
                },
                {
                    "name": "pressedElevation",
                    "type": "Dp = elevation"
                },
                {
                    "name": "focusedElevation",
                    "type": "Dp = elevation"
                },
                {
                    "name": "hoveredElevation",
                    "type": "Dp = elevation"
                },
                {
                    "name": "draggedElevation",
                    "type": "Dp = SuggestionChipTokens.DraggedContainerElevation"
                },
                {
                    "name": "disabledElevation",
                    "type": "Dp = elevation\n    ): ChipElevation = ChipElevation(\n        elevation = elevation"
                },
                {
                    "name": "pressedElevation = pressedElevation",
                    "type": null
                },
                {
                    "name": "focusedElevation = focusedElevation",
                    "type": null
                },
                {
                    "name": "hoveredElevation = hoveredElevation",
                    "type": null
                },
                {
                    "name": "draggedElevation = draggedElevation",
                    "type": null
                },
                {
                    "name": "disabledElevation = disabledElevation\n    )\n\n    /**\n     * Creates a [BorderStroke] that represents the default border used in a flat [SuggestionChip].\n     *\n     * @param enabled whether the chip is enabled\n     * @param borderColor the border color of this chip when enabled\n     * @param disabledBorderColor the border color of this chip when not enabled\n     * @param borderWidth the border stroke width of this chip\n     */\n    @Composable\n    fun suggestionChipBorder(\n        enabled",
                    "type": "Boolean"
                },
                {
                    "name": "borderColor",
                    "type": "Color = SuggestionChipTokens.FlatOutlineColor.value"
                },
                {
                    "name": "disabledBorderColor",
                    "type": "Color = SuggestionChipTokens.FlatDisabledOutlineColor.value\n            .copy(alpha = SuggestionChipTokens.FlatDisabledOutlineOpacity)"
                },
                {
                    "name": "borderWidth",
                    "type": "Dp = SuggestionChipTokens.FlatOutlineWidth"
                },
                {
                    "name": ")",
                    "type": "BorderStroke = BorderStroke(borderWidth"
                },
                {
                    "name": "if (enabled) borderColor else disabledBorderColor)\n\n    /**\n     * Creates a [ChipBorder] that represents the default border used in a flat [SuggestionChip].\n     *\n     * @param borderColor the border color of this chip when enabled\n     * @param disabledBorderColor the border color of this chip when not enabled\n     * @param borderWidth the border stroke width of this chip\n     */\n    @Suppress(\"DEPRECATION\")\n    @Deprecated(\n        \"Maintained for binary compatibility. Use the suggestChipBorder functions instead\"",
                    "type": null
                },
                {
                    "name": "replaceWith = ReplaceWith(\"suggestionChipBorder(enabled",
                    "type": null
                },
                {
                    "name": "borderColor",
                    "type": null
                },
                {
                    "name": "\" +\n            \" disabledBorderColor",
                    "type": null
                },
                {
                    "name": "borderWidth)\")",
                    "type": null
                },
                {
                    "name": "level = DeprecationLevel.WARNING\n    )\n    @Composable\n    fun suggestionChipBorder(\n        borderColor",
                    "type": "Color = SuggestionChipTokens.FlatOutlineColor.value"
                },
                {
                    "name": "disabledBorderColor",
                    "type": "Color = SuggestionChipTokens.FlatDisabledOutlineColor.value\n            .copy(alpha = SuggestionChipTokens.FlatDisabledOutlineOpacity)"
                },
                {
                    "name": "borderWidth",
                    "type": "Dp = SuggestionChipTokens.FlatOutlineWidth"
                },
                {
                    "name": ")",
                    "type": "ChipBorder = ChipBorder(\n        borderColor = borderColor"
                },
                {
                    "name": "disabledBorderColor = disabledBorderColor",
                    "type": null
                },
                {
                    "name": "borderWidth = borderWidth\n    )\n\n    /**\n     * Creates a [ChipColors] that represents the default container",
                    "type": null
                },
                {
                    "name": "label",
                    "type": null
                },
                {
                    "name": "and icon colors used in\n     * an elevated [SuggestionChip].\n     */\n    @Composable\n    fun elevatedSuggestionChipColors() =\n        MaterialTheme.colorScheme.defaultElevatedSuggestionChipColors\n\n    /**\n     * Creates a [ChipColors] that represents the default container",
                    "type": null
                },
                {
                    "name": "label",
                    "type": null
                },
                {
                    "name": "and icon colors used in\n     * an elevated [SuggestionChip].\n     *\n     * @param containerColor the container color of this chip when enabled\n     * @param labelColor the label color of this chip when enabled\n     * @param iconContentColor the color of this chip's icon when enabled\n     * @param disabledContainerColor the container color of this chip when not enabled\n     * @param disabledLabelColor the label color of this chip when not enabled\n     * @param disabledIconContentColor the color of this chip's icon when not enabled\n     */\n    @Composable\n    fun elevatedSuggestionChipColors(\n        containerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "labelColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "iconContentColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledContainerColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledLabelColor",
                    "type": "Color = Color.Unspecified"
                },
                {
                    "name": "disabledIconContentColor",
                    "type": "Color = Color.Unspecified\n    ): ChipColors = MaterialTheme.colorScheme.defaultElevatedSuggestionChipColors.copy(\n        containerColor = containerColor"
                },
                {
                    "name": "labelColor = labelColor",
                    "type": null
                },
                {
                    "name": "leadingIconContentColor = iconContentColor",
                    "type": null
                },
                {
                    "name": "trailingIconContentColor = Color.Unspecified",
                    "type": null
                },
                {
                    "name": "disabledContainerColor = disabledContainerColor",
                    "type": null
                },
                {
                    "name": "disabledLabelColor = disabledLabelColor",
                    "type": null
                },
                {
                    "name": "disabledLeadingIconContentColor = disabledIconContentColor",
                    "type": null
                },
                {
                    "name": "disabledTrailingIconContentColor = Color.Unspecified\n    )\n\n    internal val ColorScheme.defaultElevatedSuggestionChipColors",
                    "type": "ChipColors\n        get()"
                }
            ]
        }
    ],
    "elevatedSuggestionChipElevation": [
        {
            "arguments": [
                {
                    "name": "elevation",
                    "type": "Dp = SuggestionChipTokens.ElevatedContainerElevation"
                },
                {
                    "name": "pressedElevation",
                    "type": "Dp = SuggestionChipTokens.ElevatedPressedContainerElevation"
                },
                {
                    "name": "focusedElevation",
                    "type": "Dp = SuggestionChipTokens.ElevatedFocusContainerElevation"
                },
                {
                    "name": "hoveredElevation",
                    "type": "Dp = SuggestionChipTokens.ElevatedHoverContainerElevation"
                },
                {
                    "name": "draggedElevation",
                    "type": "Dp = SuggestionChipTokens.DraggedContainerElevation"
                },
                {
                    "name": "disabledElevation",
                    "type": "Dp = SuggestionChipTokens.ElevatedDisabledContainerElevation\n    ): ChipElevation = ChipElevation(\n        elevation = elevation"
                },
                {
                    "name": "pressedElevation = pressedElevation",
                    "type": null
                },
                {
                    "name": "focusedElevation = focusedElevation",
                    "type": null
                },
                {
                    "name": "hoveredElevation = hoveredElevation",
                    "type": null
                },
                {
                    "name": "draggedElevation = draggedElevation",
                    "type": null
                },
                {
                    "name": "disabledElevation = disabledElevation\n    )\n\n    /** Default shape of a suggestion chip. */\n    val shape",
                    "type": "Shape @Composable get() = SuggestionChipTokens.ContainerShape.value\n}\n\n@Composable\nprivate fun Chip(\n    modifier: Modifier"
                },
                {
                    "name": "onClick",
                    "type": "() -> Unit"
                },
                {
                    "name": "enabled",
                    "type": "Boolean"
                },
                {
                    "name": "label",
                    "type": "@Composable () -> Unit"
                },
                {
                    "name": "labelTextStyle",
                    "type": "TextStyle"
                },
                {
                    "name": "labelColor",
                    "type": "Color"
                },
                {
                    "name": "leadingIcon",
                    "type": "@Composable (() -> Unit)?"
                },
                {
                    "name": "trailingIcon",
                    "type": "@Composable (() -> Unit)?"
                },
                {
                    "name": "shape",
                    "type": "Shape"
                },
                {
                    "name": "colors",
                    "type": "ChipColors"
                },
                {
                    "name": "elevation",
                    "type": "ChipElevation?"
                },
                {
                    "name": "border",
                    "type": "BorderStroke?"
                },
                {
                    "name": "minHeight",
                    "type": "Dp"
                },
                {
                    "name": "paddingValues",
                    "type": "PaddingValues"
                },
                {
                    "name": "interactionSource",
                    "type": "MutableInteractionSource?"
                },
                {
                    "name": ")",
                    "type": null
                }
            ]
        }
    ],
    "DateRangePicker": [
        {
            "arguments": [
                {
                    "name": "state",
                    "type": "DateRangePickerState"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "dateFormatter",
                    "type": "DatePickerFormatter = remember"
                }
            ]
        }
    ],
    "DateRangePickerTitle": [
        {
            "arguments": [
                {
                    "name": "displayMode",
                    "type": "DisplayMode"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier)"
                }
            ]
        }
    ],
    "DateRangePickerHeadline": [
        {
            "arguments": [
                {
                    "name": "@Suppress(\"AutoBoxing\") selectedStartDateMillis",
                    "type": "Long?"
                },
                {
                    "name": "@Suppress(\"AutoBoxing\") selectedEndDateMillis",
                    "type": "Long?"
                },
                {
                    "name": "displayMode",
                    "type": "DisplayMode"
                },
                {
                    "name": "dateFormatter",
                    "type": "DatePickerFormatter"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier\n    )"
                }
            ]
        }
    ],
    "SnackbarHost": [
        {
            "arguments": [
                {
                    "name": "hostState",
                    "type": "SnackbarHostState"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "snackbar",
                    "type": "@Composable (SnackbarData) -> Unit ="
                }
            ]
        }
    ],
    "LinearProgressIndicator": [
        {
            "arguments": [
                {
                    "name": "progress",
                    "type": "Float"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "color",
                    "type": "Color = ProgressIndicatorDefaults.linearColor"
                },
                {
                    "name": "trackColor",
                    "type": "Color = ProgressIndicatorDefaults.linearTrackColor"
                },
                {
                    "name": ") = LinearProgressIndicator(\n    progress",
                    "type": null
                },
                {
                    "name": "modifier",
                    "type": null
                },
                {
                    "name": "color",
                    "type": null
                },
                {
                    "name": "trackColor",
                    "type": null
                },
                {
                    "name": "strokeCap = ProgressIndicatorDefaults.LinearStrokeCap",
                    "type": null
                },
                {
                    "name": ")\n\n@Deprecated(\"Maintained for binary compatibility\"",
                    "type": null
                },
                {
                    "name": "level = DeprecationLevel.HIDDEN)\n@Composable\nfun LinearProgressIndicator(\n    modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "color",
                    "type": "Color = ProgressIndicatorDefaults.linearColor"
                },
                {
                    "name": "trackColor",
                    "type": "Color = ProgressIndicatorDefaults.linearTrackColor"
                },
                {
                    "name": ") = LinearProgressIndicator(\n    modifier",
                    "type": null
                },
                {
                    "name": "color",
                    "type": null
                },
                {
                    "name": "trackColor",
                    "type": null
                },
                {
                    "name": "strokeCap = ProgressIndicatorDefaults.LinearStrokeCap",
                    "type": null
                },
                {
                    "name": ")\n\nprivate fun DrawScope.drawLinearIndicator(\n    startFraction",
                    "type": "Float"
                },
                {
                    "name": "endFraction",
                    "type": "Float"
                },
                {
                    "name": "color",
                    "type": "Color"
                },
                {
                    "name": "strokeWidth",
                    "type": "Float"
                },
                {
                    "name": "strokeCap",
                    "type": "StrokeCap"
                },
                {
                    "name": ")",
                    "type": null
                }
            ]
        }
    ],
    "CircularProgressIndicator": [
        {
            "arguments": [
                {
                    "name": "progress",
                    "type": "Float"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "color",
                    "type": "Color = ProgressIndicatorDefaults.circularColor"
                },
                {
                    "name": "strokeWidth",
                    "type": "Dp = ProgressIndicatorDefaults.CircularStrokeWidth\n) = CircularProgressIndicator(\n    progress"
                },
                {
                    "name": "modifier",
                    "type": null
                },
                {
                    "name": "color",
                    "type": null
                },
                {
                    "name": "strokeWidth",
                    "type": null
                },
                {
                    "name": "trackColor = ProgressIndicatorDefaults.circularTrackColor",
                    "type": null
                },
                {
                    "name": "strokeCap = ProgressIndicatorDefaults.CircularDeterminateStrokeCap",
                    "type": null
                },
                {
                    "name": ")\n\n@Suppress(\"DEPRECATION\")\n@Deprecated(\"Maintained for binary compatibility\"",
                    "type": null
                },
                {
                    "name": "level = DeprecationLevel.HIDDEN)\n@Composable\nfun CircularProgressIndicator(\n    modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "color",
                    "type": "Color = ProgressIndicatorDefaults.circularColor"
                },
                {
                    "name": "strokeWidth",
                    "type": "Dp = ProgressIndicatorDefaults.CircularStrokeWidth\n) = CircularProgressIndicator(\n    modifier"
                },
                {
                    "name": "color",
                    "type": null
                },
                {
                    "name": "strokeWidth",
                    "type": null
                },
                {
                    "name": "trackColor = ProgressIndicatorDefaults.circularTrackColor",
                    "type": null
                },
                {
                    "name": "strokeCap = ProgressIndicatorDefaults.CircularIndeterminateStrokeCap",
                    "type": null
                },
                {
                    "name": ")\n\nprivate fun DrawScope.drawCircularIndicator(\n    startAngle",
                    "type": "Float"
                },
                {
                    "name": "sweep",
                    "type": "Float"
                },
                {
                    "name": "color",
                    "type": "Color"
                },
                {
                    "name": "stroke",
                    "type": "Stroke\n)"
                }
            ]
        }
    ],
    "HorizontalDivider": [
        {
            "arguments": [
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "thickness",
                    "type": "Dp = DividerDefaults.Thickness"
                },
                {
                    "name": "color",
                    "type": "Color = DividerDefaults.color"
                },
                {
                    "name": ") = Canvas(modifier.fillMaxWidth().height(thickness))",
                    "type": null
                }
            ]
        }
    ],
    "VerticalDivider": [
        {
            "arguments": [
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "thickness",
                    "type": "Dp = DividerDefaults.Thickness"
                },
                {
                    "name": "color",
                    "type": "Color = DividerDefaults.color"
                },
                {
                    "name": ") = Canvas(modifier.fillMaxHeight().width(thickness))",
                    "type": null
                }
            ]
        }
    ],
    "Divider": [
        {
            "arguments": [
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "thickness",
                    "type": "Dp = DividerDefaults.Thickness"
                },
                {
                    "name": "color",
                    "type": "Color = DividerDefaults.color"
                },
                {
                    "name": ")",
                    "type": null
                }
            ]
        }
    ],
    "Indicator": [
        {
            "arguments": [
                {
                    "name": "state",
                    "type": "PullToRefreshState"
                },
                {
                    "name": "modifier",
                    "type": "Modifier = Modifier"
                },
                {
                    "name": "color",
                    "type": "Color = LocalContentColor.current"
                },
                {
                    "name": ")",
                    "type": null
                }
            ]
        }
    ]
}
