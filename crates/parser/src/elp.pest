program = { SOI ~ expression* ~ EOI }

expression = {
    import
  | number
  | block
  | string
  | macro
  | export
  | enum
  | if_tree
  | object_def
  | component_def
  | function_def
  | function_call
  | object_instantiation
  | match_tree
  | variable_assignment
  | function_return_value
  | variable_access
  | variable_declaration
  | object_method_assignment
  | contextual_variable_access
  | function_component_call
}

// Imports and exports in modules.
import             = { "import" ~ "{" ~ (import_name ~ ("," ~ import_name)*)? ~ "}" ~ "from" ~ import_module_path }
import_module_path = { string }
import_name        = { IDENT ~ import_name_alias? }
import_name_alias  = { "as" ~ IDENT }
export             = { "export" ~ expression }

// Variables.
variable_declaration       = { (VAR | CONST) ~ IDENT ~ elp_type? }
variable_assignment_target = { variable_declaration | variable_access }
variable_assignment        = { variable_assignment_target ~ value_assignment }
value_assignment           = { (operand_assignment | EQUALITY) ~ expression }
operand_assignment         = { OPERAND? ~ "=" }
variable_access            = { pointer_semantics ~ IDENT ~ ("." ~ (IDENT | function_call)*)? }
pointer_semantics          = { (POINTER | REFERENCE)? }
contextual_variable_access = { "." ~ IDENT }

// Programming type info.
elp_type    = { IDENT ~ elp_generic? }
elp_generic = { "<" ~ elp_type ~ ("," ~ elp_type)* ~ ">" }
enum        = { "enum" ~ IDENT ~ "{" ~ (enum_member ~ ("," ~ enum_member)* ~ ","?)? ~ "}" }
enum_member = { "." ~ IDENT ~ ("(" ~ elp_type ~ ("," ~ elp_type)* ~ ")")? }

// Functions.
function_def            = { "fn" ~ (IDENT ~ ("." ~ IDENT)*)? ~ function_arguments? ~ function_return_type? ~ block }
function_return_type    = { ARROW ~ elp_type }
function_arguments      = { "(" ~ (SELF ~ ","?)? ~ (function_argument ~ ("," ~ function_argument)*)? ~ ")" }
function_argument       = { IDENT ~ elp_type }
function_component_call = { function_call ~ block }
function_call           = { (variable_access | contextual_variable_access) ~ elp_generic? ~ "(" ~ function_call_arguments ~ ")" }
function_call_arguments = { (expression ~ ("," ~ expression)*)? }
function_return_value   = { RETURN ~ expression }

// Objects.
object_def                  = { "object" ~ IDENT ~ object_implements? ~ "{" ~ (object_member ~ ("," ~ object_member)* ~ ","?)? ~ "}" }
object_implements           = { "implements" ~ elp_type ~ ("," ~ elp_type)* }
object_member               = { object_member_visibility? ~ "." ~ IDENT ~ object_key_type? ~ object_key_default_value? ~ object_key_tags? }
object_member_visibility    = { "private" | "public" }
object_key_type             = { elp_type }
object_key_default_value    = { "=" ~ expression }
object_key_tags             = { "`" ~ IDENT ~ ":" ~ string ~ "`" }
object_method_assignment    = { "." ~ IDENT ~ value_assignment }
object_value_spread         = { "..." ~ expression }
object_instantiation        = { IDENT ~ "{" ~ object_instantiation_member ~ ("," ~ object_instantiation_member)* ~ "}" }
object_instantiation_member = { object_value_spread | ("." ~ IDENT ~ "=" ~ expression) }

// Components
component_def = { "component" ~ (IDENT ~ ("." ~ IDENT)*) ~ function_arguments? ~ function_return_type? ~ block }

// If, elseif, else
if_tree     = { "if" ~ expression ~ block ~ elseif_tree? ~ else_tree? }
elseif_tree = { "elseif" ~ expression ~ block }
else_tree   = { "else" ~ block }

// Matches.
match_tree        = { "match" ~ (function_call | variable_access | contextual_variable_access) ~ "{" ~ match_arm+ ~ "}" }
match_arm_subject = { function_call | variable_access | contextual_variable_access | match_range }
match_arm         = { match_arm_subject ~ ARROW ~ match_arm_body ~ ","? }
match_arm_body    = { block | expression }
match_rangeables  = { (string | number | variable_access) }
match_range       = { (match_rangeables | (".." ~ match_rangeables?) | (match_rangeables ~ ".." ~ match_rangeables?))+ }

// Groups of expressions.
block = { "{" ~ expression* ~ "}" }

// Meta programming tooling.
macro = { "@" ~ IDENT ~ ("(" ~ elp_type ~ ")")? }

// helpers.
string = ${ "\"" ~ inner ~ "\"" }
inner  = @{ char* }
char   =  {
    !("\"" | "\\") ~ ANY
  | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
  | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}
number = @{
    "-"? ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*) ~ ("." ~ ASCII_DIGIT+)? ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)?
}

// Lexer tokens
ARROW      = _{ "->" }
IDENT      = @{ !number ~ !KEYWORD ~ (ASCII_ALPHANUMERIC+ | "_" | "\"" ~ inner ~ "\"")+ }
SELF       =  { "self" }
RETURN     =  { "return" }
REFERENCE  =  { "&" }
POINTER    =  { "*" }
COMMENT    = _{ "//" ~ (!"\n" ~ ANY)* }
WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
VAR        =  { "var" }
CONST      =  { "const" }
KEYWORD    = _{ "import" | "export" | "component" | "implements" | "enum" | "object" | "fn" | VAR | CONST | "object" | "match" }

// operations.
OPERAND  = { "+" | "-" | "*" | "/" | "^" | "&" }
EQUALITY = { "!" | "=" | "!=" }
