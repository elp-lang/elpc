program = _{ SOI ~ expression* ~ EOI }

expression = _{
    import
  | macro
  | export
  | enum
  | function_def
  | function_component_call
  | function_call
  | variable_assignment
}

// Imports and exports in modules.
import = { "import" ~ "{" ~ (","? ~ IDENT ~ ("as" ~ IDENT)?)+ ~ "}" ~ "from" ~ string }
export = { "export" ~ expression }

// Variables
variable_assignment = { ("var" | "const") ~ IDENT ~ (":" ~ elp_type)? ~ "=" ~ expression }

// Programming type info.
elp_type    = { IDENT ~ ("<" ~ elp_type ~ ("," ~ elp_type)* ~ ">")? }
enum        = { "enum" ~ IDENT ~ "{" ~ enum_member ~ ("," ~ enum_member)* ~ "}" }
enum_member = { "." ~ IDENT ~ ("(" ~ elp_type ~ ("," ~ elp_type)* ~ ")")? ~ ","? }

// Functions
function_def            = { "fn" ~ IDENT ~ function_arguments? ~ (ARROW ~ elp_type)? ~ block }
function_arguments      = { "(" ~ (function_argument ~ ("," ~ function_argument)*)? ~ ")" }
function_argument       = { IDENT ~ ":" ~ elp_type }
function_component_call = { function_call ~ block }
function_call           = { IDENT ~ ("(" ~ expression ~ ("," ~ expression)* ~ ")")? }

block = { "{" ~ expression* ~ "}" }

// Meta programming tooling.
macro = { "@" ~ IDENT ~ ("(" ~ elp_type ~ ")")? }

// helpers.
string = ${ "\"" ~ inner ~ "\"" }
inner  = @{ char* }
char   =  {
    !("\"" | "\\") ~ ANY
  | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
  | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}
number = @{
    "-"? ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*) ~ ("." ~ ASCII_DIGIT*)? ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)?
}

// Lexer tokens
IDENT      = @{ !(number | KEYWORD) ~ (ASCII_ALPHANUMERIC+ | "_" | "\"" ~ inner ~ "\"")+ }
COMMENT    = _{ "//" ~ (!"\n" ~ ANY)* }
WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
KEYWORD    = _{
    "import"
  | "export"
  | "enum"
  | "object"
  | "fn"
  | "var"
  | "const"
  | "object"
}
ARROW      = _{ "->" }
