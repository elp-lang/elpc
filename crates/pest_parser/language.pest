program = _{ SOI ~ expression* ~ EOI }

expression = _{
    import
  | macro
  | export
  | enum
  | function_def
  | function_component_call
  | function_call
  | variable_assignment
}

// Variables
variable_assignment = { ("var" | "const")? ~ IDENT ~ "=" ~ expression }

// Programming type info.
elp_type    = { !KEYWORD ~ IDENT ~ elp_generic? }
elp_generic = { "<" ~ elp_type ~ ("," ~ elp_type)* ~ ">" }
enum        = { "enum" ~ IDENT ~ "{" ~ enum_member ~ ("," ~ enum_member)* ~ "}" }
enum_member = { "." ~ IDENT ~ ("(" ~ elp_type ~ ("," ~ elp_type)* ~ ")")? }

// Imports and exports in modules.
import         =  { "import" ~ "{" ~ import_pattern ~ ("," ~ import_pattern)* ~ "}" ~ "from" ~ string }
import_pattern = _{ IDENT ~ ("as" ~ IDENT)? }
export         = _{ "export" ~ expression }

// Functions
function_def            = { "fn" ~ IDENT ~ function_arguments? ~ (ARROW ~ elp_type)? ~ block }
function_arguments      = { "(" ~ (function_argument ~ ("," ~ function_argument)*)? ~ ")" }
function_argument       = { IDENT ~ ":" ~ elp_type }
function_component_call = { function_call ~ block }
function_call           = { IDENT ~ ("(" ~ expression ~ ("," ~ expression)* ~ ")")? }

block = { "{" ~ expression* ~ "}" }

// Meta programming tooling.
macro = { "@" ~ IDENT ~ ("(" ~ elp_type ~ ")")? }

// helpers.
string = ${ "\"" ~ inner ~ "\"" }
inner  = @{ char* }
char   =  {
    !("\"" | "\\") ~ ANY
  | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
  | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}
number = @{
    "-"? ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*) ~ ("." ~ ASCII_DIGIT*)? ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)?
}

// Lexer tokens
IDENT      = @{ !number ~ !KEYWORD ~ (ASCII_ALPHANUMERIC+ | "_")+ ~ ASCII_ALPHANUMERIC* }
COMMENT    = _{ "//" ~ (!"\n" ~ ANY)* }
WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
KEYWORD    = _{ "import" | "export" | "enum" | "object" | "fn" | "var" | "const" }
ARROW      = _{ "->" }
